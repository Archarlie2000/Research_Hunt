# Accessing database
print("Execute MART API")
snp_list <- strsplit(primer, " ")[[1]]
upStream <- c("700")
downStream <- c("700")
snpmart <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
snp_sequence <- getBM(attributes = c('refsnp_id', 'snp'),
filters = c('snp_filter', 'upstream_flank', 'downstream_flank'),
checkFilters = FALSE,
values = list(snp_list, upStream, downStream),
mart = snpmart,
bmHeader = TRUE)
### Wrangling dataframe
print("Data gathered")
#Create a new data frame
snp_wrangled <- data.frame(matrix(ncol = 2, nrow = 0))
# Add each variation as a new string into each row
for (j in snp_sequence$`Variant name`){
for (i in list_seq(snp_sequence$`Variant sequences`[snp_sequence$`Variant name`==j])){
snp_wrangled[nrow(snp_wrangled) + 1,] <- c(j, i)
}
}
# Rename columns and data frame
colnames(snp_wrangled) = c("snpID", "sequence")
variantsTrimmed <- snp_wrangled
variantsTrimmed_ghost <- snp_wrangled
mismatch_list_collected <- data.frame(Identify = c(),
Forward = c(),
Reversed = c()
)
print("Start big loop")
clock = 0
for (primer_away in primer_away:(primer_away + shift)){
print(paste("Iteration ----- ", round(clock/shift *100,2), "%", sep = ""))
clock = (clock +1)
# add columns for the substrings leading up to and including the variant site
# produce right flanking left primer
for (i in primer_left_min:primer_left_max) {
colname <- paste0("left", i)
variantsTrimmed <- variantsTrimmed %>%
mutate(!!colname := str_sub(sequence, 501 - i, 501))
}
# produce right flanking right primer
for (i in primer_min:primer_max) {
colname <- paste0("right", 500 - primer_away - i)
variantsTrimmed <- variantsTrimmed %>% mutate(!!colname := str_sub(sequence,
500 - primer_away - i,
500 - primer_away))
}
# produce left flanking left primer
for (i in primer_left_min:primer_left_max) {
colname <- paste0("(left_flanking)_left", i)
variantsTrimmed_ghost <- variantsTrimmed_ghost %>%
mutate(!!colname := str_sub(sequence, 501, 500 + i))
}
# produce left flanking right primer
for (i in primer_min:primer_max) {
colname <- paste0("(left_flanking)_right", 500 + primer_away + i)
variantsTrimmed_ghost <- variantsTrimmed_ghost %>% mutate(!!colname := str_sub(sequence,
500 + primer_away - i,
500 + primer_away))
}
## Define the range of flanking for pivoting (right flanking)
limit_left_start <- paste("left", primer_left_max, sep = "")
limit_left_stop <- paste("left", primer_left_min, sep = "")
limit_right_start <- paste("right", 500 - primer_away - primer_max, sep = "")
limit_right_stop <- paste("right", 500 - primer_away - primer_min, sep = "")
## Define the range of flanking for pivoting (left flanking)
left_flanking_limit_left_start <- paste("(left_flanking)_left", primer_left_max, sep = "")
left_flanking_limit_left_stop <- paste("(left_flanking)_left", primer_left_min, sep = "")
left_flanking_limit_right_start <- paste("(left_flanking)_right", 500 + primer_away + primer_max, sep = "")
left_flanking_limit_right_stop <- paste("(left_flanking)_right", 500 + primer_away + primer_min, sep = "")
## Pivot the column into a long list
variantsTrimmed_temp_1 <- pivot_longer(variantsTrimmed,
cols = limit_left_start:limit_left_stop,
names_to = "Left_side",
values_to = "leftPrimers") %>%
pivot_longer(
cols = limit_right_start:limit_right_stop,
names_to = "Right_side",
values_to = "rightPrimers")
variantsTrimmed_temp_2 <- pivot_longer(variantsTrimmed_ghost,
cols = left_flanking_limit_left_start:left_flanking_limit_left_stop,
names_to = "left_flanking_Left_side",
values_to = "left_flanking_leftPrimers") %>%
pivot_longer(
cols = left_flanking_limit_right_start:left_flanking_limit_right_stop,
names_to = "left_flanking_Right_side",
values_to = "left_flanking_rightPrimers")
## combine left and flanking into a longer list since
## previous one is not split in the right way
vt_partition_1 <- cbind(variantsTrimmed_temp_1$snpID,
variantsTrimmed_temp_1$Left_side,
variantsTrimmed_temp_1$leftPrimers,
variantsTrimmed_temp_1$Right_side,
variantsTrimmed_temp_1$rightPrimers,
"right"
)
vt_partition_2 <- cbind(variantsTrimmed_temp_2$snpID,
variantsTrimmed_temp_2$left_flanking_Right_side,
variantsTrimmed_temp_2$left_flanking_rightPrimers,
variantsTrimmed_temp_2$left_flanking_Left_side,
variantsTrimmed_temp_2$left_flanking_leftPrimers,
"left")
variantsTrimmed2 <- rbind(vt_partition_1,vt_partition_2) %>% data.frame()
colnames(variantsTrimmed2) <- c("snp",
"forward_position",
"forward_primer",
"reversed_position",
"reversed_primer",
"flanking_direction")
## Fix the syntax for naming
variantsTrimmed2$forward_position <-  gsub("[(left_flanking)_]", "",
as.character(variantsTrimmed2$forward_position))
variantsTrimmed2$reversed_position <-  gsub("[(left_flanking)_right]", "",
as.character(variantsTrimmed2$reversed_position))
### Get mismatches for left primers depend on the flanking direaction
for (i in 1:nrow(variantsTrimmed2)){
if (variantsTrimmed2$flanking_direction[i] == "right")
{variantsTrimmed2$reversed_primer[i] <-  toupper(reverseComplement(variantsTrimmed2$reversed_primer[i]))
variantsTrimmed2$strong_mismatch_1[i] <-  get_strong1(variantsTrimmed2$forward_primer[i])
variantsTrimmed2$strong_mismatch_2[i] <-  get_strong2(variantsTrimmed2$forward_primer[i])
variantsTrimmed2$medium_mismatch[i] <-  get_medium1(variantsTrimmed2$forward_primer[i])
variantsTrimmed2$weak_mismatch[i] <-  get_weak1(variantsTrimmed2$forward_primer[i])
} else
{
variantsTrimmed2$forward_primer[i] <-  toupper(reverseComplement(variantsTrimmed2$forward_primer[i]))
variantsTrimmed2$strong_mismatch_1[i] <-  left_flanking_get_strong1(variantsTrimmed2$forward_primer[i])
variantsTrimmed2$strong_mismatch_2[i] <-  left_flanking_get_strong2(variantsTrimmed2$forward_primer[i])
variantsTrimmed2$medium_mismatch[i] <-  left_flanking_get_medium1(variantsTrimmed2$forward_primer[i])
variantsTrimmed2$weak_mismatch[i] <-  left_flanking_get_weak1(variantsTrimmed2$forward_primer[i])}
}
## Pivot all mismtaches into a long list
## Remove all Ns from primer list
## get reversed complementrayr for right primer
## deselect some columns
mismatch_list <- variantsTrimmed2 %>%
pivot_longer(
cols = c(strong_mismatch_1,
strong_mismatch_2,
medium_mismatch,
weak_mismatch),
names_to = "Mismatch",
values_to = "primer",
values_drop_na = TRUE) %>%
filter(primer != "N") %>%
mutate(identity = paste(snp, flanking_direction)) %>%
as.data.frame() %>%
dplyr::select(c(9, 8, 5))
colnames(mismatch_list) = c("identity", "Forward", "Reversed")
# print("nrow(mismatch_list)")
# print(nrow(mismatch_list))
mismatch_list_collected <- rbind(mismatch_list_collected, mismatch_list)
}
primer <- "rs1121980, rs9939609, rs7903146, rs4402960"
primer_away <- 500
primer_min <- 18
primer_max <- 25
primer_left_min <- 18
primer_left_max <- 25
left_TM <- 70
right_TM <- 70
left_hair_TM <- 35
right_hair_TM <- 35
diff <- 2
Homodimer_left_dg <- 30
Homodimer_right_dg <- 30
Heterodimer_dg <- 10
shift <- 400
left_TM_max = 66
left_TM_min = 60
## Not sure why, but it works
primer_away <- -primer_away
# Accessing database
print("Execute MART API")
snp_list <- strsplit(primer, " ")[[1]]
upStream <- c("700")
downStream <- c("700")
snpmart <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
snp_sequence <- getBM(attributes = c('refsnp_id', 'snp'),
filters = c('snp_filter', 'upstream_flank', 'downstream_flank'),
checkFilters = FALSE,
values = list(snp_list, upStream, downStream),
mart = snpmart,
bmHeader = TRUE)
### Wrangling dataframe
print("Data gathered")
#Create a new data frame
snp_wrangled <- data.frame(matrix(ncol = 2, nrow = 0))
# Add each variation as a new string into each row
for (j in snp_sequence$`Variant name`){
for (i in list_seq(snp_sequence$`Variant sequences`[snp_sequence$`Variant name`==j])){
snp_wrangled[nrow(snp_wrangled) + 1,] <- c(j, i)
}
}
# Rename columns and data frame
colnames(snp_wrangled) = c("snpID", "sequence")
variantsTrimmed <- snp_wrangled
variantsTrimmed_ghost <- snp_wrangled
mismatch_list_collected <- data.frame(Identify = c(),
Forward = c(),
Reversed = c()
)
snp_wrangled
print("Start big loop")
clock = 0
for (primer_away in primer_away:(primer_away + shift)){
print(paste("Iteration ----- ", round(clock/shift *100,2), "%", sep = ""))
clock = (clock +1)
# add columns for the substrings leading up to and including the variant site
# produce right flanking left primer
for (i in primer_left_min:primer_left_max) {
colname <- paste0("left", i)
variantsTrimmed <- variantsTrimmed %>%
mutate(!!colname := str_sub(sequence, 501 - i, 501))
}
# produce right flanking right primer
for (i in primer_min:primer_max) {
colname <- paste0("right", 500 - primer_away - i)
variantsTrimmed <- variantsTrimmed %>% mutate(!!colname := str_sub(sequence,
500 - primer_away - i,
500 - primer_away))
}
# produce left flanking left primer
for (i in primer_left_min:primer_left_max) {
colname <- paste0("(left_flanking)_left", i)
variantsTrimmed_ghost <- variantsTrimmed_ghost %>%
mutate(!!colname := str_sub(sequence, 501, 500 + i))
}
# produce left flanking right primer
for (i in primer_min:primer_max) {
colname <- paste0("(left_flanking)_right", 500 + primer_away + i)
variantsTrimmed_ghost <- variantsTrimmed_ghost %>% mutate(!!colname := str_sub(sequence,
500 + primer_away - i,
500 + primer_away))
}
## Define the range of flanking for pivoting (right flanking)
limit_left_start <- paste("left", primer_left_max, sep = "")
limit_left_stop <- paste("left", primer_left_min, sep = "")
limit_right_start <- paste("right", 500 - primer_away - primer_max, sep = "")
limit_right_stop <- paste("right", 500 - primer_away - primer_min, sep = "")
## Define the range of flanking for pivoting (left flanking)
left_flanking_limit_left_start <- paste("(left_flanking)_left", primer_left_max, sep = "")
left_flanking_limit_left_stop <- paste("(left_flanking)_left", primer_left_min, sep = "")
left_flanking_limit_right_start <- paste("(left_flanking)_right", 500 + primer_away + primer_max, sep = "")
left_flanking_limit_right_stop <- paste("(left_flanking)_right", 500 + primer_away + primer_min, sep = "")
## Pivot the column into a long list
variantsTrimmed_temp_1 <- pivot_longer(variantsTrimmed,
cols = limit_left_start:limit_left_stop,
names_to = "Left_side",
values_to = "leftPrimers") %>%
pivot_longer(
cols = limit_right_start:limit_right_stop,
names_to = "Right_side",
values_to = "rightPrimers")
variantsTrimmed_temp_2 <- pivot_longer(variantsTrimmed_ghost,
cols = left_flanking_limit_left_start:left_flanking_limit_left_stop,
names_to = "left_flanking_Left_side",
values_to = "left_flanking_leftPrimers") %>%
pivot_longer(
cols = left_flanking_limit_right_start:left_flanking_limit_right_stop,
names_to = "left_flanking_Right_side",
values_to = "left_flanking_rightPrimers")
## combine left and flanking into a longer list since
## previous one is not split in the right way
vt_partition_1 <- cbind(variantsTrimmed_temp_1$snpID,
variantsTrimmed_temp_1$Left_side,
variantsTrimmed_temp_1$leftPrimers,
variantsTrimmed_temp_1$Right_side,
variantsTrimmed_temp_1$rightPrimers,
"right"
)
vt_partition_2 <- cbind(variantsTrimmed_temp_2$snpID,
variantsTrimmed_temp_2$left_flanking_Right_side,
variantsTrimmed_temp_2$left_flanking_rightPrimers,
variantsTrimmed_temp_2$left_flanking_Left_side,
variantsTrimmed_temp_2$left_flanking_leftPrimers,
"left")
variantsTrimmed2 <- rbind(vt_partition_1,vt_partition_2) %>% data.frame()
colnames(variantsTrimmed2) <- c("snp",
"forward_position",
"forward_primer",
"reversed_position",
"reversed_primer",
"flanking_direction")
## Fix the syntax for naming
variantsTrimmed2$forward_position <-  gsub("[(left_flanking)_]", "",
as.character(variantsTrimmed2$forward_position))
variantsTrimmed2$reversed_position <-  gsub("[(left_flanking)_right]", "",
as.character(variantsTrimmed2$reversed_position))
### Get mismatches for left primers depend on the flanking direaction
for (i in 1:nrow(variantsTrimmed2)){
if (variantsTrimmed2$flanking_direction[i] == "right")
{variantsTrimmed2$reversed_primer[i] <-  toupper(reverseComplement(variantsTrimmed2$reversed_primer[i]))
variantsTrimmed2$strong_mismatch_1[i] <-  get_strong1(variantsTrimmed2$forward_primer[i])
variantsTrimmed2$strong_mismatch_2[i] <-  get_strong2(variantsTrimmed2$forward_primer[i])
variantsTrimmed2$medium_mismatch[i] <-  get_medium1(variantsTrimmed2$forward_primer[i])
variantsTrimmed2$weak_mismatch[i] <-  get_weak1(variantsTrimmed2$forward_primer[i])
} else
{
variantsTrimmed2$forward_primer[i] <-  toupper(reverseComplement(variantsTrimmed2$forward_primer[i]))
variantsTrimmed2$strong_mismatch_1[i] <-  left_flanking_get_strong1(variantsTrimmed2$forward_primer[i])
variantsTrimmed2$strong_mismatch_2[i] <-  left_flanking_get_strong2(variantsTrimmed2$forward_primer[i])
variantsTrimmed2$medium_mismatch[i] <-  left_flanking_get_medium1(variantsTrimmed2$forward_primer[i])
variantsTrimmed2$weak_mismatch[i] <-  left_flanking_get_weak1(variantsTrimmed2$forward_primer[i])}
}
## Pivot all mismtaches into a long list
## Remove all Ns from primer list
## get reversed complementrayr for right primer
## deselect some columns
mismatch_list <- variantsTrimmed2 %>%
pivot_longer(
cols = c(strong_mismatch_1,
strong_mismatch_2,
medium_mismatch,
weak_mismatch),
names_to = "Mismatch",
values_to = "primer",
values_drop_na = TRUE) %>%
filter(primer != "N") %>%
mutate(identity = paste(snp, flanking_direction)) %>%
as.data.frame() %>%
dplyr::select(c(9, 8, 5))
colnames(mismatch_list) = c("identity", "Forward", "Reversed")
# print("nrow(mismatch_list)")
# print(nrow(mismatch_list))
mismatch_list_collected <- rbind(mismatch_list_collected, mismatch_list)
}
df <- mismatch_list_collected
## Not sure why, but it works
primer_away <- -primer_away
print("R get filter activated")
df2 <- df
#start_time <- Sys.time()
df2$`TM_left (°C)` <- sapply(df2$Forward, calculate_tm)
View(df2)
df2 <- df2[df2$`TM_left (°C)` < left_TM_max, ]
df2 <- df2[df2$`TM_left (°C)` > left_TM_min, ]
df2$`TM_right (°C)` <- sapply(df2$Reversed, calculate_tm)
df2 <- df2[df2$`TM_right (°C)` < right_TM, ]
df2$`TM_Diff (°C)` <- abs(df2$`TM_left (°C)` - df2$`TM_right (°C)`)
df2 <- df2[df2$`TM_Diff (°C)` < diff, ]
df2$`Hairpin_left (°C)` <- sapply(df2$Forward, function(x) calculate_hairpin(x)$temp)
df2 <- df2[df2$`Hairpin_left (°C)` < left_hair_TM, ]
df2$`Hairpin_right (°C)` <- sapply(df2$Reversed, function(x) calculate_hairpin(x)$temp)
df2 <- df2[df2$`Hairpin_right (°C)` < right_hair_TM, ]
df2$`Homodimer_Left (°C)` <- sapply(df2$Forward, function(x) calculate_homodimer(x)$temp)
df2 <- df2[df2$`Homodimer_Left (°C)` < Homodimer_left_dg, ]
df2$`Homodimer_Right (°C)` <- sapply(df2$Reversed, function(x) calculate_homodimer(x)$temp)
df2 <- df2[df2$`Homodimer_Right (°C)` < Homodimer_right_dg, ]
colnames(df2) <- c("Identity",
"Forward (bp)",
"Reversed (bp)",
"TM_F (°C)",
"TM_R (°C)",
"TM diff (°C)",
"TM_F Hairpin (°C)",
"TM_R Hairpin (°C)",
"Homodimer_F (°C)",
"Homodimer_R (°C)")
df2 <- df2 %>%
mutate_if(is.numeric, round, digits = 2) %>%
arrange('TM diff (°C)', 'TM_L Hairpin (°C)')
print(nrow(df2))
print("Give df2")
top <- 50
level = 2
final = list()
df2$direction <- sapply(strsplit(as.character(df2$Identity), " "), function(x) x[[2]])
df2$Identity <- sapply(strsplit(as.character(df2$Identity), " "), function(x) x[[1]])
df <- df2 %>%
group_by(Identity) %>%
slice(1:top)%>%
ungroup()
nested_tables <- split(df, df$Identity)
levels <- length(nested_tables) * 2
View(nested_tables)
snp_sequence
library(biomaRt)
library(org.Hs.eg.db)
library(clusterProfiler)
library(pathview)
library(STRINGdb)
options(repos = BiocManager::repositories())
setwd("~/GitHub/Research_Hunt")
# Load dataset
rna_results <- read.csv("condition_2_D_vs_1_E.csv", header=TRUE, row.names=1)
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
options(repos = BiocManager::repositories())
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = rna_results$Row.names,
mart = ensembl_m)
# Merge gen names to gen ID
rna_results <- merge(rna_results, hgnc_m, by.x = "Row.names", by.y = "ensembl_gene_id")
# Drop all empty rows and anything not significant
# Drop all the wierd stuffs like N/A or blanks
rna_results <- rna_results[rna_results$pvalue < 0.05,]
rna_results <- rna_results[!apply(rna_results == "", 1, any), ,]
rna_results <- rna_results[!is.na(rna_results$pvalue),]
rna_results <- rna_results[!is.na(rna_results$hgnc_id),]
# Convert HGNC IDs into EntrezGene IDs
ensembl_h <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl")
hgnc_h <- getBM(filters = "hgnc_id",
attributes = c("hgnc_id", "entrezgene_id"),
values = rna_results$hgnc_id,
mart = ensembl_h)
hgnc_duplicated <- hgnc_h[duplicated(hgnc_h$hgnc_id),]
hgnc_h <- hgnc_h[!duplicated(hgnc_h$hgnc_id),]
rna_results <- merge(rna_results, hgnc_h, by.x = "hgnc_id", by.y = "hgnc_id")
# Create an ordered list of the rna_results
rna_list <- rna_results[order(rna_results$log2FoldChange, decreasing = TRUE),]
rna_list <- rna_list[!is.na(rna_list$entrezgene_id),c("entrezgene_id", "log2FoldChange")]
# Distill rna_results list into simplified gene_list
gene_list <- rna_list$log2FoldChange
names(gene_list) <- rna_list$entrezgene_id
# Create GO enrichment analysis (over representation)
gor <- enrichGO(gene = names(gene_list),
OrgDb = org.Hs.eg.db,
ont = "ALL",
pvalueCutoff = 0.05,
readable = TRUE)
# Create KEGG pathway gene enrichment analysis and make the file readable
# options(clusterProfiler.download.method = "wininet") #If KEGG isn't receiving data from web run this command
keggr <- enrichKEGG(gene = names(gene_list),
organism = "hsa",
keyType = "ncbi-geneid",
pvalueCutoff = 0.05)
keggr <- setReadable(keggr, OrgDb = org.Hs.eg.db, keyType="ENTREZID")
keggr <- setReadable(keggr, OrgDb = org.Hs.eg.db, keyType="ENTREZID")
# Get the list of significant KEGG pathways
pathway_list <- keggr$ID[keggr$qvalue < 0.05]
# Prepare directory for pathway output
dir.create(file.path(dir,paste0("pathways_",rna_file)), recursive = TRUE)
gene_list
View(gene_list)
pathway
pathway_list
# Make KEGG pathways using the gene_list expression values from significant pathways
for (pathway in pathway_list) {
pathview(gene.data = gene_list, pathway.id = pathway, species = "hsa")
}
pathway
pathway_list
pathview(gene.data = gene_list, pathway.id = "hsa01521", species = "hsa")
pathview(gene.data = gene_list, pathway.id = "hsa04015", species = "hsa")
pathview(gene.data = gene_list, pathway.id = "hsa00564", species = "hsa")
pathview(gene.data = gene_list, pathway.id = "hsa00520", species = "hsa")
pathview(gene.data = gene_list, pathway.id = "hsa05215", species = "hsa")
pathway_list
pathway_list[3,]
pathway_list[9:24]
for (pathway in pathway_list[9:24]) {
pathview(gene.data = gene_list, pathway.id = pathway, species = "hsa")
}
pathway_list[9:24]
length(pathway_list)
pathway_list
setwd("~/GitHub/Research_Hunt/Graph 3P vs 2D")
pathway_list
for (pathway in pathway_list[1:8]) {
pathview(gene.data = gene_list, pathway.id = pathway, species = "hsa")
}
pathway_list
for (pathway in pathway_list[1:2]) {
pathview(gene.data = gene_list, pathway.id = pathway, species = "hsa")
}
for (pathway in pathway_list[4:24]) {
pathview(gene.data = gene_list, pathway.id = pathway, species = "hsa")
}
pathway_list
pathview(gene.data = gene_list, pathway.id = "hsa01250", species = "hsa")
setwd("~/GitHub/Research_Hunt/1Evs2D comparison graphs")
pathview(gene.data = gene_list, pathway.id = "hsa01250", species = "hsa")
library(biomaRt)
library(org.Hs.eg.db)
library(clusterProfiler)
library(pathview)
library(STRINGdb)
options(repos = BiocManager::repositories())
pathview(gene.data = gene_list, pathway.id = "hsa01250", species = "hsa")
rna_results <- read.csv("condition_3_P_vs_2_D.csv", header=TRUE, row.names=1)
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = rna_results$Row.names,
mart = ensembl_m)
library(biomaRt)
library(org.Hs.eg.db)
library(clusterProfiler)
library(pathview)
library(STRINGdb)
options(repos = BiocManager::repositories())
rna_results <- read.csv("condition_3_P_vs_2_D.csv", header=TRUE, row.names=1)
rna_results <- read.csv("condition_3_P_vs_2_D.csv", header=TRUE, row.names=1)
setwd("~/GitHub/Research_Hunt")
rna_results <- read.csv("condition_3_P_vs_2_D.csv", header=TRUE, row.names=1)
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = rna_results$Row.names,
mart = ensembl_m)
