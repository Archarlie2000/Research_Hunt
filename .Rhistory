"TM_R (°C)",
"TM diff (°C)",
"TM_L Hairpin (°C)",
"TM_R Hairpin (°C)",
"Heterodimer (°C)",
"Homodimer_L (°C)",
"Homodimer_R (°C)")
#df2 <- df2[ c(1,2,3,4,) ]
df2 <- df2 %>%
mutate_if(is.numeric, round, digits = 2) %>%
arrange('TM diff (°C)', 'TM_L Hairpin (°C)')
print(nrow(df2))
print("Give df2")
return(df2)
}
filtered_df <- get_filter(outputframe,
left_TM_min,
left_TM_max,
right_TM,
left_hair_TM,
right_hair_TM,
diff,
Homodimer_left_dg,
Homodimer_right_dg,
Heterodimer_dg)
runApp('GitHub/Research-primer/Multiplexing App')
runApp('GitHub/Research-primer/Multiplexing App')
runApp('GitHub/Research-primer/Multiplexing App')
runApp('GitHub/Research-primer/Endanger spieces')
runApp('GitHub/Research-primer/Multiplexing App')
runApp('GitHub/Research-primer/Multiplexing App')
mtcars
runApp('GitHub/Research-primer/Multiplexing App')
shiny::runApp('GitHub/Research-primer/Multiplexing App')
runApp('GitHub/Research-primer/Multiplexing App')
runApp('GitHub/Research-primer/Multiplexing App')
df2 <- outputframe
for (i in 1:nrow(df2)){
df2$`TM_left (°C)`[i] = calculate_tm(df2$Forward[i])
df2$`TM_right (°C)`[i] = calculate_tm(df2$Reversed[i])
df2$`TM_Diff (°C)`[i] = abs(df2$`TM_left (°C)`[i] - df2$`TM_right (°C)`[i])
df2$`Heterodimer (kcal/mol)`[i] = calculate_dimer(df2$Forward[i], df$Reversed[i])$temp
}
View(outputframe)
df2 <- outputframe
View(df2)
for (i in 1:nrow(df2)){
df2$`TM_left (°C)`[i] = calculate_tm(df2$Forward[i])
df2$`TM_right (°C)`[i] = calculate_tm(df2$Reversed[i])
df2$`TM_Diff (°C)`[i] = abs(df2$`TM_left (°C)`[i] - df2$`TM_right (°C)`[i])
df2$`Heterodimer (kcal/mol)`[i] = calculate_dimer(df2$Forward[i], df$Reversed[i])$temp
}
View(df2)
print(i)
for (i in 1:nrow(df2)){
print(i)
# df2$`TM_left (°C)`[i] = calculate_tm(df2$Forward[i])
# df2$`TM_right (°C)`[i] = calculate_tm(df2$Reversed[i])
# df2$`TM_Diff (°C)`[i] = abs(df2$`TM_left (°C)`[i] - df2$`TM_right (°C)`[i])
# df2$`Heterodimer (kcal/mol)`[i] = calculate_dimer(df2$Forward[i], df$Reversed[i])$temp
}
df2$`TM_left (°C)`[i] = calculate_tm(df2$Forward[i])
for (i in 1:nrow(df2)){
print(i)
df2$`TM_left (°C)`[i] = calculate_tm(outputframe$Forward[i])
# df2$`TM_right (°C)`[i] = calculate_tm(df2$Reversed[i])
# df2$`TM_Diff (°C)`[i] = abs(df2$`TM_left (°C)`[i] - df2$`TM_right (°C)`[i])
# df2$`Heterodimer (kcal/mol)`[i] = calculate_dimer(df2$Forward[i], df$Reversed[i])$temp
}
df2$`TM_left (°C)`[1] = calculate_tm(df2$forward[1])
for (i in 1:nrow(df2)){
print(i)
df2$`TM_left (°C)`[i] = calculate_tm(df2$forward[i])
df2$`TM_right (°C)`[i] = calculate_tm(df2$reversed[i])
df2$`TM_Diff (°C)`[i] = abs(df2$`TM_left (°C)`[i] - df2$`TM_right (°C)`[i])
df2$`Heterodimer (kcal/mol)`[i] = calculate_dimer(df2$forward[i], df$reversed[i])$temp
}
i
df2$`TM_left (°C)`[i] = calculate_tm(df2$forward[i])
df2$`TM_right (°C)`[i] = calculate_tm(df2$reversed[i])
for (i in 1:nrow(df2)){
print(i)
df2$`TM_left (°C)`[i] = calculate_tm(df2$forward[i])
df2$`TM_right (°C)`[i] = calculate_tm(df2$reverse[i])
df2$`TM_Diff (°C)`[i] = abs(df2$`TM_left (°C)`[i] - df2$`TM_right (°C)`[i])
df2$`Heterodimer (kcal/mol)`[i] = calculate_dimer(df2$forward[i], df$reverse[i])$temp
}
df2$`TM_right (°C)`[i] = calculate_tm(df2$reverse[i])
df2$`TM_Diff (°C)`[i] = abs(df2$`TM_left (°C)`[i] - df2$`TM_right (°C)`[i])
df2$`Heterodimer (kcal/mol)`[i] = calculate_dimer(df2$forward[i], df$reverse[i])$temp
calculate_dimer(df2$forward[i], df$reverse[i])$temp
calculate_dimer(df2$forward[i], df$reverse[i])
for (i in 1:nrow(df2)){
print(i)
df2$`TM_left (°C)`[i] = calculate_tm(df2$forward[i])
df2$`TM_right (°C)`[i] = calculate_tm(df2$reverse[i])
df2$`TM_Diff (°C)`[i] = abs(df2$`TM_left (°C)`[i] - df2$`TM_right (°C)`[i])
df2$`Heterodimer (kcal/mol)`[i] = calculate_dimer(df2$forward[i], df2$reverse[i])$temp
}
df2 <- df2[df2$`TM_left (°C)` < left_TM_max, ]
df2 <- df2[df2$`TM_Diff (°C)` < diff, ]
df2 <- df2[df2$`Heterodimer (kcal/mol)` < Heterodimer_dg, ]
runApp('GitHub/Research-primer/Multiplexing App')
runApp('GitHub/Research-primer/Multiplexing App')
install.packages("ggraph")
install.packages("igraph")
# Libraries
library(ggraph)
library(igraph)
library(tidyverse)
library(viridis)
# We need a data frame giving a hierarchical structure. Let's consider the flare dataset:
edges <- flare$edges
View(edges)
View(flare)
k <- flare
vertices <- flare$vertices
mygraph <- graph_from_data_frame( edges, vertices=vertices )
# Control the size of each circle: (use the size column of the vertices data frame)
ggraph(mygraph, layout = 'circlepack', weight=size) +
geom_node_circle() +
theme_void()
class(k)
View(k)
k[[1]]
View(k[[1]])
# Create a subset of the dataset (I remove 1 level)
edges <- flare$edges %>%
filter(to %in% from) %>%
droplevels()
vertices <- flare$vertices %>%
filter(name %in% c(edges$from, edges$to)) %>%
droplevels()
vertices$size <- runif(nrow(vertices))
# Rebuild the graph object
mygraph <- graph_from_data_frame( edges, vertices=vertices )
# left
ggraph(mygraph, layout = 'circlepack', weight=size ) +
geom_node_circle(aes(fill = depth)) +
geom_node_text( aes(label=shortName, filter=leaf, fill=depth, size=size)) +
theme_void() +
theme(legend.position="FALSE") +
scale_fill_viridis()
# Right
ggraph(mygraph, layout = 'circlepack', weight=size ) +
geom_node_circle(aes(fill = depth)) +
geom_node_label( aes(label=shortName, filter=leaf, size=size)) +
theme_void() +
theme(legend.position="FALSE") +
scale_fill_viridis()
View(k[[2]])
install.packages("treemap")
# library
library(treemap)
# Create data
group <- c(rep("group-1",4),rep("group-2",2),rep("group-3",3))
subgroup <- paste("subgroup" , c(1,2,3,4,1,2,1,2,3), sep="-")
value <- c(13,5,22,12,11,7,3,1,23)
data <- data.frame(group,subgroup,value)
# Custom labels:
treemap(data, index=c("group","subgroup"),     vSize="value", type="index",
fontsize.labels=c(15,12),                # size of labels. Give the size per level of aggregation: size for group, size for subgroup, sub-subgroups...
fontcolor.labels=c("white","orange"),    # Color of labels
fontface.labels=c(2,1),                  # Font of labels: 1,2,3,4 for normal, bold, italic, bold-italic...
bg.labels=c("transparent"),              # Background color of labels
align.labels=list(
c("center", "center"),
c("right", "bottom")
),                                   # Where to place labels in the rectangle?
overlap.labels=0.5,                      # number between 0 and 1 that determines the tolerance of the overlap between labels. 0 means that labels of lower levels are not printed if higher level labels overlap, 1  means that labels are always printed. In-between values, for instance the default value .5, means that lower level labels are printed if other labels do not overlap with more than .5  times their area size.
inflate.labels=F,                        # If true, labels are bigger when rectangle is bigger.
)
shiny::runApp('GitHub/Research-primer/Multiplexing App')
shiny::runApp('GitHub/Research-primer/Multiplexing App')
runApp('GitHub/Research-primer/Multiplexing App')
setwd("~/GitHub/Research_Hunt")
library(biomaRt)
library(org.Hs.eg.db)
library(clusterProfiler)
library(pathview)
library(STRINGdb)
options(repos = BiocManager::repositories())
# Load dataset
rna_results <- read.csv("condition_2_D_vs_1_E.csv", header=TRUE, row.names=1)
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = rna_results$Row.names,
mart = ensembl_m)
# Merge gen names to gen ID
rna_results <- merge(rna_results, hgnc_m, by.x = "Row.names", by.y = "ensembl_gene_id")
# Drop all empty rows and anything not significant
# Drop all the wierd stuffs like N/A or blanks
rna_results <- rna_results[rna_results$pvalue < 0.05,]
rna_results <- rna_results[!apply(rna_results == "", 1, any), ,]
rna_results <- rna_results[!is.na(rna_results$pvalue),]
rna_results <- rna_results[!is.na(rna_results$hgnc_id),]
# Convert HGNC IDs into EntrezGene IDs
ensembl_h <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl")
hgnc_h <- getBM(filters = "hgnc_id",
attributes = c("hgnc_id", "entrezgene_id"),
values = rna_results$hgnc_id,
mart = ensembl_h)
hgnc_duplicated <- hgnc_h[duplicated(hgnc_h$hgnc_id),]
hgnc_h <- hgnc_h[!duplicated(hgnc_h$hgnc_id),]
rna_results <- merge(rna_results, hgnc_h, by.x = "hgnc_id", by.y = "hgnc_id")
# Create an ordered list of the rna_results
rna_list <- rna_results[order(rna_results$log2FoldChange, decreasing = TRUE),]
rna_list <- rna_list[!is.na(rna_list$entrezgene_id),c("entrezgene_id", "log2FoldChange")]
# Distill rna_results list into simplified gene_list
gene_list <- rna_list$log2FoldChange
names(gene_list) <- rna_list$entrezgene_id
# Create GO enrichment analysis (over representation)
gor <- enrichGO(gene = names(gene_list),
OrgDb = org.Hs.eg.db,
ont = "ALL",
pvalueCutoff = 0.05,
readable = TRUE)
# Create KEGG pathway gene enrichment analysis and make the file readable
# options(clusterProfiler.download.method = "wininet") #If KEGG isn't receiving data from web run this command
keggr <- enrichKEGG(gene = names(gene_list),
organism = "hsa",
keyType = "ncbi-geneid",
pvalueCutoff = 0.05)
keggr <- setReadable(keggr, OrgDb = org.Hs.eg.db, keyType="ENTREZID")
# Get the list of significant KEGG pathways
pathway_list <- keggr$ID[keggr$qvalue < 0.05]
gene_list
View(gene_list)
write.csv(data.frame(gene_list), "genlist_1.csv")
library(biomaRt)
library(org.Hs.eg.db)
library(clusterProfiler)
library(pathview)
library(STRINGdb)
options(repos = BiocManager::repositories())
##### DATA PREPARATION #####
#Set the directory with your files
# Load dataset
rna_results <- read.csv("condition_3_P_vs_2_D.csv", header=TRUE, row.names=1)
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = rna_results$Row.names,
mart = ensembl_m)
rna_results <- merge(rna_results, hgnc_m, by.x = "Row.names", by.y = "ensembl_gene_id")
# rna_results <- merge(rna_results, uniprot, by.x = "Row.names", by.y = "ensembl_gene_id")
# Drop all empty rows and anything not significant
rna_results <- rna_results[rna_results$pvalue < 0.05,]
rna_results <- rna_results[!apply(rna_results == "", 1, any), ,]
rna_results <- rna_results[!is.na(rna_results$pvalue),]
rna_results <- rna_results[!is.na(rna_results$hgnc_id),]
#write.csv(rna_results, "condition_3_P_vs_2_D_gen.csv")
# Convert HGNC IDs into EntrezGene IDs
ensembl_h <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl")
hgnc_h <- getBM(filters = "hgnc_id",
attributes = c("hgnc_id", "entrezgene_id"),
values = rna_results$hgnc_id,
mart = ensembl_h)
hgnc_duplicated <- hgnc_h[duplicated(hgnc_h$hgnc_id),]
hgnc_h <- hgnc_h[!duplicated(hgnc_h$hgnc_id),]
rna_results <- merge(rna_results, hgnc_h, by.x = "hgnc_id", by.y = "hgnc_id")
# Create an ordered list of the rna_results
rna_list <- rna_results[order(rna_results$log2FoldChange, decreasing = TRUE),]
rna_list <- rna_list[!is.na(rna_list$entrezgene_id),c("entrezgene_id", "log2FoldChange")]
# Distill rna_results list into simplified gene_list
gene_list <- rna_list$log2FoldChange
names(gene_list) <- rna_list$entrezgene_id
##### GO ENRICHMENT #####
# Create GO enrichment analysis (over representation)
gor <- enrichGO(gene = names(gene_list),
OrgDb = org.Hs.eg.db,
ont = "ALL",
pvalueCutoff = 0.05,
readable = TRUE)
# Save the GO enrichment analysis
#write.csv(as.data.frame(gor), "condition_3_P_vs_2_D_geneontology.csv")
##### KEGG ENRICHMENT #####
# Create KEGG pathway gene enrichment analysis and make the file readable
# options(clusterProfiler.download.method = "wininet") #If KEGG isn't receiving data from web run this command
keggr <- enrichKEGG(gene = names(gene_list),
organism = "hsa",
keyType = "ncbi-geneid",
pvalueCutoff = 0.05)
keggr <- setReadable(keggr, OrgDb = org.Hs.eg.db, keyType="ENTREZID")
# Save the KEGG pathway gene enrichment analysis
#write.csv(as.data.frame(keggr), "condition_3_P_vs_2_D_kegg.csv")
##### KEGG VISUAL PATHWAY #####
# Get the list of significant KEGG pathways
pathway_list <- keggr$ID[keggr$qvalue < 0.05]
# Prepare directory for pathway output
dir.create(file.path(dir,paste0("pathways_",rna_file)), recursive = TRUE)
setwd(file.path(dir,paste0("pathways_",rna_file)))
# Make KEGG pathways using the gene_list expression values from significant pathways
for (pathway in pathway_list) {
pathview(gene.data = gene_list, pathway.id = pathway, species = "hsa")
}
##### PROTEIN PROTEIN INTERATION GRAPH #####
#
string_db <- STRINGdb$new(version="11.5", species=9606, score_threshold=200, network_type="functional", input_directory="")
example1_mapped <- string_db$map( rna_list, "entrezgene_id", removeUnmapped = TRUE )
gene_list
write.csv(data.frame(gene_list), "genlist_2.csv")
setwd("~/GitHub/Research_Hunt")
list_1 <- csv.read("genlist_1.csv")
list_2 <- csv.read("genlist_2.csv")
setwd("~/GitHub/Research_Hunt")
list_1 <- csv.read("genlist_1.csv")
list_1 <- read.csv("genlist_1.csv")
list_2 <- read.csv("genlist_2.csv")
View(list_1)
View(list_2)
library(biomaRt)
library(org.Hs.eg.db)
library(clusterProfiler)
library(pathview)
library(STRINGdb)
options(repos = BiocManager::repositories())
setwd("~/GitHub/Research_Hunt")
# Load dataset
rna_results <- read.csv("condition_2_D_vs_1_E.csv", header=TRUE, row.names=1)
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
library(biomaRt)
library(org.Hs.eg.db)
library(clusterProfiler)
library(pathview)
library(STRINGdb)
options(repos = BiocManager::repositories())
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = rna_results$Row.names,
mart = ensembl_m)
# Merge gen names to gen ID
rna_results <- merge(rna_results, hgnc_m, by.x = "Row.names", by.y = "ensembl_gene_id")
# Drop all empty rows and anything not significant
# Drop all the wierd stuffs like N/A or blanks
rna_results <- rna_results[rna_results$pvalue < 0.05,]
rna_results <- rna_results[!apply(rna_results == "", 1, any), ,]
rna_results <- rna_results[!is.na(rna_results$pvalue),]
rna_results <- rna_results[!is.na(rna_results$hgnc_id),]
View(rna_results)
# Convert HGNC IDs into EntrezGene IDs
ensembl_h <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl")
options(repos = BiocManager::repositories())
# Convert HGNC IDs into EntrezGene IDs
ensembl_h <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl")
hgnc_h <- getBM(filters = "hgnc_id",
attributes = c("hgnc_id", "entrezgene_id"),
values = rna_results$hgnc_id,
mart = ensembl_h)
hgnc_duplicated <- hgnc_h[duplicated(hgnc_h$hgnc_id),]
hgnc_h <- hgnc_h[!duplicated(hgnc_h$hgnc_id),]
rna_results <- merge(rna_results, hgnc_h, by.x = "hgnc_id", by.y = "hgnc_id")
# Create an ordered list of the rna_results
rna_list <- rna_results[order(rna_results$log2FoldChange, decreasing = TRUE),]
rna_list <- rna_list[!is.na(rna_list$entrezgene_id),c("entrezgene_id", "log2FoldChange")]
# Distill rna_results list into simplified gene_list
gene_list <- rna_list$log2FoldChange
names(gene_list) <- rna_list$entrezgene_id
gene_list
names(gene_list) <- rna_list$entrezgene_id
# Create GO enrichment analysis (over representation)
gor <- enrichGO(gene = names(gene_list),
OrgDb = org.Hs.eg.db,
ont = "ALL",
pvalueCutoff = 0.05,
readable = TRUE)
# Create KEGG pathway gene enrichment analysis and make the file readable
# options(clusterProfiler.download.method = "wininet") #If KEGG isn't receiving data from web run this command
keggr <- enrichKEGG(gene = names(gene_list),
organism = "hsa",
keyType = "ncbi-geneid",
pvalueCutoff = 0.05)
keggr <- setReadable(keggr, OrgDb = org.Hs.eg.db, keyType="ENTREZID")
load("~/GitHub/Research_Hunt/genlist_1.csv")
setwd("~/GitHub/Research_Hunt")
library(readr)
genlist_1 <- read_csv("genlist_1.csv")
View(genlist_1)
library(readr)
genlist_2 <- read_csv("genlist_2.csv")
View(genlist_2)
keggres = gage(exprs = LogChange, gsets = kegg.sets.hm, same.dir = TRUE)
library(gage)
library(gageData)
logchange1 <- genlist_1$gene_list
logchange2 <- genlist_2$gene_list
genID1 <- genlist_1$X
genID2 <- genlist_2$X
names(logchange1) <- genID1
names(logchange2) <- genID2
View(genlist_1)
View(genlist_1)
colnames(genlist_1) <- c("x", "genlist_1")
colnames(genlist_2) <- c("x", "genlist_2")
logchange1 <- genlist_1$gene_list
colnames(genlist_1) <- c("x", "genlist")
colnames(genlist_2) <- c("x", "genlist")
logchange1 <- genlist_1$gene_list
logchange2 <- genlist_2$gene_list
colnames(genlist_1) <- c("x", "gen_list")
colnames(genlist_2) <- c("x", "gen_list")
logchange1 <- genlist_1$gene_list
logchange2 <- genlist_2$gene_list
colnames(genlist_1) <- c("x", "gene_list")
colnames(genlist_2) <- c("x", "gene_list")
logchange1 <- genlist_1$gene_list
logchange2 <- genlist_2$gene_list
genID1 <- genlist_1$X
genID2 <- genlist_2$X
colnames(genlist_1) <- c("X", "gene_list")
colnames(genlist_2) <- c("X", "gene_list")
logchange1 <- genlist_1$gene_list
logchange2 <- genlist_2$gene_list
genID1 <- genlist_1$X
genID2 <- genlist_2$X
names(logchange1) <- genID1
names(logchange2) <- genID2
tmp = sapply("map04914", function(pid) pathview(gene.data = logchange2, pathway.id = pid, species="hsa"))
library(pathview)
library(pathviewer)
tmp = sapply("map04914", function(pid) pathview(gene.data = logchange2, pathway.id = pid, species="hsa"))
tmp = sapply("04914", function(pid) pathview(gene.data = logchange2, pathway.id = pid, species="hsa"))
tmp = sapply("04914", function(pid) pathview(gene.data = logchange1, pathway.id = pid, species="hsa"))
tmp = sapply("04914", function(pid) pathview(gene.data = logchange2, pathway.id = pid, species="hsa"))
tmp = sapply("04914", function(pid) pathview(gene.data = logchange1, pathway.id = pid, species="hsa"))
tmp = sapply("07226", function(pid) pathview(gene.data = logchange2, pathway.id = pid, species="hsa"))
tmp = sapply("hsa07226", function(pid) pathview(gene.data = logchange2, pathway.id = pid, species="hsa"))
tmp = sapply("04914", function(pid) pathview(gene.data = logchange2, pathway.id = pid, species="hsa"))
tmp = sapply("00140	", function(pid) pathview(gene.data = logchange2, pathway.id = pid, species="hsa"))
tmp = sapply("00140", function(pid) pathview(gene.data = logchange1, pathway.id = pid, species="hsa"))
tmp = sapply("00140	", function(pid) pathview(gene.data = logchange2, pathway.id = pid, species="hsa"))
tmp = sapply("00140	", function(pid) pathview(gene.data = logchange2, pathway.id = pid, species="hsa"))
tmp = sapply("00140", function(pid) pathview(gene.data = logchange2, pathway.id = pid, species="hsa"))
tmp = sapply("00140", function(pid) pathview(gene.data = logchange1, pathway.id = pid, species="hsa"))
tmp = sapply("07226", function(pid) pathview(gene.data = logchange2, pathway.id = pid, species="hsa"))
tmp = sapply("04114", function(pid) pathview(gene.data = logchange2, pathway.id = pid, species="hsa"))
tmp = sapply("04114", function(pid) pathview(gene.data = logchange1, pathway.id = pid, species="hsa"))
tmp = sapply("07226", function(pid) pathview(gene.data = logchange2, pathway.id = pid, species="hsa"))
tmp = sapply("07226", function(pid) pathview(gene.data = logchange1, pathway.id = pid, species="hsa"))
tmp = sapply("05213", function(pid) pathview(gene.data = logchange2, pathway.id = pid, species="hsa"))
tmp = sapply("05213", function(pid) pathview(gene.data = logchange1, pathway.id = pid, species="hsa"))
tmp = sapply("05213", function(pid) pathview(gene.data = logchange2, pathway.id = pid, species="hsa"))
tmp = sapply("05213", function(pid) pathview(gene.data = logchange1, pathway.id = pid, species="hsa"))
dir.create("Test1")
setwd("Test1")
pathway_list
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = rna_results$Row.names,
mart = ensembl_m)
library(biomaRt)
library(org.Hs.eg.db)
library(clusterProfiler)
library(pathview)
library(STRINGdb)
options(repos = BiocManager::repositories())
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
# Load dataset
rna_results <- read.csv("condition_2_D_vs_1_E.csv", header=TRUE, row.names=1)
setwd("~/GitHub/Research_Hunt/Graph generating R")
# Load dataset
rna_results <- read.csv("condition_2_D_vs_1_E.csv", header=TRUE, row.names=1)
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
library(biomaRt)
library(org.Hs.eg.db)
library(clusterProfiler)
library(pathview)
library(STRINGdb)
options(repos = BiocManager::repositories())
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
options(repos = BiocManager::repositories())
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = rna_results$Row.names,
mart = ensembl_m)
# Get the list of significant KEGG pathways
pathway_list <- keggr$ID[keggr$qvalue < 0.05]
pathway_list
keggr
View(keggr)
setwd("~/GitHub/Research_Hunt")
tmp = sapply("04713", function(pid) pathview(gene.data = logchange2, pathway.id = pid, species="hsa"))
tmp = sapply("04713", function(pid) pathview(gene.data = logchange1, pathway.id = pid, species="hsa"))
tmp = sapply("04923", function(pid) pathview(gene.data = logchange2, pathway.id = pid, species="hsa"))
library(gage)
library(gageData)
library(pathview)
tmp = sapply("04923", function(pid) pathview(gene.data = logchange2, pathway.id = pid, species="hsa"))
tmp = sapply("04923", function(pid) pathview(gene.data = logchange1, pathway.id = pid, species="hsa"))
