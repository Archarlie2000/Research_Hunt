install.packages("org.Hs.eg.db")
r.version
version <- R.version.string
print(version)
install.packages("AnnotationDbi")
q()
install.packages("AnnotationDbi")
install.packages("org.Hs.eg.db")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Hs.eg.db")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("AnnotationDbi")
force = FALSE
library "GO:ID"
q()
library(datasets)
install.packages("pacman")
require(pacman)
pacman::p_load(pacman,dplyr)
pacman::p_load(ggally)
pacman::p_load(ggplot2,ggthemes,ggvis,httr,lubridate,plotly,rio,rmarkdown,shiny,strginr,tidyr)
library(datasets)
head(iris)
setwd("~/GitHub/Research_Hunt")
write.csv("genlist_10", list_1)
write.csv(list_1, "genlist_10")
write.csv("genlist_1", list_1)
setwd("~/GitHub/Research_Hunt")
library(biomaRt)
install.packages("biomartr")
install.packages("org.Hs.eg.db")
install.packages("clusterProfiler")
BiocManager::install("clusterProfiler")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Mm.eg.db")
library(biomaRt)
install.packages("biomaRt")
BiocManager::install("biomaRt")
library(biomaRt)
library(org.Hs.eg.db)
library(clusterProfiler)
library(pathview)
install.packages("pathview")
BiocManager::install("pathview")
library(pathview)
install.packages("STRINGdb")
BiocManager::install("STRINGdb")
library(STRINGdb)
library(pathview)
library(clusterProfiler)
library(clusterProfiler)
library(org.Hs.eg.db)
library(biomaRt)
options(repos = BiocManager::repositories())
# Load dataset
rna_results <- read.csv("condition_2_D_vs_1_E.csv", header=TRUE, row.names=1)
View(rna_results)
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = rna_results$Row.names,
mart = ensembl_m)
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = rna_results$Row.names,
mart = ensembl_m)
# Merge gen names to gen ID
rna_results <- merge(rna_results, hgnc_m, by.x = "Row.names", by.y = "ensembl_gene_id")
# Drop all empty rows and anything not significant
# Drop all the wierd stuffs like N/A or blanks
rna_results <- rna_results[rna_results$pvalue < 0.05,]
rna_results <- rna_results[!apply(rna_results == "", 1, any), ,]
rna_results <- rna_results[!is.na(rna_results$pvalue),]
rna_results <- rna_results[!is.na(rna_results$hgnc_id),]
View(rna_results)
# Convert HGNC IDs into EntrezGene IDs
ensembl_h <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl")
hgnc_h <- getBM(filters = "hgnc_id",
attributes = c("hgnc_id", "entrezgene_id"),
values = rna_results$hgnc_id,
mart = ensembl_h)
hgnc_duplicated <- hgnc_h[duplicated(hgnc_h$hgnc_id),]
hgnc_h <- hgnc_h[!duplicated(hgnc_h$hgnc_id),]
rna_results <- merge(rna_results, hgnc_h, by.x = "hgnc_id", by.y = "hgnc_id")
# Create an ordered list of the rna_results
rna_list <- rna_results[order(rna_results$log2FoldChange, decreasing = TRUE),]
rna_list <- rna_list[!is.na(rna_list$entrezgene_id),c("entrezgene_id", "log2FoldChange")]
# Distill rna_results list into simplified gene_list
gene_list <- rna_list$log2FoldChange
names(gene_list) <- rna_list$entrezgene_id
gene_list
# Create GO enrichment analysis (over representation)
gor <- enrichGO(gene = names(gene_list),
OrgDb = org.Hs.eg.db,
ont = "ALL",
pvalueCutoff = 0.05,
readable = TRUE)
# Create KEGG pathway gene enrichment analysis and make the file readable
# options(clusterProfiler.download.method = "wininet") #If KEGG isn't receiving data from web run this command
keggr <- enrichKEGG(gene = names(gene_list),
organism = "hsa",
keyType = "ncbi-geneid",
pvalueCutoff = 0.05)
keggr <- setReadable(keggr, OrgDb = org.Hs.eg.db, keyType="ENTREZID")
# Get the list of significant KEGG pathways
pathway_list <- keggr$ID[keggr$qvalue < 0.05]
pathway_list
pathview(gene.data = gene_list, pathway.id = "hsa04151", species = "hsa")
