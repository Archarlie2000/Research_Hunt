# Create KEGG pathway gene enrichment analysis - What happens when I use organism = mpuf (Ferret) or ko (KEGG orthology)
# options(clusterProfiler.download.method = "wininet") #If KEGG isn't receiving data from web run this command
keggr <- enrichKEGG(gene = gene_list,
organism = "hsa",
pvalueCutoff = 0.05)
# Create KEGG pathway gene enrichment analysis - What happens when I use organism = mpuf (Ferret) or ko (KEGG orthology)
# options(clusterProfiler.download.method = "wininet") #If KEGG isn't receiving data from web run this command
keggr <- enrichKEGG(gene = names(gene_list),
organism = "hsa",
pvalueCutoff = 0.05)
# Create KEGG pathway gene enrichment analysis - What happens when I use organism = mpuf (Ferret) or ko (KEGG orthology)
# options(clusterProfiler.download.method = "wininet") #If KEGG isn't receiving data from web run this command
keggr <- enrichKEGG(gene = names(gene_list),
organism = "ko",
pvalueCutoff = 0.05)
# Create KEGG pathway gene enrichment analysis - What happens when I use organism = mpuf (Ferret) or ko (KEGG orthology)
# options(clusterProfiler.download.method = "wininet") #If KEGG isn't receiving data from web run this command
keggr <- enrichKEGG(gene = names(gene_list),
organism = "hsa",
pvalueCutoff = 0.05)
# Create GO enrichment analysis (over representation)
gor <- enrichGO(gene = names(gene_list),
OrgDb = org.Hs.eg.db,
qvalueCutoff = 0.05,
readable = TRUE)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Hs.eg.db")
library(org.Hs.eg.db)
# Create GO enrichment analysis (over representation)
gor <- enrichGO(gene = names(gene_list),
OrgDb = org.Hs.eg.db,
qvalueCutoff = 0.05,
readable = TRUE)
head(gor)
# Create GO enrichment analysis (over representation)
gor <- enrichGO(gene = names(gene_list),
OrgDb = org.Hs.eg.db,
ont = "ALL",
qvalueCutoff = 0.05,
readable = TRUE)
head(gor)
rna_results <- read.csv(file.path(dir, rna_file), header=TRUE, row.names=1)
rna_results <- merge(rna_results, hgnc_m, by.x = "Row.names", by.y = "ensembl_gene_id")
# Drop all empty rows and anything not significant
rna_results <- rna_results[!is.na(rna_results$hgnc_id),]
library(biomaRt)
library(org.Hs.eg.db)
library(clusterProfiler)
#Set the directory with your files
dir <- "~/Hunt Lab/Mink Transcriptome/Results/genes"
# Load dataset
rna_file <- "condition_2_D_vs_1_E.csv"
rna_results <- read.csv(file.path(dir, rna_file), header=TRUE, row.names=1)
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = rna_results$Row.names,
mart = ensembl_m)
# uniprot <- getBM(filters = "ensembl_gene_id",
#                attributes = c("ensembl_gene_id","uniprot_gn_symbol"),
#                values = rna_results$Row.names,
#                mart = ensembl_m)
# uniprot_unique <- duplicated(uniprot$ensembl_gene_id)
# uniprot <- uniprot[!uniprot_unique,]
rna_results <- merge(rna_results, hgnc_m, by.x = "Row.names", by.y = "ensembl_gene_id")
# rna_results <- merge(rna_results, uniprot, by.x = "Row.names", by.y = "ensembl_gene_id")
# Drop all empty rows and anything not significant
rna_results <- rna_results[!is.na(rna_results$hgnc_id),]
# rna_results <- rna_results[rna_results$padj <= 0.05 | !is.na(rna_results$padj),]
# Convert HGNC IDs into EntrezGene IDs
ensembl_h <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl")
hgnc_h <- getBM(filters = "hgnc_id",
attributes = c("hgnc_id", "entrezgene_id"),
values = rna_results$hgnc_id,
mart = ensembl_h)
hgnc_duplicated <- hgnc_h[duplicated(hgnc_h$hgnc_id),]
hgnc_h <- hgnc_h[!duplicated(hgnc_h$hgnc_id),]
rna_results <- merge(rna_results, hgnc_h, by.x = "hgnc_id", by.y = "hgnc_id")
#
rna_list <- rna_results[order(rna_results$log2FoldChange, decreasing = TRUE),]
rna_list <- rna_list[!is.na(rna_list$entrezgene_id),c("entrezgene_id", "log2FoldChange")]
# gene_list <- 2^(rna_list$log2FoldChange)
names(gene_list) <- rna_list$entrezgene_id
# Create GO enrichment analysis (over representation)
gor <- enrichGO(gene = names(gene_list),
OrgDb = org.Hs.eg.db,
ont = "ALL",
qvalueCutoff = 0.05,
readable = TRUE)
# Create KEGG pathway gene enrichment analysis - What happens when I use organism = mpuf (Ferret)
# options(clusterProfiler.download.method = "wininet") #If KEGG isn't receiving data from web run this command
keggr <- enrichKEGG(gene = names(gene_list),
organism = "hsa",
pvalueCutoff = 0.05)
gene_list <- rna_list$log2FoldChange
names(gene_list) <- rna_list$entrezgene_id
# Create GO enrichment analysis (over representation)
gor <- enrichGO(gene = names(gene_list),
OrgDb = org.Hs.eg.db,
ont = "ALL",
qvalueCutoff = 0.05,
readable = TRUE)
# Create KEGG pathway gene enrichment analysis - What happens when I use organism = mpuf (Ferret)
# options(clusterProfiler.download.method = "wininet") #If KEGG isn't receiving data from web run this command
keggr <- enrichKEGG(gene = names(gene_list),
organism = "hsa",
pvalueCutoff = 0.05)
head(gor)
head(keggr)
keggr <- gseKEGG(gene = names(gene_list),
organism = "hsa",
pvalueCutoff = 0.05)
keggr <- gseKEGG(geneList = gene_list,
organism = "hsa",
pvalueCutoff = 0.05)
keggr <- gseKEGG(geneList = as.vector(gene_list),
organism = "hsa",
pvalueCutoff = 0.05)
isSorted(gene_list)
head(gene_list)
head(order(gene_list, decreasing = TRUE))
gene_list[order(gene_list, decreasing = TRUE)]
isordered(gene_list[order(gene_list, decreasing = TRUE)])
isSorted(gene_list[order(gene_list, decreasing = TRUE)])
isSorted(gene_list[order(gene_list, decreasing = FALSE)])
isSorted(gene_list[order(gene_list, decreasing = TRUE)])
keggr <- gseKEGG(geneList = gene_list[order(gene_list, decreasing = TRUE)],
organism = "hsa",
pvalueCutoff = 0.05)
head(setReadable(keggr, OrgDb = org.Hs.eg.db, keyType="ENTREZID"))
BiocManager::install("pathview")
library(pathview)
pathview(gene.data = gene_list,)
pathview(gene.data = gene_list, pathway.id = "hsa04010", species = "hsa" )
as.data.frame(gor)
writedir <- file.path(dir,paste(rna_file,"geneontology.csv", sep = ""))
write.csv(as.data.frame(gor), writedir)
View(rna_results)
View(rna_list)
View(keggr)
head(keggr)
library(biomaRt)
library(org.Hs.eg.db)
library(clusterProfiler)
library(pathview)
browseKEGG(keggr, 'hsa04010')
head(keggr)[1,]
head(keggr)[,1]
keggr$qvalue
keggr$ID[keggr$qvalue < 0.05,]
keggr$ID[keggr$qvalue < 0.05]
keggr$ID
keggr$qvalue
tail(keggr)
keggr$ID[keggr$qvalue < 0.05]
keggr$ID[keggr$qvalue < 1.8E-9]
keggr$ID[keggr$qvalue < 1.8e-09]
test <- 1.8e-09
typeof(test)
keggr$ID[keggr$qvalue < 1e-09]
keggr$ID[keggr$qvalue < 1e-09,]
subset(keggr, qvalue < 1e-09)
subset(keggr, keggr$qvalue < 1e-09)
subset(keggr, keggr$qvalue < 1e-08)
keggr$ID[keggr$qvalue < 1e-08]
pathview(gene.data = gene_list, pathway.id = "hsa04010", species = "hsa" )
gene_list
for (pathway in pathway_list) {
print(pathway)
}
pathway_list <- keggr$ID[keggr$qvalue < 1e-08]
for (pathway in pathway_list) {
print(pathway)
}
for (pathway in pathway_list) {
pathview(gene.data = gene_list, pathway.id = pathway, species = "hsa", kegg.dir = file.path(dir,rna_file))
}
for (pathway in pathway_list) {
pathview(gene.data = gene_list, pathway.id = as.vector(pathway), species = "hsa", kegg.dir = file.path(dir,rna_file))
}
for (pathway in pathway_list) {
pathview(gene.data = gene_list, pathway.id = as.character(pathway), species = "hsa", kegg.dir = file.path(dir,rna_file))
}
pathview(gene.data = gene_list, pathway.id = "hsa04010", species = "hsa" )
pathview(gene.data = gene_list, pathway.id = "hsa04010", species = "hsa", kegg.dir = file.path(dir,rna_file) )
dir.create(file.path(dir,rna_file), recursive = TRUE)
dir.create(file.path(dir,paste0("pathways_",rna_file)), recursive = TRUE)
pathview(gene.data = gene_list, pathway.id = "hsa04010", species = "hsa", kegg.dir = file.path(dir,paste0("pathways_",rna_file)))
pathview(gene.data = gene_list, pathway.id = "hsa04010", species = "hsa", kegg.dir = file.path(dir,paste0("pathways_",rna_file)))
setwd(file.path(dir,paste0("pathways_",rna_file)))
pathview(gene.data = gene_list, pathway.id = "hsa04010", species = "hsa")
for (pathway in pathway_list) {
pathview(gene.data = gene_list, pathway.id = pathway, species = "hsa")
}
install.packages("STRINGdb")
install.packages(STRINGdb)
BiocManager::install("STRINGdb")
BiocManager::install("STRINGdb")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("STRINGdb")
install.packages("BiocManager")
BiocManager::install("STRINGdb")
library(STRINGdb)
library(STRINGdb)
BiocManager::install("STRINGdb")
library(STRINGdb)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("STRINGdb")
install.packages(c("dplyr", "farver", "ggforce", "ggraph", "graphlayouts", "igraph", "Rcpp", "RCurl", "rlang", "RSQLite", "stringi", "tibble", "tidygraph", "tweenr"))
install.packages(c("dplyr", "farver", "ggforce", "ggraph", "graphlayouts", "igraph", "Rcpp", "RCurl", "rlang", "RSQLite", "stringi", "tibble", "tidygraph", "tweenr"))
install.packages(c("dplyr", "farver", "ggforce", "ggraph", "graphlayouts", "igraph", "Rcpp", "RCurl", "rlang", "RSQLite", "stringi", "tibble", "tidygraph", "tweenr"))
if(!require(installr)) {
install.packages("installr");
require(installr)
}
library(installr)
updateR()
install.packages("biomaRt")
BiocManager::install("STRINGdb")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("STRINGdb")
BiocManager::install("biomaRt")
BiocManager::install("pathview")
BiocManager::install("clusterProfiler")
library(biomaRt)
library(org.Hs.eg.db)
library(clusterProfiler)
library(pathview)
library(STRINGdb)
BiocManager::install("STRINGdb")
BiocManager::install("STRINGdb", force = TRUE)
deattach(STRINGdb)
deattach("STRINGdb")
deattach("package:STRINGdb", unload = TRUE)
deatach("package:STRINGdb", unload = TRUE)
deatch("package:STRINGdb", unload = TRUE)
detach("package:STRINGdb", unload = TRUE)
BiocManager::install("STRINGdb", force = TRUE)
library(STRINGdb)
#STRINGdb$map(gene_list, )
head(gene_list)
gene_list
test <- STRINGdb$map(gene_list, names(gene_list))
test <- STRINGdb$map( gene_list, names(gene_list), removeUnmapped = TRUE )
rna_list
head(rna_list)
head(rna_results)
test <- STRINGdb$map( rna_list, entrezgene_id, removeUnmapped = TRUE )
test <- string_db$map( rna_list, entrezgene_id, removeUnmapped = TRUE )
package.version(ReferenceClasses)
package.version("ReferenceClasses")
package.version("ggplot2")
#
string_db <- STRINGdb$new(version="11.5", species=9606, score_threshold=200, network_type="functional", input_directory="")
test <- STRINGdb$map( rna_list, entrezgene_id, removeUnmapped = TRUE )
test <- string_db$map( rna_list, entrezgene_id, removeUnmapped = TRUE )
head(rna_list)
test <- string_db$map( rna_list, "entrezgene_id", removeUnmapped = TRUE )
hits  <- test$STRING_id[1:200]
string_db$plot_network(hits)
test
hits  <- test$STRING_id
string_db$plot_network(hits)
hits  <- test$STRING_id[1:2000]
string_db$plot_network(hits)
tail(rna_list)
tail(rna_results)
rna_results <- rna_results[rna_results$padj <= 0.05 | !is.na(rna_results$padj),]
tail(rna_results)
tail(rna_results[rna_results$padj < 0.05,])
head(rna_results[rna_results$padj < 0.05,])
head(rna_results)
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
library(biomaRt)
library(org.Hs.eg.db)
library(clusterProfiler)
library(pathview)
library(STRINGdb)
#Set the directory with your files
dir <- "~/Hunt Lab/Mink Transcriptome/Results/genes"
# Load dataset
rna_file <- "condition_2_D_vs_1_E.csv"
rna_results <- read.csv(file.path(dir, rna_file), header=TRUE, row.names=1)
View(rna_results)
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = rna_results$Row.names,
mart = ensembl_m)
# uniprot <- getBM(filters = "ensembl_gene_id",
#                attributes = c("ensembl_gene_id","uniprot_gn_symbol"),
#                values = rna_results$Row.names,
#                mart = ensembl_m)
# uniprot_unique <- duplicated(uniprot$ensembl_gene_id)
# uniprot <- uniprot[!uniprot_unique,]
rna_results <- merge(rna_results, hgnc_m, by.x = "Row.names", by.y = "ensembl_gene_id")
View(rna_results)
# Drop all empty rows and anything not significant
rna_results <- rna_results[!is.na(rna_results$hgnc_id),]
View(rna_results)
rna_results <- rna_results[rna_results$padj <= 0.05 | !is.na(rna_results$padj),]
View(rna_results)
test <- rna_results[!is.na(rna_results$hgnc_id),]
view(test)
View(test)
rna_results <- NA
rna_results <- read.csv(file.path(dir, rna_file), header=TRUE, row.names=1)
View(rna_results)
rna_results <- merge(rna_results, hgnc_m, by.x = "Row.names", by.y = "ensembl_gene_id")
View(rna_results)
# Drop all empty rows and anything not significant
rna_results <- rna_results[!is.na(rna_results$hgnc_id),]
View(rna_results)
# Drop all empty rows and anything not significant
rna_results_empty <- rna_results[!is.na(rna_results$hgnc_id),]
View(rna_results_empty)
rna_results_empty[!is.na(rna_results$hgnc_id),]
rna_results_empty[!apply(rna_results_empty == "", 1, all), ,]
rna_results_empty[!apply(rna_results_empty == "", 1, any), ,]
# Drop all empty rows and anything not significant
rna_results <- rna_results[rna_results$padj < 0.05 | !is.na(rna_results$padj),]
View(rna_results)
head(rna_results[rna_results$padj < 0.05 | !is.na(rna_results$padj),])
head(rna_results[!is.na(rna_results$padj),])
head(rna_results[(rna_results$padj < 0.05 | !is.na(rna_results$padj)),])
head(rna_results[rna_results$padj < 0.05,])
rna_results_not <- rna_results
# Drop all empty rows and anything not significant
rna_results <- rna_results[rna_results$padj < 0.05,]
View(rna_results)
rna_results <- rna_results[!apply(rna_results == "", 1, any), ,]
rna_results <- rna_results[!is.na(rna_results$padj),]
rna_results <- rna_results[!is.na(rna_results$hgnc_id),]
# Convert HGNC IDs into EntrezGene IDs
ensembl_h <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl")
hgnc_h <- getBM(filters = "hgnc_id",
attributes = c("hgnc_id", "entrezgene_id"),
values = rna_results$hgnc_id,
mart = ensembl_h)
hgnc_duplicated <- hgnc_h[duplicated(hgnc_h$hgnc_id),]
hgnc_h <- hgnc_h[!duplicated(hgnc_h$hgnc_id),]
rna_results <- merge(rna_results, hgnc_h, by.x = "hgnc_id", by.y = "hgnc_id")
View(rna_results)
# Create an ordered list of the rna_results
rna_list <- rna_results[order(rna_results$log2FoldChange, decreasing = TRUE),]
rna_list <- rna_list[!is.na(rna_list$entrezgene_id),c("entrezgene_id", "log2FoldChange")]
View(rna_list)
# Distill rna_results list into simplified gene_list
gene_list <- rna_list$log2FoldChange
names(gene_list) <- rna_list$entrezgene_id
# Create GO enrichment analysis (over representation)
gor <- enrichGO(gene = names(gene_list),
OrgDb = org.Hs.eg.db,
ont = "ALL",
qvalueCutoff = 0.05,
readable = TRUE)
# Save the GO enrichment analysis
writedir <- file.path(dir,paste(rna_file,"_geneontology.csv", sep = ""))
write.csv(as.data.frame(gor), writedir)
keggr <- enrichKEGG(gene = names(gene_list),
organism = "hsa",
pvalueCutoff = 0.05)
keggr <- setReadable(keggr, OrgDb = org.Hs.eg.db, keyType="ENTREZID")
# Save the KEGG pathway gene enrichment analysis
writedir <- file.path(dir,paste(rna_file,"_kegg.csv", sep = ""))
write.csv(as.data.frame(keggr), writedir)
##### KEGG VISUAL PATHWAY #####
# Get the list of significant KEGG pathways
pathway_list <- keggr$ID[keggr$qvalue < 0.05]
# Prepare directory for pathway output
dir.create(file.path(dir,paste0("pathways_",rna_file)), recursive = TRUE)
setwd(file.path(dir,paste0("pathways_",rna_file)))
# Make KEGG pathways using the gene_list expression values from significant pathways
for (pathway in pathway_list) {
pathview(gene.data = gene_list, pathway.id = pathway, species = "hsa")
}
# Create KEGG pathway gene enrichment analysis and make the file readable
# options(clusterProfiler.download.method = "wininet") #If KEGG isn't receiving data from web run this command
keggr <- enrichKEGG(gene = names(gene_list),
organism = "hsa",
pvalueCutoff = 0.05)
keggr <- setReadable(keggr, OrgDb = org.Hs.eg.db, keyType="ENTREZID")
# Save the KEGG pathway gene enrichment analysis
writedir <- file.path(dir,paste(rna_file,"_kegg.csv", sep = ""))
# Create KEGG pathway gene enrichment analysis and make the file readable
# options(clusterProfiler.download.method = "wininet") #If KEGG isn't receiving data from web run this command
keggr <- enrichKEGG(gene = names(gene_list),
organism = "hsa",
pvalueCutoff = 0.05)
head(keggr)
options(clusterProfiler.download.method = "wininet")
# Create KEGG pathway gene enrichment analysis and make the file readable
# options(clusterProfiler.download.method = "wininet") #If KEGG isn't receiving data from web run this command
keggr <- enrichKEGG(gene = names(gene_list),
organism = "hsa",
pvalueCutoff = 0.05)
head(keggr)
names(gene_list)
View(rna_results_not)
# Create KEGG pathway gene enrichment analysis and make the file readable
# options(clusterProfiler.download.method = "wininet") #If KEGG isn't receiving data from web run this command
keggr <- enrichKEGG(gene = names(gene_list),
organism = "hsa",
keyType = "ncbi-geneid",
pvalueCutoff = 0.05)
library(org.Hs.eg.db)
library(clusterProfiler)
library(pathview)
library(STRINGdb)
# Create KEGG pathway gene enrichment analysis and make the file readable
# options(clusterProfiler.download.method = "wininet") #If KEGG isn't receiving data from web run this command
keggr <- enrichKEGG(gene = names(gene_list),
organism = "hsa",
keyType = "ncbi-geneid",
pvalueCutoff = 0.05)
head(keggr)
# Create KEGG pathway gene enrichment analysis and make the file readable
# options(clusterProfiler.download.method = "wininet") #If KEGG isn't receiving data from web run this command
keggr <- enrichKEGG(gene = as.vector(names(gene_list)),
organism = "hsa",
keyType = "ncbi-geneid",
pvalueCutoff = 0.05)
head(keggr)
# Create KEGG pathway gene enrichment analysis and make the file readable
# options(clusterProfiler.download.method = "wininet") #If KEGG isn't receiving data from web run this command
keggr <- enrichKEGG(gene = as.vector(names(gene_list)),
organism = "hsa",
keyType = "ncbi-geneid")
head(keggr)
names(gene_list)
names <- names(gene_list)
# Create KEGG pathway gene enrichment analysis and make the file readable
# options(clusterProfiler.download.method = "wininet") #If KEGG isn't receiving data from web run this command
keggr <- enrichKEGG(gene = names,
organism = "hsa",
keyType = "ncbi-geneid")
head(keggr)
typeof(names)
keggr <- enrichKEGG(gene = names,
organism = "hsa",
keyType = "ncbi-geneid"); head(keggr)
keggr <- enrichKEGG(gene = names); head(keggr)
keggr <- setReadable(keggr, OrgDb = org.Hs.eg.db, keyType="ENTREZID")
head(keggr)
data(geneList, package='DOSE')
de <- names(geneList)[1:100]
yy <- enrichKEGG(de, pvalueCutoff=0.01)
head(yy)
yy <- enrichKEGG(names, pvalueCutoff=0.01)
head(yy)
rna_results <- read.csv(file.path(dir, rna_file), header=TRUE, row.names=1)
View(rna_results)
rna_results <- merge(rna_results, hgnc_m, by.x = "Row.names", by.y = "ensembl_gene_id")
# Drop all empty rows and anything not significant
rna_results <- rna_results[rna_results$pvalue < 0.05,]
rna_results <- rna_results[!apply(rna_results == "", 1, any), ,]
rna_results <- rna_results[!is.na(rna_results$pvalue),]
rna_results <- rna_results[!is.na(rna_results$hgnc_id),]
# Convert HGNC IDs into EntrezGene IDs
ensembl_h <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl")
hgnc_h <- getBM(filters = "hgnc_id",
attributes = c("hgnc_id", "entrezgene_id"),
values = rna_results$hgnc_id,
mart = ensembl_h)
hgnc_duplicated <- hgnc_h[duplicated(hgnc_h$hgnc_id),]
hgnc_h <- hgnc_h[!duplicated(hgnc_h$hgnc_id),]
rna_results <- merge(rna_results, hgnc_h, by.x = "hgnc_id", by.y = "hgnc_id")
# Create an ordered list of the rna_results
rna_list <- rna_results[order(rna_results$log2FoldChange, decreasing = TRUE),]
View(rna_results)
rna_list <- rna_list[!is.na(rna_list$entrezgene_id),c("entrezgene_id", "log2FoldChange")]
# Distill rna_results list into simplified gene_list
gene_list <- rna_list$log2FoldChange
names(gene_list) <- rna_list$entrezgene_id
# Create GO enrichment analysis (over representation)
gor <- enrichGO(gene = names(gene_list),
OrgDb = org.Hs.eg.db,
ont = "ALL",
qvalueCutoff = 0.05,
readable = TRUE)
# Create KEGG pathway gene enrichment analysis and make the file readable
# options(clusterProfiler.download.method = "wininet") #If KEGG isn't receiving data from web run this command
keggr <- enrichKEGG(gene = names(gene_list),
organism = "hsa",
keyType = "ncbi-geneid",
pvalueCutoff = 0.05)
head(keggr)
library(tximport)
library(biomaRt)
library(org.Hs.eg.db)
library(clusterProfiler)
library(pathview)
library(STRINGdb)
#Set the directory with your files
dir <- "~/Hunt Lab/Mink Transcriptome/Results/genes"
# Load dataset
rna_file <- "condition_2_D_vs_1_E.csv"
rna_results <- read.csv(file.path(dir, rna_file), header=TRUE, row.names=1)
rna_results <- read.csv(file.path(dir, rna_file), header=TRUE, row.names=1)
View(ensembl_h)
View(rna_results)
