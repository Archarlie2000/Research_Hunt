library(clusterProfiler)
library(pathview)
library(STRINGdb)
# Create KEGG pathway gene enrichment analysis and make the file readable
# options(clusterProfiler.download.method = "wininet") #If KEGG isn't receiving data from web run this command
keggr <- enrichKEGG(gene = names(gene_list),
organism = "hsa",
keyType = "ncbi-geneid",
pvalueCutoff = 0.05)
keggr <- setReadable(keggr, OrgDb = org.Hs.eg.db, keyType="ENTREZID")
# Get the list of significant KEGG pathways
pathway_list <- keggr$ID[keggr$qvalue < 0.05]
pathway_list
pathway
gene_list
pathway_list
pathview(gene.data = gene_list, pathway.id = hsa04010, species = "hsa")
pathview(gene.data = gene_list, pathway.id = "hsa04010", species = "hsa")
pathview(gene.data = gene_list, pathway.id = "hsa04010", species = "hsa")
kegg
View(rna_list)
#
string_db <- STRINGdb$new(version="11.5", species=9606, score_threshold=200, network_type="functional", input_directory="")
example1_mapped <- string_db$map( rna_list, "entrezgene_id", removeUnmapped = TRUE )
rna_results <- read.csv("condition_3_P_vs_2_D.csv", header=TRUE, row.names=1)
setwd("~/GitHub/Research_Hunt")
rna_results <- read.csv("condition_3_P_vs_2_D.csv", header=TRUE, row.names=1)
rna_results <- read.csv("condition_3_P_vs_2_D.csv", header=TRUE, row.names=1)
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = rna_results$Row.names,
mart = ensembl_m)
rna_results <- merge(rna_results, hgnc_m, by.x = "Row.names", by.y = "ensembl_gene_id")
View(rna_results)
# Drop all empty rows and anything not significant
rna_results <- rna_results[rna_results$pvalue < 0.05,]
rna_results <- rna_results[!apply(rna_results == "", 1, any), ,]
rna_results <- rna_results[!is.na(rna_results$pvalue),]
rna_results <- rna_results[!is.na(rna_results$hgnc_id),]
# Convert HGNC IDs into EntrezGene IDs
ensembl_h <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl")
hgnc_h <- getBM(filters = "hgnc_id",
attributes = c("hgnc_id", "entrezgene_id"),
values = rna_results$hgnc_id,
mart = ensembl_h)
hgnc_duplicated <- hgnc_h[duplicated(hgnc_h$hgnc_id),]
hgnc_h <- hgnc_h[!duplicated(hgnc_h$hgnc_id),]
rna_results <- merge(rna_results, hgnc_h, by.x = "hgnc_id", by.y = "hgnc_id")
# Create an ordered list of the rna_results
rna_list <- rna_results[order(rna_results$log2FoldChange, decreasing = TRUE),]
rna_list <- rna_list[!is.na(rna_list$entrezgene_id),c("entrezgene_id", "log2FoldChange")]
# Distill rna_results list into simplified gene_list
gene_list <- rna_list$log2FoldChange
names(gene_list) <- rna_list$entrezgene_id
# Create GO enrichment analysis (over representation)
gor <- enrichGO(gene = names(gene_list),
OrgDb = org.Hs.eg.db,
ont = "ALL",
pvalueCutoff = 0.05,
readable = TRUE)
# Save the GO enrichment analysis
gor <- as.data.frame(gor)
View(gor)
# Create KEGG pathway gene enrichment analysis and make the file readable
# options(clusterProfiler.download.method = "wininet") #If KEGG isn't receiving data from web run this command
keggr <- enrichKEGG(gene = names(gene_list),
organism = "hsa",
keyType = "ncbi-geneid",
pvalueCutoff = 0.05)
keggr <- setReadable(keggr, OrgDb = org.Hs.eg.db, keyType="ENTREZID")
write.csv(as.data.frame(keggr), "condition_3_P_vs_2_D_kegg.csv")
write.csv(as.data.frame(keggr), "condition_3_P_vs_2_D_gor.csv")
# Get the list of significant KEGG pathways
pathway_list <- keggr$ID[keggr$qvalue < 0.05]
# Make KEGG pathways using the gene_list expression values from significant pathways
for (pathway in pathway_list) {
pathview(gene.data = gene_list, pathway.id = pathway, species = "hsa")
}
pathway_list
nonquot("hsa00564" "hsa00561" "hsa04216" "hsa01230" "hsa04814" "hsa04110"
[7] "hsa00062" "hsa04512")
pathway_list
nonquot(pathway_list)
noquote(pathway_list)
# Make KEGG pathways using the gene_list expression values from significant pathways
for (pathway in pathway_list) {
pathview(gene.data = gene_list, pathway.id = pathway, species = "hsa")
}
pathview(gene.data = gene_list, pathway.id = "hsa04814", species = "hsa")
pathview(gene.data = gene_list, pathway.id = "hsa04110 ", species = "hsa")
# Load dataset
rna_results <- read.csv("condition_2_D_vs_1_E.csv", header=TRUE, row.names=1)
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = rna_results$Row.names,
mart = ensembl_m)
# Merge gen names to gen ID
rna_results <- merge(rna_results, hgnc_m, by.x = "Row.names", by.y = "ensembl_gene_id")
# Drop all empty rows and anything not significant
# Drop all the wierd stuffs like N/A or blanks
rna_results <- rna_results[rna_results$pvalue < 0.05,]
rna_results <- rna_results[!apply(rna_results == "", 1, any), ,]
rna_results <- rna_results[!is.na(rna_results$pvalue),]
rna_results <- rna_results[!is.na(rna_results$hgnc_id),]
# Convert HGNC IDs into EntrezGene IDs
ensembl_h <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl")
hgnc_h <- getBM(filters = "hgnc_id",
attributes = c("hgnc_id", "entrezgene_id"),
values = rna_results$hgnc_id,
mart = ensembl_h)
hgnc_duplicated <- hgnc_h[duplicated(hgnc_h$hgnc_id),]
hgnc_h <- hgnc_h[!duplicated(hgnc_h$hgnc_id),]
rna_results <- merge(rna_results, hgnc_h, by.x = "hgnc_id", by.y = "hgnc_id")
# Create an ordered list of the rna_results
rna_list <- rna_results[order(rna_results$log2FoldChange, decreasing = TRUE),]
rna_list <- rna_list[!is.na(rna_list$entrezgene_id),c("entrezgene_id", "log2FoldChange")]
# Distill rna_results list into simplified gene_list
gene_list <- rna_list$log2FoldChange
names(gene_list) <- rna_list$entrezgene_id
# Create GO enrichment analysis (over representation)
gor <- enrichGO(gene = names(gene_list),
OrgDb = org.Hs.eg.db,
ont = "ALL",
pvalueCutoff = 0.05,
readable = TRUE)
# Create KEGG pathway gene enrichment analysis and make the file readable
# options(clusterProfiler.download.method = "wininet") #If KEGG isn't receiving data from web run this command
keggr <- enrichKEGG(gene = names(gene_list),
organism = "hsa",
keyType = "ncbi-geneid",
pvalueCutoff = 0.05)
keggr <- setReadable(keggr, OrgDb = org.Hs.eg.db, keyType="ENTREZID")
write.csv(as.data.frame(keggr), "condition_2_D_vs_1_E_KEGG.csv")
rna_results <- read.csv("condition_3_P_vs_2_D.csv", header=TRUE, row.names=1)
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = rna_results$Row.names,
mart = ensembl_m)
rna_results <- merge(rna_results, hgnc_m, by.x = "Row.names", by.y = "ensembl_gene_id")
# Drop all empty rows and anything not significant
rna_results <- rna_results[rna_results$pvalue < 0.05,]
rna_results <- rna_results[!apply(rna_results == "", 1, any), ,]
rna_results <- rna_results[!is.na(rna_results$pvalue),]
rna_results <- rna_results[!is.na(rna_results$hgnc_id),]
# Convert HGNC IDs into EntrezGene IDs
ensembl_h <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl")
hgnc_h <- getBM(filters = "hgnc_id",
attributes = c("hgnc_id", "entrezgene_id"),
values = rna_results$hgnc_id,
mart = ensembl_h)
hgnc_duplicated <- hgnc_h[duplicated(hgnc_h$hgnc_id),]
hgnc_h <- hgnc_h[!duplicated(hgnc_h$hgnc_id),]
rna_results <- merge(rna_results, hgnc_h, by.x = "hgnc_id", by.y = "hgnc_id")
# Create an ordered list of the rna_results
rna_list <- rna_results[order(rna_results$log2FoldChange, decreasing = TRUE),]
rna_list <- rna_list[!is.na(rna_list$entrezgene_id),c("entrezgene_id", "log2FoldChange")]
# Distill rna_results list into simplified gene_list
gene_list <- rna_list$log2FoldChange
names(gene_list) <- rna_list$entrezgene_id
# Create GO enrichment analysis (over representation)
gor <- enrichGO(gene = names(gene_list),
OrgDb = org.Hs.eg.db,
ont = "ALL",
pvalueCutoff = 0.05,
readable = TRUE)
rna_results <- read.csv("condition_3_P_vs_2_D.csv", header=TRUE, row.names=1)
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = rna_results$Row.names,
mart = ensembl_m)
rna_results <- merge(rna_results, hgnc_m, by.x = "Row.names", by.y = "ensembl_gene_id")
# Drop all empty rows and anything not significant
rna_results <- rna_results[rna_results$pvalue < 0.05,]
rna_results <- rna_results[!apply(rna_results == "", 1, any), ,]
rna_results <- rna_results[!is.na(rna_results$pvalue),]
rna_results <- rna_results[!is.na(rna_results$hgnc_id),]
# Convert HGNC IDs into EntrezGene IDs
ensembl_h <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl")
hgnc_h <- getBM(filters = "hgnc_id",
attributes = c("hgnc_id", "entrezgene_id"),
values = rna_results$hgnc_id,
mart = ensembl_h)
hgnc_duplicated <- hgnc_h[duplicated(hgnc_h$hgnc_id),]
hgnc_h <- hgnc_h[!duplicated(hgnc_h$hgnc_id),]
rna_results <- merge(rna_results, hgnc_h, by.x = "hgnc_id", by.y = "hgnc_id")
# Create an ordered list of the rna_results
rna_list <- rna_results[order(rna_results$log2FoldChange, decreasing = TRUE),]
rna_list <- rna_list[!is.na(rna_list$entrezgene_id),c("entrezgene_id", "log2FoldChange")]
# Distill rna_results list into simplified gene_list
gene_list <- rna_list$log2FoldChange
names(gene_list) <- rna_list$entrezgene_id
# Create GO enrichment analysis (over representation)
gor <- enrichGO(gene = names(gene_list),
OrgDb = org.Hs.eg.db,
ont = "ALL",
pvalueCutoff = 0.05,
readable = TRUE)
write.csv(as.data.frame(keggr), "condition_3_P_vs_2_D_geneontology.csv")
write.csv(as.data.frame(gor), "condition_3_P_vs_2_D_geneontology.csv")
F1 <- read.csv("condition_2_D_vs_1_E_geneontology.csv", header=TRUE, row.names=1)
F2 <- read.csv("condition_3_P_vs_2_D_geneontology.csv", header=TRUE, row.names=1)
gc()
gc()
F1 <- read.csv("condition_2_D_vs_1_E_geneontology.csv", header=TRUE, row.names=1)
F2 <- read.csv("condition_3_P_vs_2_D_geneontology.csv", header=TRUE, row.names=1)
View(F1)
F1$ID
F1 <- F1[F1$ID %in% F2$ID,]
F1 <- read.csv("condition_2_D_vs_1_E_geneontology.csv", header=TRUE, row.names=1)
F2 <- read.csv("condition_3_P_vs_2_D_geneontology.csv", header=TRUE, row.names=1)
F1_filtered <- F1[F1$ID %in% F2$ID,]
View(F1_filtered)
F2_filtered <- F2[F2$ID %in% F1$ID,]
F1$phase <- "1"
F2$phase <- "2"
Merge1 <- rbind(F1_filtered, F2_filtered)
View(Merge1)
View(F1)
F1 <- read.csv("condition_2_D_vs_1_E_geneontology.csv", header=TRUE, row.names=1)
F2 <- read.csv("condition_3_P_vs_2_D_geneontology.csv", header=TRUE, row.names=1)
F1_filtered <- F1[F1$ID %in% F2$ID,]
F1_filtered$phase <- "1"
F2_filtered <- F2[F2$ID %in% F1$ID,]
F2_filtered$phase <- "2"
Merge1 <- rbind(F1_filtered, F2_filtered)
# Load dataset
rna_results <- read.csv("condition_2_D_vs_1_E.csv", header=TRUE, row.names=1)
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = rna_results$Row.names,
mart = ensembl_m)
# Merge gen names to gen ID
rna_results <- merge(rna_results, hgnc_m, by.x = "Row.names", by.y = "ensembl_gene_id")
# Drop all empty rows and anything not significant
# Drop all the wierd stuffs like N/A or blanks
rna_results <- rna_results[rna_results$pvalue < 0.05,]
rna_results <- rna_results[!apply(rna_results == "", 1, any), ,]
rna_results <- rna_results[!is.na(rna_results$pvalue),]
rna_results <- rna_results[!is.na(rna_results$hgnc_id),]
View(rna_results)
write.csv(rna_results, "condition_2_D_vs_1_E_gen.csv")
rna_results <- read.csv("condition_3_P_vs_2_D.csv", header=TRUE, row.names=1)
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = rna_results$Row.names,
mart = ensembl_m)
rna_results <- merge(rna_results, hgnc_m, by.x = "Row.names", by.y = "ensembl_gene_id")
# Drop all empty rows and anything not significant
rna_results <- rna_results[rna_results$pvalue < 0.05,]
rna_results <- rna_results[!apply(rna_results == "", 1, any), ,]
rna_results <- rna_results[!is.na(rna_results$pvalue),]
rna_results <- rna_results[!is.na(rna_results$hgnc_id),]
write.csv(rna_results, "condition_3_P_vs_2_D.csv")
write.csv(rna_results, "condition_3_P_vs_2_D_gen.csv")
F1 <- read.csv("condition_2_D_vs_1_E_gen.csv", header=TRUE, row.names=1)
F2 <- read.csv("condition_3_P_vs_2_D_gen.csv", header=TRUE, row.names=1)
F1_filtered <- F1[F1$hgnc_id%in% F2$hgnc_id,]
F1_filtered$phase <- "1"
F2_filtered <- F2[F2$hgnc_id %in% F1$hgnc_id,]
F2_filtered$phase <- "2"
Merge1 <- rbind(F1_filtered, F2_filtered)
View(Merge1)
F1_filtered <- F1_filtered[order(hgnc_id),]
F2_filtered[order(hgnc_id),]
mtcars[order(mpg),]
library(mosaic)
library(dplyr)
library(car)
library(mosaic)
mtcars[order(mpg),]
library(mtcars)
library(dplyr)
mtcars
mtcars[order(mpg),]
View(mtcars)
mtcars[order(vs),]
class(F2)
class(F2_filtered)
F2[order(stat) , ]
F2$stat
mtcars[order(vs),]
mtcars[order(gear),]
install.packages("mosaic")
library(mosaic)
hsb2 <- read.table("https://stats.idre.ucla.edu/wp-content/uploads/2016/02/hsb2-1.csv", header=T, sep=",")
View(hsb2)
attach(hsb2)
sort(read)
sort1.hsb2 <- hsb2[order(read) , ]
hsb2[order(read) , ]
mtcars[order(gear),]
class(hsb2)
attach(mtcars)
attach(F1)
View(F1)
F1[order(GENEID) , ]
F1_filtered[order(hgnc_id),]
F2_filtered[order(hgnc_id),]
F1 <- read.csv("condition_2_D_vs_1_E_gen.csv", header=TRUE, row.names=1)
F2 <- read.csv("condition_3_P_vs_2_D_gen.csv", header=TRUE, row.names=1)
F1_filtered <- F1[F1$hgnc_id%in% F2$hgnc_id,]
F1_filtered$phase <- "1"
F1_filtered <- F1_filtered[order(hgnc_id),]
F2_filtered <- F2[F2$hgnc_id %in% F1$hgnc_id,]
F2_filtered$phase <- "2"
F2_filtered <- F2_filtered[order(hgnc_id),]
F1 <- read.csv("condition_2_D_vs_1_E_gen.csv", header=TRUE, row.names=1)
F2 <- read.csv("condition_3_P_vs_2_D_gen.csv", header=TRUE, row.names=1)
F1_filtered <- F1[F1$hgnc_id%in% F2$hgnc_id,]
F1_filtered$phase <- "1"
F1_filtered <- F1_filtered[order(hgnc_id),]
F2_filtered <- F2[F2$hgnc_id %in% F1$hgnc_id,]
F2_filtered$phase <- "2"
F2_filtered <- F2_filtered[order(hgnc_id),]
F2 <- read.csv("condition_3_P_vs_2_D_gen.csv", header=TRUE, row.names=1)
F2_filtered <- F2[F2$hgnc_id %in% F1$hgnc_id,]
F2_filtered <- F2[F2$hgnc_id %in% F1$hgnc_id,]
F2_filtered$phase <- "2"
F2_filtered <- F2_filtered[order(hgnc_id),]
F1 <- read.csv("condition_2_D_vs_1_E_gen.csv", header=TRUE, row.names=1)
F2 <- read.csv("condition_3_P_vs_2_D_gen.csv", header=TRUE, row.names=1)
F1_filtered <- F1[F1$hgnc_id%in% F2$hgnc_id,]
F1_filtered$phase <- "1"
F1_filtered <- F1_filtered[order(hgnc_id),]
F1_filtered <- F1[F1$hgnc_id%in% F2$hgnc_id,]
F1_filtered$phase <- "1"
View(F1_filtered)
F1_filtered <- F1_filtered[order(hgnc_id),]
order(hgnc_id)
hgnc_id
hgnc_id
hgnc_id
F1_filtered <- F1[F1$hgnc_id%in% F2$hgnc_id,]
F1 <- read.csv("condition_2_D_vs_1_E_gen.csv", header=TRUE, row.names=1)
F2 <- read.csv("condition_3_P_vs_2_D_gen.csv", header=TRUE, row.names=1)
F1_filtered <- F1[F1$hgnc_id%in% F2$hgnc_id,]
F1_filtered$phase <- "1"
F1_filtered <- F1_filtered[order(F1_filtered$hgnc_id),]
View(F1_filtered)
F2_filtered <- F2[F2$hgnc_id %in% F1$hgnc_id,]
F2_filtered$phase <- "2"
F2_filtered <- F2_filtered[order(F2_filtered$hgnc_id),]
View(F2_filtered)
Merge1 <- rbind(F1_filtered, F2_filtered)
Merge1 <- merge(F1_filtered, F2_filtered, by = "hgnc_id")
View(Merge1)
Merge1 <- merge(F1_filtered, F2_filtered, by = "hgnc_id") %>%
mutate(diff_log2 = log2FoldChange.x - log2FoldChange.y)
Merge1 <- merge(F1_filtered, F2_filtered, by = "hgnc_id") %>%
mutate(diff_log2 = log2FoldChange.x - log2FoldChange.y) %>%
arrange(diff_log2)
library(ggplot2)
library(hrbrthemes)
install.packages("hrbrthemes")
ggplot(Merge1) +
geom_segment( aes(x = GENEID.x, xend = GENEID.x, y = log2FoldChange.x, yend = log2FoldChange.y), color="grey") +
geom_point( aes(x = GENEID.x, y = log2FoldChange.x), color=rgb(0.2,0.7,0.1,0.5), size=3 ) +
geom_point( aes(x = GENEID.x, y = log2FoldChange.y), color=rgb(0.7,0.2,0.1,0.5), size=3 ) +
coord_flip()+
theme_ipsum() +
theme(
legend.position = "none",
) +
xlab("") +
ylab("Value of Y")
library(hrbrthemes)
library(dplyr)
library(ggplot2)
library(hrbrthemes)
ggplot(Merge1) +
geom_segment( aes(x = GENEID.x, xend = GENEID.x, y = log2FoldChange.x, yend = log2FoldChange.y), color="grey") +
geom_point( aes(x = GENEID.x, y = log2FoldChange.x), color=rgb(0.2,0.7,0.1,0.5), size=3 ) +
geom_point( aes(x = GENEID.x, y = log2FoldChange.y), color=rgb(0.7,0.2,0.1,0.5), size=3 ) +
coord_flip()+
theme_ipsum() +
theme(
legend.position = "none",
) +
xlab("") +
ylab("Value of Y")
ggplot(Merge1) +
geom_segment( aes(x = GENEID.x, xend = GENEID.x, y = log2FoldChange.x, yend = log2FoldChange.y),
color="grey")
ggplot(Merge1) +
geom_segment( aes(x = GENEID.x, xend = GENEID.x, y = log2FoldChange.x, yend = log2FoldChange.y),
color="grey")
qplot(Sepal.Length, Sepal.Width, data = iris)
plot(data = mtcars, x= )
View(mtcars)
plot(data = mtcars, x = cyl, y = hp)
plot(mtcars, x = cyl, y = hp)
plot(x = mtcars$cyl, y = mtcars$hp)
dev.off()
plot(x = mtcars$cyl, y = mtcars$hp)
plot(x = mtcars$cyl, y = mtcars$hp)
plot(x = mtcars$cyl, y = mtcars$hp)
dev.off()
plot(x = mtcars$cyl, y = mtcars$hp)
ggplot(Merge1) +
geom_segment( aes(x = GENEID.x, xend = GENEID.x, y = log2FoldChange.x, yend = log2FoldChange.y),
color="grey")
ggplot(Merge1) +
geom_segment( aes(x = GENEID.x, xend = GENEID.x, y = log2FoldChange.x, yend = log2FoldChange.y))
ggplot(Merge1) +
geom_segment( aes(x = GENEID.x, xend = GENEID.x, y = log2FoldChange.x, yend = log2FoldChange.y)) +
geom_point( aes(x = GENEID.x, y = log2FoldChange.x), color=rgb(0.2,0.7,0.1,0.5), size=3 ) +
geom_point( aes(x = GENEID.x, y = log2FoldChange.y), color=rgb(0.7,0.2,0.1,0.5), size=3 ) +
coord_flip()+
theme_ipsum() +
theme(
legend.position = "none",
) +
xlab("") +
ylab("Value of Y")
Merge1 <- merge(F1_filtered, F2_filtered, by = "hgnc_id") %>%
mutate(diff_log2 = log2FoldChange.x - log2FoldChange.y) %>%
arrange(diff_log2)
View(Merge1)
View(Merge1)
Merge1 <- merge(F1_filtered, F2_filtered, by = "hgnc_id") %>%
mutate(diff_log2 = abs(log2FoldChange.x - log2FoldChange.y)) %>%
arrange(diff_log2) %>%
filter(diff_log2 > 2)
ggplot(Merge1) +
geom_segment( aes(x = GENEID.x, xend = GENEID.x, y = log2FoldChange.x, yend = log2FoldChange.y)) +
geom_point( aes(x = GENEID.x, y = log2FoldChange.x), color=rgb(0.2,0.7,0.1,0.5), size=3 ) +
geom_point( aes(x = GENEID.x, y = log2FoldChange.y), color=rgb(0.7,0.2,0.1,0.5), size=3 ) +
coord_flip()+
theme_ipsum() +
theme(
legend.position = "none",
) +
xlab("") +
ylab("Value of Y")
Merge1 <- merge(F1_filtered, F2_filtered, by = "hgnc_id") %>%
mutate(diff_log2 = abs(log2FoldChange.x - log2FoldChange.y)) %>%
arrange(diff_log2) %>%
filter(diff_log2 > 4)
ggplot(Merge1) +
geom_segment( aes(x = GENEID.x, xend = GENEID.x, y = log2FoldChange.x, yend = log2FoldChange.y)) +
geom_point( aes(x = GENEID.x, y = log2FoldChange.x), color=rgb(0.2,0.7,0.1,0.5), size=3 ) +
geom_point( aes(x = GENEID.x, y = log2FoldChange.y), color=rgb(0.7,0.2,0.1,0.5), size=3 ) +
coord_flip()+
theme_ipsum() +
theme(
legend.position = "none",
) +
xlab("") +
ylab("Value of Y")
Merge1 <- merge(F1_filtered, F2_filtered, by = "hgnc_id") %>%
mutate(diff_log2 = abs(log2FoldChange.x - log2FoldChange.y)) %>%
arrange(diff_log2) %>%
filter(diff_log2 > 7)
ggplot(Merge1) +
geom_segment( aes(x = GENEID.x, xend = GENEID.x, y = log2FoldChange.x, yend = log2FoldChange.y)) +
geom_point( aes(x = GENEID.x, y = log2FoldChange.x), color=rgb(0.2,0.7,0.1,0.5), size=3 ) +
geom_point( aes(x = GENEID.x, y = log2FoldChange.y), color=rgb(0.7,0.2,0.1,0.5), size=3 ) +
coord_flip()+
theme_ipsum() +
theme(
legend.position = "none",
) +
xlab("") +
ylab("Value of Y")
Merge1 <- merge(F1_filtered, F2_filtered, by = "hgnc_id") %>%
mutate(diff_log2 = abs(log2FoldChange.x - log2FoldChange.y)) %>%
arrange(diff_log2) %>%
filter(diff_log2 > 6)
ggplot(Merge1) +
geom_segment( aes(x = GENEID.x, xend = GENEID.x, y = log2FoldChange.x, yend = log2FoldChange.y)) +
geom_point( aes(x = GENEID.x, y = log2FoldChange.x), color=rgb(0.2,0.7,0.1,0.5), size=3 ) +
geom_point( aes(x = GENEID.x, y = log2FoldChange.y), color=rgb(0.7,0.2,0.1,0.5), size=3 ) +
coord_flip()+
theme_ipsum() +
theme(
legend.position = "none",
) +
xlab("") +
ylab("Value of Y")
ggplot(Merge1) +
geom_segment( aes(x = GENEID.x, xend = GENEID.x, y = log2FoldChange.x, yend = log2FoldChange.y)) +
geom_point( aes(x = GENEID.x, y = log2FoldChange.x), color=rgb(0.2,0.7,0.1,0.5), size=3 ) +
geom_point( aes(x = GENEID.x, y = log2FoldChange.y), color=rgb(0.7,0.2,0.1,0.5), size=3 ) +
coord_flip()+
theme_ipsum() +
theme(
legend.position = "none",
) +
xlab("Gens") +
ylab("Difference in log2 counts")
