# MA plot
plotMA(res0.05_ED)
d <- plotCounts(dds, gene=which.min(res0.05_ED$padj),
intgroup="condition",
returnData=TRUE)
ggplot(d, aes(x=condition, y=count)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
scale_y_log10(breaks=c(25,100,400))
# Chunk 8
## prepare DEG
countData <- df_master[, c(4,5,6,7)]
countData <- countData[as.logical(rowSums(countData != 0)), ]
countData <- as.data.frame(countData)
# Constructing levels
colData <- t(data.frame(
D1 = "Diapause",
D2 = "Diapause",
P1 = "Pregnancy",
P3 = "Pregnancy"
))
colnames(colData) <- c("condition")
## DEG Analysis
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ condition)
## Setting level
dds$condition <- factor(dds$condition, levels = c("Diapause","Pregnancy"))
dds <- DESeq(dds)
# Remove low frequency count
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
# Explore Results ----------------
res <- results(dds)
res0.05_DP <- results(dds, alpha = 0.05)
# Chunk 9
# MA plot
plotMA(res0.05_DP)
d <- plotCounts(dds, gene=which.min(res0.05_DP$padj),
intgroup="condition",
returnData=TRUE)
ggplot(d, aes(x=condition, y=count)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
scale_y_log10(breaks=c(25,100,400))
# Chunk 10
## prepare DEG
countData <- df_master[, c(1,2,3,6,7)]
countData <- countData[as.logical(rowSums(countData != 0)), ]
countData <- as.data.frame(countData)
# Constructing levels
colData <- t(data.frame(
E1 = "Estrus",
E2 = "Estrus",
E3 = "Estrus",
P1 = "Pregnancy",
P3 = "Pregnancy"
))
colnames(colData) <- c("condition")
## DEG Analysis
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ condition)
## Setting level
dds$condition <- factor(dds$condition, levels = c("Estrus","Pregnancy"))
dds <- DESeq(dds)
# Remove low frequency count
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
# Explore Results ----------------
res <- results(dds)
res0.05_EP <- results(dds, alpha = 0.05)
# Chunk 11
# MA plot
plotMA(res0.05_EP)
d <- plotCounts(dds, gene=which.min(res0.05_EP$padj),
intgroup="condition",
returnData=TRUE)
ggplot(d, aes(x=condition, y=count)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
scale_y_log10(breaks=c(25,100,400))
datatable(res0.05_EP, caption = "Deseq2 reuslt")
# Chunk 12
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
res0.05_ED$RowNamesColumn <- row.names(res0.05_ED)
res0.05_ED <- as.data.frame(res0.05_ED)
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = row.names(res0.05_ED),
mart = ensembl_m)
rna_results <- merge(res0.05_ED, hgnc_m,
by.x = "RowNamesColumn",
by.y = "ensembl_gene_id")
ensembl_h <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl")
hgnc_h <- getBM(filters = "hgnc_id",
attributes = c("hgnc_id", "entrezgene_id"),
values = rna_results$hgnc_id,
mart = ensembl_h)
hgnc_duplicated <- hgnc_h[duplicated(hgnc_h$hgnc_id),]
hgnc_h <- hgnc_h[!duplicated(hgnc_h$hgnc_id),]
rna_results <- merge(rna_results, hgnc_h, by.x = "hgnc_id", by.y = "hgnc_id")
# Create an ordered list of the rna_results
rna_list <- rna_results[order(rna_results$log2FoldChange, decreasing = TRUE),]
rna_list <- rna_list[!is.na(rna_list$entrezgene_id),c("entrezgene_id", "log2FoldChange")]
# Distill rna_results list into simplified gene_list
gene_list <- rna_list$log2FoldChange
names(gene_list) <- rna_list$entrezgene_id
keggr <- enrichKEGG(gene = names(gene_list),
organism = "hsa",
keyType = "ncbi-geneid",
pvalueCutoff = 0.05)
keggr <- setReadable(keggr, OrgDb = org.Hs.eg.db, keyType="ENTREZID")
pathway_list <- keggr$ID[keggr$qvalue < 0.05]
# pathview(gene.data  = gene_list,
#          pathway.id = pathway_list,
#          species    = "hsa",
#          plot.mode  = "none")
datatable(res0.05_EP, caption = "Deseq2 reuslt")
as.data.frame(res0.05_EP)
datatable(as.data.frame(res0.05_EP), caption = "Deseq2 reuslt")
metadata(res0.05_EP)$alpha
# Explore Results ----------------
res <- results(dds)
res0.05_EP <- results(dds, alpha = 0.05)
datatable(as.data.frame(res0.05_EP), caption = "Deseq2 reuslt")
## prepare DEG
countData <- df_master[, c(1,2,3,6,7)]
countData <- countData[as.logical(rowSums(countData != 0)), ]
countData <- as.data.frame(countData)
# Constructing levels
colData <- t(data.frame(
E1 = "Estrus",
E2 = "Estrus",
E3 = "Estrus",
P1 = "Pregnancy",
P3 = "Pregnancy"
))
colnames(colData) <- c("condition")
## DEG Analysis
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ condition)
dds$condition <- factor(dds$condition, levels = c("Estrus","Pregnancy"))
dds <- DESeq(dds)
# Remove low frequency count
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
# Explore Results ----------------
res <- results(dds)
res0.05_EP <- results(dds, alpha = 0.05)
datatable(as.data.frame(res0.05_EP), caption = "Deseq2 reuslt")
res0.05_EP <- results(dds, alpha = 0.005)
datatable(as.data.frame(res0.05_EP), caption = "Deseq2 reuslt")
res0.05_EP <- results(dds, alpha = 0.0005)
res0.05_EP <- results(dds, alpha = 0.0005)
datatable(as.data.frame(res0.05_EP), caption = "Deseq2 reuslt")
type(res0.05_EP)
plotMA(as.data.frame(res0.05_EP))
summary(res0.05_EP)
res0.05_EP <- results(dds, alpha = 0.05)
summary(res0.05_EP)
res0.05_EP <- results(dds, alpha = 0.005)
summary(res0.05_EP)
res0.05_EP <- results(dds, alpha = 0.05)
# MA plot
plotMA(res0.05_EP)
res0.05_EP <- results(dds, alpha = 0.005)
# MA plot
plotMA(res0.05_EP)
View(as.data.frame(res0.05_EP))
res0.05_EP <- as.data.frame(res0.05_EP) %>% mutate(
filter(pradj < 0.05)
)
res0.05_EP <- as.data.frame(res0.05_EP) %>% mutate(
filter(padj < 0.05)
)
res0.05_EP <- as.data.frame(res0.05_EP) %>%
filter(padj < 0.05)
datatable(res0.05_EP, caption = "Deseq2 reuslt")
knitr::opts_chunk$set(echo = TRUE)
# install.packages("tidyverse")
# install.packages("mosaic")
# install.packages("pander")
# install.packages("ggplot2")
# install.packages("ggfortify")
# install.packages("DT")
# if (!requireNamespace("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
#
# BiocManager::install("clusterProfiler")
# BiocManager::install("org.Hs.eg.db")
# BiocManager::install("AnnotationDbi")
# BiocManager::install("DESeq2")
# BiocManager::install("biomaRt")
# BiocManager::install("pathview")
# BiocManager::install("STRINGdb")
options(repos = BiocManager::repositories())
library(tidyverse)
library(mosaic)
library(pander)
library(ggplot2)
library(ggfortify)
library(clusterProfiler)
library(org.Hs.eg.db)
library(AnnotationDbi)
library(DT)
library(DESeq2)
library(ggplot2)
library(biomaRt)
library(pathview)
library(STRINGdb)
library(png)
library(grid)
E1 <- read.csv('13E-1_S26_L007.csv', header = TRUE)  %>%
mutate(phase = "E1")
E2 <- read.csv('13E-2_S29_L007.csv', header = TRUE)  %>%
mutate(phase = "E2")
E3 <- read.csv('13E-3_S32_L007.csv', header = TRUE)  %>%
mutate(phase = "E3")
D1 <- read.csv('13D-1_S27_L007.csv', header = TRUE) %>%
mutate(phase = "D1")
D2 <- read.csv('13D-2_S30_L007.csv', header = TRUE) %>%
mutate(phase = "D2")
D3 <- read.csv('13D-3_S33_L007.csv', header = TRUE) %>%
mutate(phase = "D3")
P1 <- read.csv('13P-1_S28_L007.csv', header = TRUE)  %>%
mutate(phase = "P1")
P2 <- read.csv('13P-2_S31_L007.csv', header = TRUE)  %>%
mutate(phase = "P2")
P3 <- read.csv('13P-3_S34_L007.csv', header = TRUE)  %>%
mutate(phase = "P3")
preview <- rbind(E1[1:10, ], E2[1:10, ], E3[1:10, ],
D1[1:10, ], D2[1:10, ], D3[1:10, ],
P1[1:10, ], P2[1:10, ], P3[1:10, ])[,-2]
datatable(preview, caption = "preview of raw data")
# List of dataframes and their names
df_list <- list(E1 = E1, E2 = E2, E3 = E3, D1 = D1, D2 = D2, D3 = D3, P1 = P1, P2 = P2, P3 = P3)
# Subset and rename
df_modified_list <- lapply(names(df_list), function(df_name){
df <- df_list[[df_name]]
# Subset columns
df <- df[, c("gene_id", "TPM")]
# Rename the TPM column
colnames(df)[2] <- paste0(df_name, "_TPM")
return(df)
})
# Now bind them all together. Since they all have "gene_id", use it as a reference to ensure order.
final_df <- df_modified_list[[1]]  # Start with the first dataframe
for(i in 2:length(df_modified_list)) {
final_df <- cbind(final_df, df_modified_list[[i]][, 2, drop = FALSE])  # Bind by the TPM column only
}
library(tidyverse)
# Convert the data into a long format
long_df <- final_df %>%
gather(key = "period_sample", value = "TPM", -gene_id) %>%
separate(period_sample, into = c("period", "sample"), sep = 1)  # Separate E1 into E and 1, etc.
filtered_df <- long_df %>%
group_by(gene_id) %>%
filter(sum(TPM) > 0) %>%
ungroup()
# Subset to keep only the first 10,000 rows
filtered_df <- filtered_df[1:1000, ]
p <- ggplot(filtered_df, aes(x = period, y = TPM, group = gene_id, color = gene_id)) +
geom_line() +
facet_wrap(~ sample, scales = "free_y") +  # separate plot for each sample
theme_minimal() +
labs(title = "TPM Changes Over Periods (Excluding Zero TPMs)", x = "Period", y = "TPM Value")
print(p)
# Plot without legend
ggplot(filtered_df, aes(x = period, y = TPM, group = gene_id, color = gene_id)) +
geom_line() +
facet_wrap(~ sample, scales = "free_y") +  # separate plot for each sample
theme_minimal() +
theme(legend.position = "none") +  # this line hides the legend
labs(title = "TPM Changes Over Periods (Subset of First 10,000)", x = "Period", y = "TPM Value")
View(filtered_df)
# Subset to keep only the first 10,000 rows
filtered_df <- filtered_df[1:10000, ]
# Plot without legend
ggplot(filtered_df, aes(x = period, y = TPM, group = gene_id)) +
geom_line() +
facet_wrap(~ sample, scales = "free_y") +  # separate plot for each sample
theme_minimal() +
theme(legend.position = "none") +  # this line hides the legend
labs(title = "TPM Changes Over Periods (Subset of First 10,000)", x = "Period", y = "TPM Value")
filtered_df <- long_df %>%
group_by(gene_id) %>%
filter(sum(TPM) > 0) %>%
ungroup()
# Plot without legend
ggplot(filtered_df, aes(x = period, y = TPM, group = gene_id)) +
geom_line() +
facet_wrap(~ sample, scales = "free_y") +  # separate plot for each sample
theme_minimal() +
theme(legend.position = "none") +  # this line hides the legend
labs(title = "TPM Changes Over Periods (Subset of First 10,000)", x = "Period", y = "TPM Value")
# Convert the data into a long format
long_df <- final_df %>%
gather(key = "period_sample", value = "TPM", -gene_id) %>%
separate(period_sample, into = c("period", "sample"), sep = 1)  # Separate E1 into E and 1, etc.
filtered_df <- long_df %>%
group_by(gene_id) %>%
filter(sum(TPM) > 0) %>%
ungroup()
# Adjust factor levels for the period
filtered_df$period <- factor(filtered_df$period, levels = c("E", "D", "P"))
p <- ggplot(filtered_df, aes(x = period, y = TPM, group = gene_id, color = gene_id, text = gene_id)) +
geom_line() +
facet_wrap(~ sample, scales = "free_y") +  # separate plot for each sample
theme_minimal() +
theme(legend.position = "none") +  # hide the legend
labs(title = "TPM Changes Over Periods (Subset of First 10,000)", x = "Period", y = "TPM Value")
# Convert to interactive plot
interactive_plot <- ggplotly(p, tooltip = "text")
install.packages("ggplotly")
library(plotly)
install.packages("plotly")
library(plotly)
# Adjust factor levels for the period
filtered_df$period <- factor(filtered_df$period, levels = c("E", "D", "P"))
p <- ggplot(filtered_df, aes(x = period, y = TPM, group = gene_id, color = gene_id, text = gene_id)) +
geom_line() +
facet_wrap(~ sample, scales = "free_y") +  # separate plot for each sample
theme_minimal() +
theme(legend.position = "none") +  # hide the legend
labs(title = "TPM Changes Over Periods (Subset of First 10,000)", x = "Period", y = "TPM Value")
# Convert to interactive plot
interactive_plot <- ggplotly(p, tooltip = "text")
# Subset to keep only the first 10,000 rows
filtered_df <- filtered_df[1:1000, ]
# Adjust factor levels for the period
filtered_df$period <- factor(filtered_df$period, levels = c("E", "D", "P"))
p <- ggplot(filtered_df, aes(x = period, y = TPM, group = gene_id, color = gene_id, text = gene_id)) +
geom_line() +
facet_wrap(~ sample, scales = "free_y") +  # separate plot for each sample
theme_minimal() +
theme(legend.position = "none") +  # hide the legend
labs(title = "TPM Changes Over Periods (Subset of First 10,000)", x = "Period", y = "TPM Value")
# Convert to interactive plot
interactive_plot <- ggplotly(p, tooltip = "text")
# Display the plot
interactive_plot
# Convert the data into a long format
long_df <- final_df %>%
gather(key = "period_sample", value = "TPM", -gene_id) %>%
separate(period_sample, into = c("period", "sample"), sep = 1)  # Separate E1 into E and 1, etc.
# Convert the data into a long format
long_df <- final_df %>%
gather(key = "period_sample", value = "TPM", -gene_id) %>%
separate(period_sample, into = c("period", "sample"), sep = 1)  # Separate E1 into E and 1, etc.
filtered_df <- long_df %>%
group_by(gene_id) %>%
filter(sum(TPM) > 0) %>%
ungroup()
# Subset to keep only the first 10,000 rows
filtered_df <- filtered_df[1:1000, ]
# Convert the data into a long format
long_df <- final_df %>%
gather(key = "period_sample", value = "TPM", -gene_id) %>%
separate(period_sample, into = c("period", "sample"), sep = 1)  # Separate E1 into E and 1, etc.
# Subset to keep only the first 10,000 rows
filtered_df <- filtered_df[1:1000, ]
# Adjust factor levels for the period
filtered_df$period <- factor(filtered_df$period, levels = c("E", "D", "P"))
p <- ggplot(filtered_df, aes(x = period, y = TPM, group = gene_id, color = gene_id, text = gene_id)) +
geom_line() +
facet_wrap(~ sample, scales = "free_y") +  # separate plot for each sample
theme_minimal() +
theme(legend.position = "none") +  # hide the legend
labs(title = "TPM Changes Over Periods (Subset of First 10,000)", x = "Period", y = "TPM Value")
# Convert to interactive plot
interactive_plot <- ggplotly(p, tooltip = "text")
# Convert the data into a long format
long_df <- final_df %>%
gather(key = "period_sample", value = "TPM", -gene_id) %>%
separate(period_sample, into = c("period", "sample"), sep = 1)  # Separate E1 into E and 1, etc.
# Convert the data into a long format
long_df <- final_df %>%
gather(key = "period_sample", value = "TPM", -gene_id) %>%
separate(period_sample, into = c("period", "sample"), sep = 1)  # Separate E1 into E and 1, etc.
filtered_df <- long_df %>%
group_by(gene_id) %>%
filter(sum(TPM) > 0.5) %>%
ungroup()
# Convert the data into a long format
long_df <- final_df %>%
gather(key = "period_sample", value = "TPM", -gene_id) %>%
separate(period_sample, into = c("period", "sample"), sep = 1)  # Separate E1 into E and 1, etc.
# Convert the data into a long format
long_df <- final_df %>%
gather(key = "period_sample", value = "TPM", -gene_id) %>%
separate(period_sample, into = c("period", "sample"), sep = 1)  # Separate E1 into E and 1, etc.
filtered_df <- long_df %>%
group_by(gene_id) %>%
filter(sum(TPM) > 0.5) %>%
ungroup()
# Adjust factor levels for the period
filtered_df$period <- factor(filtered_df$period, levels = c("E", "D", "P"))
p <- ggplot(filtered_df, aes(x = period, y = TPM, group = gene_id, color = gene_id, text = gene_id)) +
geom_line() +
facet_wrap(~ sample, scales = "free_y") +  # separate plot for each sample
theme_minimal() +
theme(legend.position = "none") +  # hide the legend
labs(title = "TPM Changes Over Periods (Subset of First 10,000)", x = "Period", y = "TPM Value")
# Convert to interactive plot
interactive_plot <- ggplotly(p, tooltip = "text")
# Display the plot
interactive_plot
# Convert the data into a long format
long_df <- final_df %>%
gather(key = "period_sample", value = "TPM", -gene_id) %>%
separate(period_sample, into = c("period", "sample"), sep = 1)  # Separate E1 into E and 1, etc.
filtered_df <- long_df %>%
group_by(gene_id) %>%
filter(sum(TPM) > 1) %>%
ungroup()
filtered_df <- long_df %>%
group_by(gene_id) %>%
filter(sum(TPM) > 5) %>%
ungroup()
# Convert the data into a long format
long_df <- final_df %>%
gather(key = "period_sample", value = "TPM", -gene_id) %>%
separate(period_sample, into = c("period", "sample"), sep = 1)  # Separate E1 into E and 1, etc.
filtered_df <- long_df %>%
group_by(gene_id) %>%
filter(sum(TPM) > 10) %>%
ungroup()
filtered_df <- long_df %>%
group_by(gene_id) %>%
filter(sum(TPM) > 100) %>%
ungroup()
# Convert the data into a long format
long_df <- final_df %>%
gather(key = "period_sample", value = "TPM", -gene_id) %>%
separate(period_sample, into = c("period", "sample"), sep = 1)  # Separate E1 into E and 1, etc.
# Subset to keep only the first 10,000 rows
filtered_df <- filtered_df[1:100, ]
# Convert the data into a long format
long_df <- final_df %>%
gather(key = "period_sample", value = "TPM", -gene_id) %>%
separate(period_sample, into = c("period", "sample"), sep = 1)  # Separate E1 into E and 1, etc.
# Convert the data into a long format
long_df <- final_df %>%
gather(key = "period_sample", value = "TPM", -gene_id) %>%
separate(period_sample, into = c("period", "sample"), sep = 1)  # Separate E1 into E and 1, etc.
filtered_df <- long_df %>%
group_by(gene_id) %>%
filter(sum(TPM) > 100) %>%
ungroup()
# Convert the data into a long format
long_df <- final_df %>%
gather(key = "period_sample", value = "TPM", -gene_id) %>%
separate(period_sample, into = c("period", "sample"), sep = 1)  # Separate E1 into E and 1, etc.
filtered_df <- long_df %>%
group_by(gene_id) %>%
filter(sum(TPM) > 100) %>%
ungroup()
# Adjust factor levels for the period
filtered_df$period <- factor(filtered_df$period, levels = c("E", "D", "P"))
p <- ggplot(filtered_df, aes(x = period, y = TPM, group = gene_id, color = gene_id, text = gene_id)) +
geom_line() +
facet_wrap(~ sample, scales = "free_y") +  # separate plot for each sample
theme_minimal() +
theme(legend.position = "none") +  # hide the legend
labs(title = "TPM Changes Over Periods (Subset of First 10,000)", x = "Period", y = "TPM Value")
# Convert to interactive plot
interactive_plot <- ggplotly(p, tooltip = "text")
# Convert to interactive plot
interactive_plot <- ggplotly(p, tooltip = "text")
# Display the plot
interactive_plot
# Display the plot
interactive_plot
# Convert the data into a long format
long_df <- final_df %>%
gather(key = "period_sample", value = "TPM", -gene_id) %>%
separate(period_sample, into = c("period", "sample"), sep = 1)  # Separate E1 into E and 1, etc.
filtered_df <- long_df %>%
group_by(gene_id) %>%
filter(sum(TPM) > 1000) %>%
ungroup()
filtered_df <- long_df %>%
group_by(gene_id) %>%
filter(sum(TPM) > 1000) %>%
ungroup()
# Subset to keep only the first 10,000 rows
filtered_df <- filtered_df[1:100, ]
# Adjust factor levels for the period
filtered_df$period <- factor(filtered_df$period, levels = c("E", "D", "P"))
# Convert the data into a long format
long_df <- final_df %>%
gather(key = "period_sample", value = "TPM", -gene_id) %>%
separate(period_sample, into = c("period", "sample"), sep = 1)  # Separate E1 into E and 1, etc.
filtered_df <- long_df %>%
group_by(gene_id) %>%
filter(sum(TPM) > 1000) %>%
ungroup()
# Adjust factor levels for the period
filtered_df$period <- factor(filtered_df$period, levels = c("E", "D", "P"))
p <- ggplot(filtered_df, aes(x = period, y = TPM, group = gene_id, color = gene_id, text = gene_id)) +
geom_line() +
facet_wrap(~ sample, scales = "free_y") +  # separate plot for each sample
theme_minimal() +
theme(legend.position = "none") +  # hide the legend
labs(title = "TPM Changes Over Periods (Subset of First 10,000)", x = "Period", y = "TPM Value")
# Convert to interactive plot
interactive_plot <- ggplotly(p, tooltip = "text")
# Convert to interactive plot
interactive_plot <- ggplotly(p, tooltip = "text")
# Display the plot
interactive_plot
