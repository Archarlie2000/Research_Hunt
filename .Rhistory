variantsTrimmed <- variantsTrimmed %>% mutate(!!colname := str_sub(sequence,
500 - primer_away - i,
500 - primer_away))
}
# produce left flanking left primer
for (i in primer_left_min:primer_left_max) {
colname <- paste0("(left_flanking)_left", i)
variantsTrimmed_ghost <- variantsTrimmed_ghost %>%
mutate(!!colname := str_sub(sequence, 501, 500 + i))
}
# produce left flanking right primer
for (i in primer_min:primer_max) {
colname <- paste0("(left_flanking)_right", 500 + primer_away + i)
variantsTrimmed_ghost <- variantsTrimmed_ghost %>% mutate(!!colname := str_sub(sequence,
500 + primer_away - i,
500 + primer_away))
}
## Define the range of flanking for pivoting (right flanking)
limit_left_start <- paste("left", primer_left_max, sep = "")
limit_left_stop <- paste("left", primer_left_min, sep = "")
limit_right_start <- paste("right", 500 - primer_away - primer_max, sep = "")
limit_right_stop <- paste("right", 500 - primer_away - primer_min, sep = "")
## Define the range of flanking for pivoting (left flanking)
left_flanking_limit_left_start <- paste("(left_flanking)_left", primer_left_max, sep = "")
left_flanking_limit_left_stop <- paste("(left_flanking)_left", primer_left_min, sep = "")
left_flanking_limit_right_start <- paste("(left_flanking)_right", 500 + primer_away + primer_max, sep = "")
left_flanking_limit_right_stop <- paste("(left_flanking)_right", 500 + primer_away + primer_min, sep = "")
## Pivot the column into a long list
variantsTrimmed_temp_1 <- pivot_longer(variantsTrimmed,
cols = limit_left_start:limit_left_stop,
names_to = "Left_side",
values_to = "leftPrimers") %>%
pivot_longer(
cols = limit_right_start:limit_right_stop,
names_to = "Right_side",
values_to = "rightPrimers")
variantsTrimmed_temp_2 <- pivot_longer(variantsTrimmed_ghost,
cols = left_flanking_limit_left_start:left_flanking_limit_left_stop,
names_to = "left_flanking_Left_side",
values_to = "left_flanking_leftPrimers") %>%
pivot_longer(
cols = left_flanking_limit_right_start:left_flanking_limit_right_stop,
names_to = "left_flanking_Right_side",
values_to = "left_flanking_rightPrimers")
variantsTrimmed2 <- cbind(variantsTrimmed$snpID,
variantsTrimmed$sequence,
variantsTrimmed_temp_1,
variantsTrimmed_temp_2)
colnames(variantsTrimmed2)[1] <- "snpID"
colnames(variantsTrimmed2)[2] <- "sequence"
## combine left and flanking into a longer list since
## previous one is not split in the right way
vt_partition_1 <- cbind(variantsTrimmed_temp_1$snpID,
variantsTrimmed_temp_1$Left_side,
variantsTrimmed_temp_1$leftPrimers,
variantsTrimmed_temp_1$Right_side,
variantsTrimmed_temp_1$rightPrimers,
"right"
)
vt_partition_2 <- cbind(variantsTrimmed_temp_2$snpID,
variantsTrimmed_temp_2$left_flanking_Left_side,
variantsTrimmed_temp_2$left_flanking_leftPrimers,
variantsTrimmed_temp_2$left_flanking_Right_side,
variantsTrimmed_temp_2$left_flanking_rightPrimers,
"left")
variantsTrimmed2 <- rbind(vt_partition_1,vt_partition_2) %>% data.frame()
colnames(variantsTrimmed2) <- c("snp",
"forward_position",
"forward_primer",
"reversed_position",
"reversed_primer",
"flanking_direction")
## Fix the syntax for naming
variantsTrimmed2$forward_position <-  gsub("[(left_flanking)_]", "",
as.character(variantsTrimmed2$forward_position))
variantsTrimmed2$reversed_position <-  gsub("[(left_flanking)_right]", "",
as.character(variantsTrimmed2$reversed_position))
### Get mismatches for left primers depend on the flanking direaction
for (i in 1:nrow(variantsTrimmed2)){
if (variantsTrimmed2$flanking_direction[i] == "right")
{variantsTrimmed2$reversed_primer[i] <-  toupper(reverseComplement(variantsTrimmed2$reversed_primer[i]))
variantsTrimmed2$strong_mismatch_1[i] <-  get_strong1(variantsTrimmed2$forward_primer[i])
variantsTrimmed2$strong_mismatch_2[i] <-  get_strong2(variantsTrimmed2$forward_primer[i])
variantsTrimmed2$medium_mismatch[i] <-  get_medium1(variantsTrimmed2$forward_primer[i])
variantsTrimmed2$weak_mismatch[i] <-  get_weak1(variantsTrimmed2$forward_primer[i])
} else
{
variantsTrimmed2$forward_primer[i] <-  toupper(reverseComplement(variantsTrimmed2$forward_primer[i]))
variantsTrimmed2$strong_mismatch_1[i] <-  left_flanking_get_strong1(variantsTrimmed2$forward_primer[i])
variantsTrimmed2$strong_mismatch_2[i] <-  left_flanking_get_strong2(variantsTrimmed2$forward_primer[i])
variantsTrimmed2$medium_mismatch[i] <-  left_flanking_get_medium1(variantsTrimmed2$forward_primer[i])
variantsTrimmed2$weak_mismatch[i] <-  left_flanking_get_weak1(variantsTrimmed2$forward_primer[i])}
}
## Pivot all mismtaches into a long list
## Remove all Ns from primer list
## get reversed complementrayr for right primer
## deselect some columns
mismatch_list <- variantsTrimmed2 %>%
pivot_longer(
cols = c(strong_mismatch_1,
strong_mismatch_2,
medium_mismatch,
weak_mismatch),
names_to = "Mismatch",
values_to = "primer",
values_drop_na = TRUE) %>%
filter(primer != "N") %>%
mutate(Identidy = paste(snp,
forward_position,
reversed_position,
Mismatch,
flanking_direction,sep = ", ")) %>%
as.data.frame() %>%
dplyr::select(c(9, 8, 5))
colnames(mismatch_list) = c("Identify", "Forward", "Reversed")
print("nrow(mismatch_list)")
print(nrow(mismatch_list))
mismatch_list_collected <- rbind(mismatch_list_collected, mismatch_list)
}
print("rows of mismatch collected = ")
print(nrow(mismatch_list_collected))
df <- mismatch_list_collected
df2 <- df
for (i in 1:nrow(df)){
df2$`TM_left (°C)`[i] = calculate_tm(df$Forward[i])
df2$`TM_right (°C)`[i] = calculate_tm(df$Reversed[i])
df2$`TM_Diff (°C)`[i] = abs(df2$`TM_left (°C)`[i] - df2$`TM_right (°C)`[i])
df2$`Hairpin_left (°C)`[i] = calculate_hairpin(df$Forward[i])$temp
df2$`Hairpin_right (°C)`[i] = calculate_hairpin(df$Reversed[i])$temp
df2$`Heterodimer (kcal/mol)`[i] = calculate_dimer(df$Forward[i], df$Reversed[i])$temp
df2$`Homodimer_Left (kcal/mol)`[i] = calculate_homodimer(df$Forward[i])$temp
df2$`Homodimer_Right (kcal/mol)`[i] = calculate_homodimer(df$Reversed[i])$temp
}
df2 <- df2[df2$`TM_left (°C)` < left_TM_max, ]
View(df)
df2 <- df
for (i in 1:nrow(df)){
df2$`TM_left (°C)`[i] = calculate_tm(df$Forward[i])
df2$`TM_right (°C)`[i] = calculate_tm(df$Reversed[i])
df2$`TM_Diff (°C)`[i] = abs(df2$`TM_left (°C)`[i] - df2$`TM_right (°C)`[i])
df2$`Hairpin_left (°C)`[i] = calculate_hairpin(df$Forward[i])$temp
df2$`Hairpin_right (°C)`[i] = calculate_hairpin(df$Reversed[i])$temp
df2$`Heterodimer (kcal/mol)`[i] = calculate_dimer(df$Forward[i], df$Reversed[i])$temp
df2$`Homodimer_Left (kcal/mol)`[i] = calculate_homodimer(df$Forward[i])$temp
df2$`Homodimer_Right (kcal/mol)`[i] = calculate_homodimer(df$Reversed[i])$temp
}
View(df2)
df2 <- df2[df2$`TM_left (°C)` < left_TM_max, ]
left_TM_max <- 70
left_TM_min <- 40
diff
df2 <- df2[df2$`TM_left (°C)` < left_TM_max, ]
df2 <- df2[df2$`TM_left (°C)` > left_TM_min, ]
df2 <- df2[df2$`TM_right (°C)` < right_TM, ]
df2 <- df2[df2$`TM_Diff (°C)` < diff, ]
df2 <- df2[df2$`TM_Diff (°C)` < 0.5, ]
df2 <- df2[df2$`Hairpin_left (°C)` < left_hair_TM, ]
df2 <- df2[df2$`Hairpin_right (°C)` < right_hair_TM, ]
df2 <- df2[df2$`Heterodimer (kcal/mol)` < Heterodimer_dg, ]
#df2 <- df2[df2$`Heterodimer (kcal/mol)` > 0, ]
df2 <- df2[df2$`Homodimer_Left (kcal/mol)` < Homodimer_left_dg, ]
df <- df2
outputframe <- data.frame(matrix(ncol = 4, nrow = 10000))
colnames(outputframe) <- c("name", "forward", "reverse", "name2")
# Match every forward with every reverse primer for cross checking
k <- 0
for (i in 1:nrow(df)){
for (j in 1:nrow(df)){
k <- j+(i-1)*nrow(df)
outputframe[k,1] <- df[i,1]
outputframe[k,2] <- df[i,2]
outputframe[k,3] <- df[j,3]
outputframe[k,4] <- df[j,1]
}
}
View(outputframe)
View(outputframe)
get_multiplex <- function(df){
outputframe <- data.frame(matrix(ncol = 4, nrow = nrow(df)*nrow(df)))
colnames(outputframe) <- c("name", "forward", "reverse", "name2")
# Match every forward with every reverse primer for cross checking
k <- 0
for (i in 1:nrow(df)){
for (j in 1:nrow(df)){
k <- j+(i-1)*nrow(df)
outputframe[k,1] <- df[i,1]
outputframe[k,2] <- df[i,2]
outputframe[k,3] <- df[j,3]
outputframe[k,4] <- df[j,1]
}
}
}
outputframe <- data.frame(matrix(ncol = 4, nrow = nrow(df)*nrow(df)))
colnames(outputframe) <- c("name", "forward", "reverse", "name2")
# Match every forward with every reverse primer for cross checking
k <- 0
for (i in 1:nrow(df)){
for (j in 1:nrow(df)){
k <- j+(i-1)*nrow(df)
outputframe[k,1] <- df[i,1]
outputframe[k,2] <- df[i,2]
outputframe[k,3] <- df[j,3]
outputframe[k,4] <- df[j,1]
}
}
paste("asd" , "asdasd")
outputframe <- data.frame(matrix(ncol = 4, nrow = nrow(df)*nrow(df)))
outputframe <- data.frame(matrix(ncol = 3, nrow = nrow(df)*nrow(df)))
colnames(outputframe) <- c("name", "forward", "reverse")
# Match every forward with every reverse primer for cross checking
k <- 0
for (i in 1:nrow(df)){
for (j in 1:nrow(df)){
k <- j+(i-1)*nrow(df)
outputframe[k,1] <- paste(df[i,1], df[j,1])
outputframe[k,2] <- df[i,2]
outputframe[k,3] <- df[j,3]
}
}
View(outputframe)
filtered_df <- get_filter(outputframe,
left_TM_min,
left_TM_max,
right_TM,
left_hair_TM,
right_hair_TM,
diff,
Homodimer_left_dg,
Homodimer_right_dg,
Heterodimer_dg)
get_filter <- function(df,
left_TM_min,
left_TM_max,
right_TM,
left_hair_TM,
right_hair_TM,
diff,
Homodimer_left_dg,
Homodimer_right_dg,
Heterodimer_dg) {
print("R get filter activated")
df2 <- df
for (i in 1:nrow(df)){
df2$`TM_left (°C)`[i] = calculate_tm(df$Forward[i])
df2$`TM_right (°C)`[i] = calculate_tm(df$Reversed[i])
df2$`TM_Diff (°C)`[i] = abs(df2$`TM_left (°C)`[i] - df2$`TM_right (°C)`[i])
df2$`Hairpin_left (°C)`[i] = calculate_hairpin(df$Forward[i])$temp
df2$`Hairpin_right (°C)`[i] = calculate_hairpin(df$Reversed[i])$temp
df2$`Heterodimer (kcal/mol)`[i] = calculate_dimer(df$Forward[i], df$Reversed[i])$temp
df2$`Homodimer_Left (kcal/mol)`[i] = calculate_homodimer(df$Forward[i])$temp
df2$`Homodimer_Right (kcal/mol)`[i] = calculate_homodimer(df$Reversed[i])$temp
}
df2 <- df2[df2$`TM_left (°C)` < left_TM_max, ]
df2 <- df2[df2$`TM_left (°C)` > left_TM_min, ]
df2 <- df2[df2$`TM_right (°C)` < right_TM, ]
df2 <- df2[df2$`TM_Diff (°C)` < diff, ]
df2 <- df2[df2$`Hairpin_left (°C)` < left_hair_TM, ]
df2 <- df2[df2$`Hairpin_right (°C)` < right_hair_TM, ]
df2 <- df2[df2$`Heterodimer (kcal/mol)` < Heterodimer_dg, ]
#df2 <- df2[df2$`Heterodimer (kcal/mol)` > 0, ]
df2 <- df2[df2$`Homodimer_Left (kcal/mol)` < Homodimer_left_dg, ]
#df2 <- df2[df2$`Homodimer_Left (kcal/mol)` > 0, ]
df2 <- df2[df2$`Homodimer_Right (kcal/mol)` < Homodimer_right_dg, ]
#df2 <- df2[df2$`Homodimer_Right (kcal/mol)` > 0, ]
colnames(df2) <- c("Identidy",
"Forward (bp)",
"Reversed (bp)",
"TM_L (°C)",
"TM_R (°C)",
"TM diff (°C)",
"TM_L Hairpin (°C)",
"TM_R Hairpin (°C)",
"Heterodimer (°C)",
"Homodimer_L (°C)",
"Homodimer_R (°C)")
#df2 <- df2[ c(1,2,3,4,) ]
df2 <- df2 %>%
mutate_if(is.numeric, round, digits = 2) %>%
arrange('TM diff (°C)', 'TM_L Hairpin (°C)')
print(nrow(df2))
print("Give df2")
return(df2)
}
filtered_df <- get_filter(outputframe,
left_TM_min,
left_TM_max,
right_TM,
left_hair_TM,
right_hair_TM,
diff,
Homodimer_left_dg,
Homodimer_right_dg,
Heterodimer_dg)
runApp('GitHub/Research-primer/Multiplexing App')
runApp('GitHub/Research-primer/Multiplexing App')
runApp('GitHub/Research-primer/Multiplexing App')
runApp('GitHub/Research-primer/Endanger spieces')
runApp('GitHub/Research-primer/Multiplexing App')
runApp('GitHub/Research-primer/Multiplexing App')
mtcars
runApp('GitHub/Research-primer/Multiplexing App')
shiny::runApp('GitHub/Research-primer/Multiplexing App')
runApp('GitHub/Research-primer/Multiplexing App')
runApp('GitHub/Research-primer/Multiplexing App')
df2 <- outputframe
for (i in 1:nrow(df2)){
df2$`TM_left (°C)`[i] = calculate_tm(df2$Forward[i])
df2$`TM_right (°C)`[i] = calculate_tm(df2$Reversed[i])
df2$`TM_Diff (°C)`[i] = abs(df2$`TM_left (°C)`[i] - df2$`TM_right (°C)`[i])
df2$`Heterodimer (kcal/mol)`[i] = calculate_dimer(df2$Forward[i], df$Reversed[i])$temp
}
View(outputframe)
df2 <- outputframe
View(df2)
for (i in 1:nrow(df2)){
df2$`TM_left (°C)`[i] = calculate_tm(df2$Forward[i])
df2$`TM_right (°C)`[i] = calculate_tm(df2$Reversed[i])
df2$`TM_Diff (°C)`[i] = abs(df2$`TM_left (°C)`[i] - df2$`TM_right (°C)`[i])
df2$`Heterodimer (kcal/mol)`[i] = calculate_dimer(df2$Forward[i], df$Reversed[i])$temp
}
View(df2)
print(i)
for (i in 1:nrow(df2)){
print(i)
# df2$`TM_left (°C)`[i] = calculate_tm(df2$Forward[i])
# df2$`TM_right (°C)`[i] = calculate_tm(df2$Reversed[i])
# df2$`TM_Diff (°C)`[i] = abs(df2$`TM_left (°C)`[i] - df2$`TM_right (°C)`[i])
# df2$`Heterodimer (kcal/mol)`[i] = calculate_dimer(df2$Forward[i], df$Reversed[i])$temp
}
df2$`TM_left (°C)`[i] = calculate_tm(df2$Forward[i])
for (i in 1:nrow(df2)){
print(i)
df2$`TM_left (°C)`[i] = calculate_tm(outputframe$Forward[i])
# df2$`TM_right (°C)`[i] = calculate_tm(df2$Reversed[i])
# df2$`TM_Diff (°C)`[i] = abs(df2$`TM_left (°C)`[i] - df2$`TM_right (°C)`[i])
# df2$`Heterodimer (kcal/mol)`[i] = calculate_dimer(df2$Forward[i], df$Reversed[i])$temp
}
df2$`TM_left (°C)`[1] = calculate_tm(df2$forward[1])
for (i in 1:nrow(df2)){
print(i)
df2$`TM_left (°C)`[i] = calculate_tm(df2$forward[i])
df2$`TM_right (°C)`[i] = calculate_tm(df2$reversed[i])
df2$`TM_Diff (°C)`[i] = abs(df2$`TM_left (°C)`[i] - df2$`TM_right (°C)`[i])
df2$`Heterodimer (kcal/mol)`[i] = calculate_dimer(df2$forward[i], df$reversed[i])$temp
}
i
df2$`TM_left (°C)`[i] = calculate_tm(df2$forward[i])
df2$`TM_right (°C)`[i] = calculate_tm(df2$reversed[i])
for (i in 1:nrow(df2)){
print(i)
df2$`TM_left (°C)`[i] = calculate_tm(df2$forward[i])
df2$`TM_right (°C)`[i] = calculate_tm(df2$reverse[i])
df2$`TM_Diff (°C)`[i] = abs(df2$`TM_left (°C)`[i] - df2$`TM_right (°C)`[i])
df2$`Heterodimer (kcal/mol)`[i] = calculate_dimer(df2$forward[i], df$reverse[i])$temp
}
df2$`TM_right (°C)`[i] = calculate_tm(df2$reverse[i])
df2$`TM_Diff (°C)`[i] = abs(df2$`TM_left (°C)`[i] - df2$`TM_right (°C)`[i])
df2$`Heterodimer (kcal/mol)`[i] = calculate_dimer(df2$forward[i], df$reverse[i])$temp
calculate_dimer(df2$forward[i], df$reverse[i])$temp
calculate_dimer(df2$forward[i], df$reverse[i])
for (i in 1:nrow(df2)){
print(i)
df2$`TM_left (°C)`[i] = calculate_tm(df2$forward[i])
df2$`TM_right (°C)`[i] = calculate_tm(df2$reverse[i])
df2$`TM_Diff (°C)`[i] = abs(df2$`TM_left (°C)`[i] - df2$`TM_right (°C)`[i])
df2$`Heterodimer (kcal/mol)`[i] = calculate_dimer(df2$forward[i], df2$reverse[i])$temp
}
df2 <- df2[df2$`TM_left (°C)` < left_TM_max, ]
df2 <- df2[df2$`TM_Diff (°C)` < diff, ]
df2 <- df2[df2$`Heterodimer (kcal/mol)` < Heterodimer_dg, ]
runApp('GitHub/Research-primer/Multiplexing App')
runApp('GitHub/Research-primer/Multiplexing App')
install.packages("ggraph")
install.packages("igraph")
# Libraries
library(ggraph)
library(igraph)
library(tidyverse)
library(viridis)
# We need a data frame giving a hierarchical structure. Let's consider the flare dataset:
edges <- flare$edges
View(edges)
View(flare)
k <- flare
vertices <- flare$vertices
mygraph <- graph_from_data_frame( edges, vertices=vertices )
# Control the size of each circle: (use the size column of the vertices data frame)
ggraph(mygraph, layout = 'circlepack', weight=size) +
geom_node_circle() +
theme_void()
class(k)
View(k)
k[[1]]
View(k[[1]])
# Create a subset of the dataset (I remove 1 level)
edges <- flare$edges %>%
filter(to %in% from) %>%
droplevels()
vertices <- flare$vertices %>%
filter(name %in% c(edges$from, edges$to)) %>%
droplevels()
vertices$size <- runif(nrow(vertices))
# Rebuild the graph object
mygraph <- graph_from_data_frame( edges, vertices=vertices )
# left
ggraph(mygraph, layout = 'circlepack', weight=size ) +
geom_node_circle(aes(fill = depth)) +
geom_node_text( aes(label=shortName, filter=leaf, fill=depth, size=size)) +
theme_void() +
theme(legend.position="FALSE") +
scale_fill_viridis()
# Right
ggraph(mygraph, layout = 'circlepack', weight=size ) +
geom_node_circle(aes(fill = depth)) +
geom_node_label( aes(label=shortName, filter=leaf, size=size)) +
theme_void() +
theme(legend.position="FALSE") +
scale_fill_viridis()
View(k[[2]])
install.packages("treemap")
# library
library(treemap)
# Create data
group <- c(rep("group-1",4),rep("group-2",2),rep("group-3",3))
subgroup <- paste("subgroup" , c(1,2,3,4,1,2,1,2,3), sep="-")
value <- c(13,5,22,12,11,7,3,1,23)
data <- data.frame(group,subgroup,value)
# Custom labels:
treemap(data, index=c("group","subgroup"),     vSize="value", type="index",
fontsize.labels=c(15,12),                # size of labels. Give the size per level of aggregation: size for group, size for subgroup, sub-subgroups...
fontcolor.labels=c("white","orange"),    # Color of labels
fontface.labels=c(2,1),                  # Font of labels: 1,2,3,4 for normal, bold, italic, bold-italic...
bg.labels=c("transparent"),              # Background color of labels
align.labels=list(
c("center", "center"),
c("right", "bottom")
),                                   # Where to place labels in the rectangle?
overlap.labels=0.5,                      # number between 0 and 1 that determines the tolerance of the overlap between labels. 0 means that labels of lower levels are not printed if higher level labels overlap, 1  means that labels are always printed. In-between values, for instance the default value .5, means that lower level labels are printed if other labels do not overlap with more than .5  times their area size.
inflate.labels=F,                        # If true, labels are bigger when rectangle is bigger.
)
shiny::runApp('GitHub/Research-primer/Multiplexing App')
library(biomaRt)
library(org.Hs.eg.db)
library(clusterProfiler)
library(pathview)
library(STRINGdb)
options(repos = BiocManager::repositories())
# Load dataset
rna_results <- read.csv("condition_2_D_vs_1_E.csv", header=TRUE, row.names=1)
setwd("~/GitHub/Research_Hunt")
# Load dataset
rna_results <- read.csv("condition_2_D_vs_1_E.csv", header=TRUE, row.names=1)
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = rna_results$Row.names,
mart = ensembl_m)
# Merge gen names to gen ID
rna_results <- merge(rna_results, hgnc_m, by.x = "Row.names", by.y = "ensembl_gene_id")
View(hgnc_m)
View(hgnc_m)
View(ensembl_m)
View(rna_results)
# Merge gen names to gen ID
rna_results <- merge(rna_results, hgnc_m, by.x = "Row.names", by.y = "ensembl_gene_id")
# Drop all empty rows and anything not significant
# Drop all the wierd stuffs like N/A or blanks
rna_results <- rna_results[rna_results$pvalue < 0.05,]
rna_results <- rna_results[!apply(rna_results == "", 1, any), ,]
rna_results <- rna_results[!is.na(rna_results$pvalue),]
rna_results <- rna_results[!is.na(rna_results$hgnc_id),]
# Convert HGNC IDs into EntrezGene IDs
ensembl_h <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl")
hgnc_h <- getBM(filters = "hgnc_id",
attributes = c("hgnc_id", "entrezgene_id"),
values = rna_results$hgnc_id,
mart = ensembl_h)
View(rna_results)
# Merge gen names to gen ID
rna_results <- merge(rna_results, hgnc_m, by.x = "Row.names", by.y = "ensembl_gene_id")
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = rna_results$Row.names,
mart = ensembl_m)
# Drop all empty rows and anything not significant
# Drop all the wierd stuffs like N/A or blanks
rna_results <- rna_results[rna_results$pvalue < 0.05,]
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = rna_results$Row.names,
mart = ensembl_m)
# Load dataset
rna_results <- read.csv("condition_2_D_vs_1_E.csv", header=TRUE, row.names=1)
# Merge gen names to gen ID
rna_results <- merge(rna_results, hgnc_m, by.x = "Row.names", by.y = "ensembl_gene_id")
# Drop all empty rows and anything not significant
# Drop all the wierd stuffs like N/A or blanks
rna_results <- rna_results[rna_results$pvalue < 0.05,]
rna_results <- rna_results[!apply(rna_results == "", 1, any), ,]
rna_results <- rna_results[!is.na(rna_results$pvalue),]
rna_results <- rna_results[!is.na(rna_results$hgnc_id),]
View(rna_results)
# Convert HGNC IDs into EntrezGene IDs
ensembl_h <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl")
options(repos = BiocManager::repositories())
# Convert HGNC IDs into EntrezGene IDs
ensembl_h <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl")
