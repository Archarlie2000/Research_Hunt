rna_results <- rna_results[rna_results$pvalue < 0.05,]
rna_results <- rna_results[!apply(rna_results == "", 1, any), ,]
rna_results <- rna_results[!is.na(rna_results$pvalue),]
rna_results <- rna_results[!is.na(rna_results$hgnc_id),]
# Convert HGNC IDs into EntrezGene IDs
ensembl_h <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl")
hgnc_h <- getBM(filters = "hgnc_id",
attributes = c("hgnc_id", "entrezgene_id"),
values = rna_results$hgnc_id,
mart = ensembl_h)
hgnc_duplicated <- hgnc_h[duplicated(hgnc_h$hgnc_id),]
hgnc_h <- hgnc_h[!duplicated(hgnc_h$hgnc_id),]
rna_results <- merge(rna_results, hgnc_h, by.x = "hgnc_id", by.y = "hgnc_id")
# Create an ordered list of the rna_results
rna_list <- rna_results[order(rna_results$log2FoldChange, decreasing = TRUE),]
rna_list <- rna_list[!is.na(rna_list$entrezgene_id),c("entrezgene_id", "log2FoldChange")]
# Distill rna_results list into simplified gene_list
gene_list <- rna_list$log2FoldChange
names(gene_list) <- rna_list$entrezgene_id
names(gene_list)
# Create KEGG pathway gene enrichment analysis and make the file readable
# options(clusterProfiler.download.method = "wininet") #If KEGG isn't receiving data from web run this command
keggr <- enrichKEGG(gene = names(gene_list),
organism = "hsa",
keyType = "ncbi-geneid",
pvalueCutoff = 0.05)
summary(keggr)
names(gene_list)
activated_diapause$entrezgene_id
keggr <- enrichKEGG(gene = activated_diapause$entrezgene_id,
organism = "hsa",
keyType = "ncbi-geneid",
pvalueCutoff = 0.05)
summary(keggr)
View(resLFC_df)
View(df)
df$entrezgene_id
keggr <- enrichKEGG(gene = df$entrezgene_id,
organism = "hsa",
keyType = "ncbi-geneid",
pvalueCutoff = 0.05)
summary(keggr)
dds <- DESeq(dds)
dds <- DESeq(dds)
res <- results(dds)
res <- res[order(res$padj),]
res <- results(dds, alpha = 0.05)
res
res <- results(dds, alpha = 0.05)
res
res <- results(dds, alpha = 0.01)
res
keggr <- enrichKEGG(gene = df[df$pvalue < 0.05, ]$entrezgene_id,
organism = "hsa",
keyType = "ncbi-geneid",
pvalueCutoff = 0.05)
summary(keggr)
keggr
keggr <- setReadable(keggr, OrgDb = org.Hs.eg.db, keyType="ENTREZID")
summary(keggr)
keggr
summary(keggr)
selected_columns <- keggr[, c("Description", "pvalue", "geneID")]
summary(selected_columns)
selected_columns
df[df$pvalue < 0.05, ]$entrezgene_id
string_db <- STRINGdb$new(version="11.5", species=9606, score_threshold=200, network_type="functional", input_directory="")
example1_mapped <- string_db$map( df[df$pvalue < 0.05, ]$entrezgene_id, "entrezgene_id", removeUnmapped = TRUE )
string_interactions <- string_db$get_interactions(as.character(df[df$pvalue < 0.05, ]$entrezgene_id)) # Replace with your gene list
library(igraph)
network <- graph_from_data_frame(string_interactions)
plot(network)
network
graph_from_data_frame(string_interactions)
string_interactions
string_db
as.character(df[df$pvalue < 0.05, ]$entrezgene_id)
gor <- enrichGO(gene = activated_diapause[activated_diapause$pvalue < 0.05, ]$entrezgene_id,
OrgDb = org.Hs.eg.db,
ont = "ALL",
pvalueCutoff = 0.05,
readable = TRUE)
summary(gor)
keggr <- enrichKEGG(gene = df[df$pvalue < 0.05, ]$entrezgene_id,
organism = "hsa",
keyType = "ncbi-geneid",
pvalueCutoff = 0.05)
keggr <- setReadable(keggr, OrgDb = org.Hs.eg.db, keyType="ENTREZID")
selected_columns <- keggr[, c("Description", "pvalue", "geneID")]
selected_columns
library(org.Hs.eg.db)
# Assuming you have a vector of ENTREZ gene IDs
entrez_ids <- as.character(top20$entrezgene_id)
# Get gene symbols
gene_symbols <- mapIds(org.Hs.eg.db,
keys = entrez_ids,
column = "SYMBOL",
keytype = "ENTREZID",
multiVals = "first")
# Get gene descriptions
gene_descriptions <- mapIds(org.Hs.eg.db,
keys = entrez_ids,
column = "GENENAME",
keytype = "ENTREZID",
multiVals = "first")
# Combine the results into a data frame
gene_info <- data.frame(entrez_id = entrez_ids,
symbol = gene_symbols,
description = gene_descriptions)
top20 <- top20[, !(colnames(top20) %in% c("hgnc_id", "gene_id", "baseMean", "pvalue"))]
gene_info_appended <- merge(gene_info, top20, by.x = "entrez_id", by.y = "entrezgene_id")
gene_info_appended <- gene_info_appended[, !colnames(gene_info_appended) %in% "entrez_id"]
# View the data frame
# gene_info_appended
knitr::kable(gene_info_appended, "html", escape = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
column_spec(1, width = "15em") %>%
column_spec(2, width = "15em") %>%
column_spec(3, width = "15em") %>%
column_spec(4, width = "15em") %>%
column_spec(5, width = "15em") %>%
column_spec(6, width = "15em")
knitr::kable(gene_info_appended, "html", escape = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
column_spec(1, width = "15em") %>%
column_spec(2, width = "15em") %>%
column_spec(3, width = "15em") %>%
column_spec(4, width = "15em") %>%
column_spec(5, width = "15em")
knitr::kable(selected_columns, "html", escape = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
column_spec(1, width = "15em") %>%
column_spec(2, width = "15em") %>%
column_spec(3, width = "15em") %>%
column_spec(4, width = "15em")
knitr::kable(gor, "html", escape = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
column_spec(1, width = "15em") %>%
column_spec(2, width = "15em") %>%
column_spec(3, width = "15em") %>%
column_spec(4, width = "15em")
knitr::kable(gor, "html", escape = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
column_spec(1, width = "15em") %>%
column_spec(2, width = "15em") %>%
column_spec(3, width = "15em") %>%
column_spec(4, width = "15em")
df_gor <- as.data.frame(gor)
df_gor
knitr::kable(df_gor, "html", escape = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
column_spec(1, width = "15em") %>%
column_spec(2, width = "15em") %>%
column_spec(3, width = "15em") %>%
column_spec(4, width = "15em")
df_gor <- as.data.frame(gor) %>% select(-ID)
knitr::kable(df_gor, "html", escape = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
column_spec(1, width = "15em") %>%
column_spec(2, width = "15em") %>%
column_spec(3, width = "15em") %>%
column_spec(4, width = "15em")
knitr::kable(df_gor, "html", escape = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
column_spec(1, width = "15em") %>%
column_spec(2, width = "15em") %>%
column_spec(3, width = "15em") %>%
column_spec(4, width = "15em")%>%
column_spec(5, width = "15em")%>%
column_spec(6, width = "15em")
knitr::kable(df_gor, "html", escape = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
column_spec(1, width = "15em") %>%
column_spec(2, width = "15em") %>%
column_spec(3, width = "15em") %>%
column_spec(4, width = "15em") %>%
column_spec(5, width = "15em") %>%
column_spec(6, width = "15em")% >%
column_spec(6, width = "15em")
knitr::kable(df_gor, "html", escape = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
column_spec(1, width = "15em") %>%
column_spec(2, width = "15em") %>%
column_spec(3, width = "15em") %>%
column_spec(4, width = "15em") %>%
column_spec(5, width = "15em") %>%
column_spec(6, width = "15em")
knitr::kable(df_gor, "html", escape = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
column_spec(1, width = "15em") %>%
column_spec(2, width = "15em") %>%
column_spec(3, width = "15em") %>%
column_spec(4, width = "15em") %>%
column_spec(5, width = "5em") %>%
column_spec(6, width = "15em")
knitr::kable(df_gor, "html", escape = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
column_spec(1, width = "15em") %>%
column_spec(2, width = "15em") %>%
column_spec(3, width = "15em") %>%
column_spec(4, width = "15em") %>%
column_spec(5, width = "5em", extra_css = "word-wrap: break-word;") %>%
column_spec(6, width = "15em")
df_gor
ncol(df_gor)
knitr::kable(df_gor, "html", escape = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
column_spec(1, width = "15em") %>%
column_spec(2, width = "15em") %>%
column_spec(3, width = "15em") %>%
column_spec(4, width = "15em") %>%
column_spec(5, width = "5em") %>%
column_spec(6, width = "15em")
knitr::kable(df_gor, "html", escape = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
column_spec(1, width = "15em") %>%
column_spec(2, width = "15em") %>%
column_spec(3, width = "15em") %>%
column_spec(4, width = "15em") %>%
column_spec(5, width = "15em", extra_css = "word-wrap: break-word;") %>%
column_spec(6, width = "15em")
knitr::kable(df_gor, "html", escape = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
column_spec(1, width = "50em") %>%
column_spec(2, width = "15em") %>%
column_spec(3, width = "15em") %>%
column_spec(4, width = "15em") %>%
column_spec(5, width = "15em", extra_css = "word-wrap: break-word;") %>%
column_spec(6, width = "15em")
knitr::kable(df_gor, "html", escape = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
column_spec(1, width = "50em", extra_css = "word-wrap: break-word;") %>%
column_spec(2, width = "15em", extra_css = "word-wrap: break-word;") %>%
column_spec(3, width = "15em", extra_css = "word-wrap: break-word;") %>%
column_spec(4, width = "15em", extra_css = "word-wrap: break-word;") %>%
column_spec(5, width = "15em", extra_css = "word-wrap: break-word;") %>%
column_spec(6, width = "15em", extra_css = "word-wrap: break-word;")
knitr::kable(df_gor, "html", escape = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
column_spec(1, width = "15em") %>%
column_spec(2, width = "15em") %>%
column_spec(3, width = "15em") %>%
column_spec(4, width = "15em") %>%
column_spec(5, width = "15em") %>%
column_spec(6, width = "15em")
library(STRINGdb)
data(diff_exp_example1)
# create a new STRING_db object
string_db <- STRINGdb$new()
diff_exp_example1
string_db
# map to STRING
example1_mapped = string_db$map( diff_exp_example1, "gene", removeUnmappedRows = TRUE )
# get the best 200 hits
hits = example1_mapped$STRING_id[1:200]
hits
# plot the STRING network png
string_db$plot_network( hits )
# plot a protein-protein enrichment graph of the best 1000 hits in order to see how the ppi signal is distributed along the sorted list
string_db$plot_ppi_enrichment( example1_mapped$STRING_id[1:1000] )
# plot a protein-protein enrichment graph of the best 1000 hits in order to see how the ppi signal is distributed along the sorted list
string_db$plot_ppi_enrichment( example1_mapped$STRING_id[1:1000] )
# filter by p-value and add a color column (i.e. green down-regulated gened and red for up-regulated genes)
example1_mapped_pval05 = string_db$add_diff_exp_color( subset(example1_mapped, pvalue<0.05), logFcColStr="logFC" )
# post payload information to the STRING server
payload_id = string_db$post_payload( example1_mapped_pval05$STRING_id, colors=example1_mapped_pval05$color )
# post payload information to the STRING server
payload_id = string_db$post_payload( example1_mapped_pval05$STRING_id, colors=example1_mapped_pval05$color )
# display a STRING network png with the "halo"
string_db$plot_network( hits, payload_id=payload_id )
######## compute enrichment in GO annotations  ########
enrichmentGO = string_db$get_enrichment( hits, category = "Process", methodMT = "fdr", iea = TRUE )
enrichmentKEGG = string_db$get_enrichment( hits, category = "KEGG", methodMT = "fdr", iea = TRUE )
enrichmentKEGG = string_db$get_enrichment( hits, category = "KEGG", methodMT = "fdr", iea = TRUE )
head(enrichmentGO, n=7)
head(enrichmentGO, n=7)
head(enrichmentKEGG, n=7)
data(diff_exp_example1)
k <- data(diff_exp_example1)
data(diff_exp_example1)
data(diff_exp_example1)
example1_mapped
# Assuming you have a vector of ENTREZ gene IDs
entrez_ids <- as.character(df$entrezgene_id)
entrez_ids
# Get gene symbols
gene_symbols <- mapIds(org.Hs.eg.db,
keys = entrez_ids,
column = "SYMBOL",
keytype = "ENTREZID",
multiVals = "first")
gene_symbols
# Combine the results into a data frame
PPI_info <- data.frame(entrez_id = entrez_ids,
symbol = gene_symbols)
gene_symbols
gene_symbols <- ifelse(!is.na(entrez_ids),
mapIds(org.Hs.eg.db,
keys = entrez_ids,
column = "SYMBOL",
keytype = "ENTREZID",
multiVals = "first"),
NA)
# Combine the results into a data frame
PPI_info <- data.frame(entrez_id = entrez_ids, symbol = gene_symbols)
PPI_info
View(PPI_info)
# Assuming you have a vector of ENTREZ gene IDs
entrez_ids <- as.character(df$entrezgene_id)
entrez_ids
length(entrez_ids )
# Get gene symbols
gene_symbols <- mapIds(org.Hs.eg.db,
keys = entrez_ids,
column = "SYMBOL",
keytype = "ENTREZID",
multiVals = "first")
gene_symbols
len(gene_symbols)
length(gene_symbols)
gene_symbols
gene_symbols <- ifelse(!is.na(entrez_ids),
mapIds(org.Hs.eg.db,
keys = entrez_ids,
column = "SYMBOL",
keytype = "ENTREZID",
multiVals = "first"),
NA)
gene_symbols
# Assuming you have a vector of ENTREZ gene IDs
entrez_ids <- as.character(df$entrezgene_id)
# Get gene symbols
gene_symbols <- mapIds(org.Hs.eg.db,
keys = entrez_ids,
column = "SYMBOL",
keytype = "ENTREZID",
multiVals = "first")
len(entrez_ids)
length(entrez_ids)
# Get gene symbols
gene_symbols <- mapIds(org.Hs.eg.db,
keys = entrez_ids,
column = "SYMBOL",
keytype = "ENTREZID",
multiVals = "first")
length(gene_symbols)
View(gene_symbols )
# Combine the results into a data frame
PPI_info <- data.frame(entrez_id = entrez_ids,
symbol = gene_symbols)
length(entrez_ids)
length(gene_symbols)
# Get gene symbols
gene_symbols <- mapIds(org.Hs.eg.db,
keys = entrez_ids,
column = "SYMBOL",
keytype = "ENTREZID",
multiVals = "first",
ifnotfound = NA)
gene_symbols
# Combine the results into a data frame
PPI_info <- data.frame(entrez_id = entrez_ids,
symbol = gene_symbols)
# Combine the results into a data frame
PPI_info <- data.frame(entrez_id = entrez_ids,
symbol = gene_symbols)
gene_symbols <- ifelse(!is.na(entrez_ids),
mapIds(org.Hs.eg.db,
keys = entrez_ids,
column = "SYMBOL",
keytype = "ENTREZID",
multiVals = "first"),
NA)
# Combine the results into a data frame
PPI_info <- data.frame(entrez_id = entrez_ids,
symbol = gene_symbols)
View(PPI_info)
# Assuming you have a vector of ENTREZ gene IDs
entrez_ids <- as.character(df$entrezgene_id)
entrez_ids
# Get gene symbols
gene_symbols <- mapIds(org.Hs.eg.db,
keys = entrez_ids,
column = "SYMBOL",
keytype = "ENTREZID",
multiVals = "first",
ifnotfound = NA)
View(gene_symbols)
gene_symbols[["41"]]
gene_symbols <- ifelse(!is.na(entrez_ids),
mapIds(org.Hs.eg.db,
keys = entrez_ids,
column = "SYMBOL",
keytype = "ENTREZID",
multiVals = "first"),
NA)
gene_symbols
View(gene_symbols)
# Get gene symbols
gene_symbols <- mapIds(org.Hs.eg.db,
keys = entrez_ids,
column = "SYMBOL",
keytype = "ENTREZID",
multiVals = "first",
ifnotfound = NA)
# Assuming you have a vector of ENTREZ gene IDs
entrez_ids <- as.character(df$entrezgene_id)
# Get gene symbols
gene_symbols <- mapIds(org.Hs.eg.db,
keys = entrez_ids,
column = "SYMBOL",
keytype = "ENTREZID",
multiVals = "first",
ifnotfound = NA)
View(gene_symbols)
gene_symbols_df <- data.frame(entrez_id = names(gene_symbols),
symbol = unlist(gene_symbols),
stringsAsFactors = FALSE)
gene_symbols[[3]]names(gene_symbols)
names(gene_symbols)
lenght(names(gene_symbols))
length(names(gene_symbols))
length(unlist(gene_symbols))
names(gene_symbols)
# Assuming you have a vector of ENTREZ gene IDs
entrez_ids <- as.character(df$entrezgene_id)
# Get gene symbols
gene_symbols <- mapIds(org.Hs.eg.db,
keys = entrez_ids,
column = "SYMBOL",
keytype = "ENTREZID",
multiVals = "first",
ifnotfound = NA)
valid_names <- names(gene_symbols)[!is.na(names(gene_symbols))]
valid_symbols <- gene_symbols[!is.na(names(gene_symbols))]
# Now create the data frame
gene_symbols_df <- data.frame(entrez_id = valid_names,
symbol = unlist(valid_symbols),
stringsAsFactors = FALSE)
# Combine the results into a data frame
PPI_info <- data.frame(entrez_id = entrez_ids,
symbol = gene_symbols)
# Merge the gene symbols data frame with your original data frame
PPI_info <- merge(df, gene_symbols_df, by.x = "entrezgene_id", by.y = "entrez_id")
View(PPI_info)
# Merge the gene symbols data frame with your original data frame
PPI_info <- merge(df, gene_symbols_df, by.x = "entrezgene_id", by.y = "entrez_id") %>%
dplyr::select(pvalue, log2FoldChange, symbol)
diff_exp_example1
# Merge the gene symbols data frame with your original data frame
PPI_info <- merge(df, gene_symbols_df, by.x = "entrezgene_id", by.y = "entrez_id") %>%
dplyr::select(pvalue, log2FoldChange, symbol )%>%
rename(pvalue = pvalue, logFC = log2FoldChange, gene = symbol)
library(STRINGdb)
# create a new STRING_db object
string_db <- STRINGdb$new()
# map to STRING
example1_mapped = string_db$map( PPI_info, "gene", removeUnmappedRows = TRUE )
# get the best 200 hits
hits = example1_mapped$STRING_id[1:200]
# plot the STRING network png
string_db$plot_network( hits )
# plot a protein-protein enrichment graph of the best 1000 hits in order to see how the ppi signal is distributed along the sorted list
string_db$plot_ppi_enrichment( example1_mapped$STRING_id[1:1000] )
# plot the STRING network png
string_db$plot_network( hits )
# get the best 200 hits
hits = example1_mapped$STRING_id[1:50]
# plot the STRING network png
string_db$plot_network( hits )
# get the best 200 hits
hits = example1_mapped$STRING_id[1:20]
# plot the STRING network png
string_db$plot_network( hits )
# get the best 200 hits
hits = example1_mapped$STRING_id[1:30]
# plot the STRING network png
string_db$plot_network( hits )
# plot a protein-protein enrichment graph of the best 1000 hits in order to see how the ppi signal is distributed along the sorted list
string_db$plot_ppi_enrichment( example1_mapped$STRING_id[1:1000] )
knitr::kable(selected_columns, "html", escape = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
column_spec(1, width = "30em") %>%
column_spec(2, width = "15em") %>%
column_spec(3, width = "15em") %>%
column_spec(4, width = "15em")
knitr::kable(selected_columns, "html", escape = FALSE) %>%
kable_styling(full_width = F) %>%
column_spec(1, width = "30em") %>%
column_spec(2, width = "15em") %>%
column_spec(3, width = "15em") %>%
column_spec(4, width = "15em")
knitr::kable(df_gor, "html", escape = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
column_spec(1, width = "15em") %>%
column_spec(2, width = "15em") %>%
column_spec(3, width = "15em") %>%
column_spec(4, width = "15em") %>%
column_spec(5, width = "15em") %>%
column_spec(6, width = "15em")
pander::pander(df_gor, split.cell = 80, split.table = Inf)
knitr::kable(selected_columns, "html", escape = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
column_spec(1, width = "30em", extra_css = "word-wrap: break-word;") %>%
column_spec(2, width = "15em", extra_css = "word-wrap: break-word;") %>%
column_spec(3, width = "15em", extra_css = "word-wrap: break-word;") %>%
column_spec(4, width = "15em", extra_css = "word-wrap: break-word;")
gene_ids_DE <- rna_results_DE$gene_id
gene_ids_EP <- rna_results_EP$gene_id
# Shrink the LFC
resLFC <- lfcShrink(dds, coef="condition_P_vs_E", type="apeglm")
