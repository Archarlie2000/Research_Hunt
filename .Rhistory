hgnc_h <- hgnc_h[!duplicated(hgnc_h$hgnc_id),]
rna_results <- merge(rna_results, hgnc_h, by.x = "hgnc_id", by.y = "hgnc_id")
# Create an ordered list of the rna_results
rna_list <- rna_results[order(rna_results$log2FoldChange, decreasing = TRUE),]
rna_list <- rna_list[!is.na(rna_list$entrezgene_id),c("entrezgene_id", "log2FoldChange")]
# Distill rna_results list into simplified gene_list
gene_list <- rna_list$log2FoldChange
names(gene_list) <- rna_list$entrezgene_id
return(gene_list)
}
#############################
selectedgene <- "04913"
rna_results <- read.csv("condition_2_D_vs_1_E.csv", header=TRUE, row.names=1)
logchange1 <- get_genelist(rna_results)
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
load("~/GitHub/Research_Hunt/Results/genes/13D-1_S27_L007.genes.results")
load("~/GitHub/Research_Hunt/Results/genes/13D-1_S27_L007.genes.results")
read.csv("note1.csv")
setwd("~/GitHub/Research_Hunt/Results/genes")
load("~/GitHub/Research_Hunt/Results/genes/13D-1_S27_L007.genes.results.csv")
load("~/GitHub/Research_Hunt/Results/genes/13D-1_S27_L007.csv")
read.csv('13D-1_S27_L007.csv', header = TRUE)
read.csv('13D-1_S27_L007.genes.result', header = TRUE)
read.csv('13D-1_S27_L007.genes.results', header = TRUE)
read.csv('13D-2_S30_L007.genes.results', header = TRUE)
df2 <- read.csv('13D-2_S30_L007.genes.results', header = TRUE)
df <- read.csv('13D-1_S27_L007.csv', header = TRUE)
View(df)
View(df2)
df2 <- read.csv('13D-2_S30_L007.genes.results', header = FALSE)
View(rna_results)
View(df2)
library(tidyverse)
library(mosaic)
library(pander)
D1 <- read.csv('13D-1_S27_L007.csv', header = TRUE)
D2 <- read.csv('13D-2_S30_L007.csv', header = TRUE)
D3 <- read.csv('13D-3_S33_L007.csv', header = TRUE)
E1 <- read.csv('13E-1_S26_L007.csv', header = TRUE)
E2 <- read.csv('13E-2_S29_L007.csv', header = TRUE)
E3 <- read.csv('13E-3_S32_L007.csv', header = TRUE)
P1 <- read.csv('13P-1_S28_L007.csv', header = TRUE)
P2 <- read.csv('13P-2_S31_L007.csv', header = TRUE)
P3 <- read.csv('13P-3_S34_L007.csv', header = TRUE)
View(D1)
View(D1)
View(D2)
D1 <- D1$phase <- "D1"
D1 <- read.csv('13D-1_S27_L007.csv', header = TRUE)
View(D1)
D1 <- D1$phase <- "D1"
D1 <- read.csv('13D-1_S27_L007.csv', header = TRUE)
D1 <- read.csv('13D-1_S27_L007.csv', header = TRUE) %>%
mutate(phase = "D")
View(D1)
D2 <- read.csv('13D-2_S30_L007.csv', header = TRUE) %>%
mutate(phase = "D")
D3 <- read.csv('13D-3_S33_L007.csv', header = TRUE) %>%
mutate(phase = "D")
df_D <- rbind(D1, D2, D3)
View(df_D)
D1 <- read.csv('13D-1_S27_L007.csv', header = TRUE) %>%
mutate(phase = "D1")
D2 <- read.csv('13D-2_S30_L007.csv', header = TRUE) %>%
mutate(phase = "D2")
D3 <- read.csv('13D-3_S33_L007.csv', header = TRUE) %>%
mutate(phase = "D3")
df_D <- rbind(D1, D2, D3)
colnames(df_D)
kruskal.test(TPM ~ phase, data = df_D)
boxplot(TPM ~ phase, data = df_Ds,
col="lightgray",
xlab="Sample",
main="Weights of Piglets for 8 Different Litters from One Mother",
ylab="TPM")
boxplot(TPM ~ phase, data = df_D,
col="lightgray",
xlab="Sample",
main="Weights of Piglets for 8 Different Litters from One Mother",
ylab="TPM")
kruskal.test(TPM ~ phase, data = df_D)
pander(favstats(TPM ~ phase, data = df_D)[,-10])
E1 <- read.csv('13E-1_S26_L007.csv', header = TRUE)  %>%
mutate(phase = "E1")
E2 <- read.csv('13E-2_S29_L007.csv', header = TRUE)  %>%
mutate(phase = "E2")
E3 <- read.csv('13E-3_S32_L007.csv', header = TRUE)  %>%
mutate(phase = "E3")
df_E <- rbind(E1, E2, E3)
kruskal.test(TPM ~ phase, data = df_E)
boxplot(TPM ~ phase, data = df_E,
col="lightgray",
xlab="Sample",
main="Estrus",
ylab="TPM")
pander(favstats(TPM ~ phase, data = df_D)[,-10])
pander(favstats(TPM ~ phase, data = df_E)[,-10])
kruskal.test(TPM ~ phase, data = df_E)
P1 <- read.csv('13P-1_S28_L007.csv', header = TRUE)  %>%
mutate(phase = "P11")
P2 <- read.csv('13P-2_S31_L007.csv', header = TRUE)  %>%
mutate(phase = "P2")
P3 <- read.csv('13P-3_S34_L007.csv', header = TRUE)  %>%
mutate(phase = "P3")
df_P<- rbind(P1, P2, P3)
kruskal.test(TPM ~ phase, data = df_P)
boxplot(TPM ~ phase, data = df_P,
col="lightgray",
xlab="Sample",
main="Estrus",
ylab="TPM")
pander(favstats(TPM ~ phase, data = df_P)[,-10])
library(tidyverse)
library(mosaic)
library(pander)
boxplot(TPM ~ phase, data = df_E,
col="lightgray",
xlab="Sample",
main="Estrus",
ylab="TPM",
log="y"
)
boxplot(TPM ~ phase, data = df_E,
col="lightgray",
xlab="Sample",
main="Estrus",
ylab="TPM"
)
pander(favstats(TPM ~ phase, data = df_E)[,-10])
kruskal.test(TPM ~ phase, data = df_D)
boxplot(TPM ~ phase, data = df_D,
col="lightgray",
xlab="Sample",
main="Diapuse",
ylab="TPM")
pander(favstats(TPM ~ phase, data = df_D)[,-10])
pander(favstats(TPM ~ phase, data = df_D)[,-10])
kruskal.test(TPM ~ phase, data = df_D)
kruskal.test(TPM ~ phase, data = df_E)
E1 <- read.csv('13E-1_S26_L007.csv', header = TRUE)  %>%
mutate(phase = "E1")
E2 <- read.csv('13E-2_S29_L007.csv', header = TRUE)  %>%
mutate(phase = "E2")
E3 <- read.csv('13E-3_S32_L007.csv', header = TRUE)  %>%
mutate(phase = "E3")
df_E <- rbind(E1, E2, E3)
kruskal.test(TPM ~ phase, data = df_E)
boxplot(TPM ~ phase, data = df_E,
col="lightgray",
xlab="Sample",
main="Estrus",
ylab="TPM")
pander(favstats(TPM ~ phase, data = df_E)[,-10])
View(E2)
kruskal.test(FPKM ~ phase, data = df_E)
kruskal.test(FPKM ~ phase, data = df_D)
kruskal.test(FPKM ~ phase, data = df_P)
pander(favstats(FPKM ~ phase, data = df_P)[,-10])
pander(favstats(FPKM ~ phase, data = df_D)[,-10])
pander(favstats(FPKM ~ phase, data = df_E)[,-10])
kruskal.test(FPKM ~ phase, data = df_E)
kruskal.test(FPKM ~ phase, data = df_D)
kruskal.test(FPKM ~ phase, data = df_P)
sum(E1$TPM- E1$TPM)
sum(E1$TPM- E2$TPM)
E1$TPM - E2$TPM
sum(abs(E1$TPM - E2$TPM))
sum(abs(E2$TPM - E3$TPM))
sum(abs(E1$TPM - E3$TPM))
sum(abs(E1$TPM - mean(df_E$TPM)))
mean(df_E$TPM)
mean(2,3)
mean(1,5)
sum(abs(E1$TPM - (E1$TPM + E2$TPM + E3$TPM)/3))
(E1$TPM + E2$TPM + E3$TPM)/3)
(E1$TPM + E2$TPM + E3$TPM)/3
sum(abs(E1$TPM - (E1$TPM + E2$TPM + E3$TPM)/3))
sum(abs(E2$TPM - (E1$TPM + E2$TPM + E3$TPM)/3))
sum(abs(E3$TPM - (E1$TPM + E2$TPM + E3$TPM)/3))
sum(abs(E1$TPM - E2$TPM))
sum(abs(E2$TPM - E3$TPM))
sum(abs(E3$TPM - E3$TPM))
sum(abs(E1$TPM - E2$TPM))
sum(abs(E2$TPM - E3$TPM))
sum(abs(E1$TPM - E3$TPM))
abs(E1$TPM - E3$TPM)
View(D1)
View(E1)
E2 <- read.csv('13E-2_S29_L007.csv', header = TRUE)  %>%
mutate(phase = "E2")
pander(favstats(FPKM ~ phase, data = df_D)[,-10])
sum(abs(D1$TPM - D2$TPM))
sum(abs(D2$TPM - D3$TPM))
sum(abs(D1$TPM - D3$TPM))
sum(abs(D1$TPM - (D1$TPM + D2$TPM + D3$TPM)/3))
sum(abs(D2$TPM - (D1$TPM + D2$TPM + D3$TPM)/3))
sum(abs(D3$TPM - (D1$TPM + D2$TPM + D3$TPM)/3))
sum(abs(P1$TPM - P2$TPM))
sum(abs(P2$TPM - P3$TPM))
sum(abs(P1$TPM - P3$TPM))
sum(abs(P1$TPM - (P1$TPM + P2$TPM + P3$TPM)/3))
sum(abs(P2$TPM - (P1$TPM + P2$TPM + P3$TPM)/3))
sum(abs(P3$TPM - (P1$TPM + P2$TPM + P3$TPM)/3))
sum(abs(E1$TPM / (E1$TPM + E2$TPM + E3$TPM)/3))
E1$TPM / (E1$TPM + E2$TPM + E3$TPM)/3
sum(E1$TPM / (E1$TPM + E2$TPM + E3$TPM)/3)
sum(abs(E1$TPM / (E1$TPM + E2$TPM + E3$TPM)/3), na.rm = TRUE)
sum(abs(E2$TPM / (E1$TPM + E2$TPM + E3$TPM)/3), na.rm = TRUE)
sum(abs(E3$TPM / (E1$TPM + E2$TPM + E3$TPM)/3), na.rm = TRUE)
sum(abs(D1$TPM / (D1$TPM + D2$TPM + D3$TPM)/3), na.rm = TRUE)
sum(abs(D2$TPM / (D1$TPM + D2$TPM + D3$TPM)/3), na.rm = TRUE)
sum(abs(D3$TPM / (D1$TPM + D2$TPM + D3$TPM)/3), na.rm = TRUE)
1+1
sum(abs(P1$TPM / (P1$TPM + P2$TPM + P3$TPM)/3), na.rm = TRUE)
sum(abs(P2$TPM / (P1$TPM + P2$TPM + P3$TPM)/3), na.rm = TRUE)
sum(abs(P3$TPM / (P1$TPM + P2$TPM + P3$TPM)/3), na.rm = TRUE)
sort(abs(E1$TPM - E2$TPM))
sort(abs(E1$TPM - E2$TPM), DESC)
sort(abs(E1$TPM - E2$TPM), decreasing = TRUE)
View(sort(abs(E1$TPM - E2$TPM), decreasing = TRUE))
boxplot(abs(E1$TPM - E2$TPM))
kruskal.test(list(E1$TPM, E2$TPM, E3$TPM))
kruskal.test(1,2,3)
pander(favstats(FPKM ~ phase, data = df_E)[,-10])
pander(favstats(FPKM ~ phase, data = df_D)[,-10])
cbind(E1$gene_id, E1$TPM, E2$TPM, E3$TPM,
D1$TPM, D2$TPM, D3$TPM,
P1$TPM, P2$TPM, P3$TPM)
k <- cbind(E1$gene_id, E1$TPM, E2$TPM, E3$TPM,
D1$TPM, D2$TPM, D3$TPM,
P1$TPM, P2$TPM, P3$TPM,
E1$FPKM, E2$FPKM, E3$FPKM,
D1$FPKM, D2$FPKM, D3$FPKM,
P1$FPKM, P2$FPKM, P3$FPKM)
View(k)
result <- cbind(E1$gene_id, E1$TPM, E2$TPM, E3$TPM,
D1$TPM, D2$TPM, D3$TPM,
P1$TPM, P2$TPM, P3$TPM,
E1$FPKM, E2$FPKM, E3$FPKM,
D1$FPKM, D2$FPKM, D3$FPKM,
P1$FPKM, P2$FPKM, P3$FPKM)
colnames(result) <- c("name",
"E1-TPM", "E2-TPM", "E3-TPM",
"D1-TPM", "D2-TPM", "D3-TPM",
"P1-TPM", "P2-TPM", "P3-TPM",
"E1-FPKM", "E2-FPKM", "E3-FPKM",
"D1-FPKM", "D2-FPKM", "D3-FPKM",
"P1-FPKM", "P2-FPKM", "P3-FPKM")
View(result)
sum(abs(E1$TPM - (E2$TPM + E3$TPM)/2))
sum(abs(E2$TPM - (E1$TPM + E3$TPM)/2))
sum(abs(E3$TPM - (E1$TPM + E2$TPM)/2))
sum(abs(D1$TPM - (D2$TPM + D3$TPM)/2))
sum(abs(D2$TPM - (D1$TPM + D3$TPM)/2))
sum(abs(D3$TPM - (D1$TPM + D2$TPM)/2))
sum(abs(P1$TPM - (P2$TPM + P3$TPM)/2))
sum(abs(P2$TPM - (P1$TPM + P3$TPM)/2))
sum(abs(P3$TPM - (P1$TPM + P2$TPM)/2))
sum(abs(P1$FPKM - (P2$FPKM + P3$FPKM)/2))
sum(abs(P2$FPKM - (P1$FPKM + P3$FPKM)/2))
sum(abs(P3$FPKM - (P1$FPKM + P2$FPKM)/2))
sum(abs(D1$FPKM - (D2$FPKM + D3$FPKM)/2))
sum(abs(D2$FPKM - (D1$FPKM + D3$FPKM)/2))
sum(abs(D3$FPKM - (D1$FPKM + D2$FPKM)/2))
sum(abs(E1$FPKM - (E2$FPKM + E3$FPKM)/2))
sum(abs(E2$FPKM - (E1$FPKM + E3$FPKM)/2))
sum(abs(E3$FPKM - (E1$FPKM + E2$FPKM)/2))
sum(abs(P1$TPM / (P1$TPM + P2$TPM + P3$TPM)/3), na.rm = TRUE)
sum(abs(P2$TPM / (P1$TPM + P2$TPM + P3$TPM)/3), na.rm = TRUE)
sum(abs(P3$TPM / (P1$TPM + P2$TPM + P3$TPM)/3), na.rm = TRUE)
sum(abs(D1$FPKM - (D2$FPKM + D3$FPKM)/2))
sum(abs(D2$FPKM - (D1$FPKM + D3$FPKM)/2))
sum(abs(D3$FPKM - (D1$FPKM + D2$FPKM)/2))
sum(abs(D1$TPM - D2$TPM))
sum(abs(D2$TPM - D3$TPM))
sum(abs(D1$TPM - D3$TPM))
install.packages("ggfortify")
library(ggplot2)
library(ggfortify)
result[1,2,3]
result[c(1,2,3)]
A <- E1$TPM
B <- E2$TPM
C <- E3$TPM
data <- cbind(A, B, C)
# 1. Calculate the difference
diff_A <- A - (B + C) / 2
diff_B <- B - (A + C) / 2
diff_C <- C - (A + B) / 2
diff_data <- cbind(diff_A, diff_B, diff_C)
# 2. Rank the differences
rank_data <- t(apply(diff_data, 1, function(x) rank(-x)))
View(rank_data)
# 3. Determine which column has the highest variance most often
max_var_column <- apply(data, 1, function(x) which.max(c(var(c(x[1], x[2])), var(c(x[1], x[3])), var(c(x[2], x[3])))))
table_max_var <- table(max_var_column)
ranking_max_var <- rank(-table_max_var)
# Add the ranking to the dataset
data$Rank_Max_Variance <- max_var_column
# View the results
print(data)
print(rank_data)
print(ranking_max_var)
View(max_var_column)
View(rank_data)
View(table_max_var)
View(ranking_max_var)
View(rank_data)
View(diff_data)
# 1. Calculate the difference
diff_A <- abs(A - (B + C) / 2)
diff_B <- abs(B - (A + C) / 2)
diff_C <- abs(C - (A + B) / 2)
diff_data <- cbind(diff_A, diff_B, diff_C)
# 2. Rank the differences
rank_data <- t(apply(diff_data, 1, function(x) rank(-x)))
rank_data %>% mutate()
# 2. Rank the differences
rank_data <- t(apply(diff_data, 1, function(x) rank(-x)))
# 3. Determine which column has the highest variance most often
max_var_column <- apply(data,
1,
function(x) which.max(c(var(c(x[1], x[2])),
var(c(x[1], x[3])),
var(c(x[2], x[3])))))
table_max_var <- table(max_var_column)
ranking_max_var <- rank(-table_max_var)
# Add the ranking to the dataset
data$Rank_Max_Variance <- max_var_column
# View the results
print(data)
print(rank_data)
print(ranking_max_var)
colSums(rank_data)
calculate_rank_sums <- function(A, B, C) {
data <- cbind(A, B, C)
# 1. Calculate the difference
diff_A <- abs(A - (B + C) / 2)
diff_B <- abs(B - (A + C) / 2)
diff_C <- abs(C - (A + B) / 2)
diff_data <- cbind(diff_A, diff_B, diff_C)
# 2. Rank the differences
rank_data <- t(apply(diff_data, 1, function(x) rank(-x)))
return(colSums(rank_data))
}
calculate_rank_sums(E1$TPM, E2$TPM, E3$TPM)
calculate_rank_sums(D1$TPM, D2$TPM, D3$TPM)
calculate_rank_sums(P1$TPM, P2$TPM, P3$TPM)
calculate_rank_sums(E1$FPKM, E2$FPKM, E3$FPKM)
calculate_rank_sums(D1$FPKM, D2$FPKM, D3$FPKM)
calculate_rank_sums(P1$FPKM, P2$FPKM, P3$FPKM)
results_TPM <- rbind(
E = calculate_rank_sums(E1$TPM, E2$TPM, E3$TPM),
D = calculate_rank_sums(D1$TPM, D2$TPM, D3$TPM),
P = calculate_rank_sums(P1$TPM, P2$TPM, P3$TPM)
)
results_FPKM <- rbind(
E = calculate_rank_sums(E1$FPKM, E2$FPKM, E3$FPKM),
D = calculate_rank_sums(D1$FPKM, D2$FPKM, D3$FPKM),
P = calculate_rank_sums(P1$FPKM, P2$FPKM, P3$FPKM)
)
# Create the pander table
cat("Results for TPM:\n")
pander(results_TPM)
cat("\nResults for FPKM:\n")
pander(results_FPKM)
pander(results_TPM, main = "Results for TPM")
pander(results_FPKM, main = "Results for FPKM")
n(E1)
n(E1$gene_id)
length(E1$gene_id)
df_E <- cbind(E1$gene_id, E1$TPM, E2$TPM, E3$TPM)
View(df_E)
pca <- prcomp(t(df_E), scale=TRUE)
df_E <- cbind(E1$TPM, E2$TPM, E3$TPM)
rownames(df_E) <- E1$gene_id
df_E <- cbind(E1$TPM, E2$TPM, E3$TPM,
D1$TPM, D2$TPM, D3$TPM,
P1$TPM, P2$TPM, P3$TPM)
rownames(df_E) <- E1$gene_id
cilnames(df_E) <- c("E1", "E2", "E3",
"D1", "D2", "D3",
"P1", "P2", "P3")
colnames(df_E) <- c("E1", "E2", "E3",
"D1", "D2", "D3",
"P1", "P2", "P3")
df_master <- cbind(E1$TPM, E2$TPM, E3$TPM,
D1$TPM, D2$TPM, D3$TPM,
P1$TPM, P2$TPM, P3$TPM)
rownames(df_E) <- E1$gene_id
colnames(df_E) <- c("E1", "E2", "E3",
"D1", "D2", "D3",
"P1", "P2", "P3")
df_master <- cbind(E1$TPM, E2$TPM, E3$TPM,
D1$TPM, D2$TPM, D3$TPM,
P1$TPM, P2$TPM, P3$TPM)
rownames(df_master) <- E1$gene_id
colnames(df_master) <- c("E1", "E2", "E3",
"D1", "D2", "D3",
"P1", "P2", "P3")
View(df_master)
pca <- prcomp(t(df_master), scale=TRUE)
df_master[df_master == 0] <- 0.0001
pca <- prcomp(t(df_master), scale=TRUE)
df_master[df_master == 0] <- 0.0001
pca <- prcomp(t(df_master), scale=TRUE)
df_master <- cbind(E1$TPM, E2$TPM, E3$TPM,
D1$TPM, D2$TPM, D3$TPM,
P1$TPM, P2$TPM, P3$TPM)
rownames(df_master) <- E1$gene_id
colnames(df_master) <- c("E1", "E2", "E3",
"D1", "D2", "D3",
"P1", "P2", "P3")
df_master[as.logical(rowSums(df_master != 0)), ]
k <- df_master[as.logical(rowSums(df_master != 0)), ]
View(k)
df_master <- df_master[as.logical(rowSums(df_master != 0)), ]
pca <- prcomp(t(df_master), scale=TRUE)
plot(pca$x[,1], pca$x[,2])
pca.var <- pca$sdev^2
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
barplot(pca.var.per, main="Scree Plot", xlab="Principal Component", ylab="Percent Variation")
pca.data <- data.frame(Sample=rownames(pca$x),
X=pca$x[,1],
Y=pca$x[,2])
pca.data
ggplot(data=pca.data, aes(x=X, y=Y, label=Sample)) +
geom_text() +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("My PCA Graph")
## get the name of the top 10 measurements (genes) that contribute
## most to pc1.
loading_scores <- pca$rotation[,1]
gene_scores <- abs(loading_scores) ## get the magnitudes
gene_score_ranked <- sort(gene_scores, decreasing=TRUE)
top_10_genes <- names(gene_score_ranked[1:10])
top_10_genes ## show the names of the top 10 genes
pca$rotation[top_10_genes,1] ## show the scores (and +/- sign)
pca.var
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
barplot(pca.var.per, main="Scree Plot", xlab="Principal Component", ylab="Percent Variation")
pander(top_10_genes) ## show the names of the top 10 genes
top_10_genes
class(top_10_genes)
table(top_10_genes)
as.dataframe(top_10_genes)
as.data.frame(top_10_genes)
pander(as.data.frame(top_10_genes)) ## show the names of the top 10 genes
library(clusterProfiler)
library(org.Hs.eg.db)
library(AnnotationDbi)
library(clusterProfiler)
EvsD <- read.csv("condition_2_D_vs_1_E")
EvsD <- read.csv("condition_2_D_vs_1_E.csv")
DvsP <- read.csv("condition_3_P_vs_2_D.csv")
EvsD <- EvsD[EvsD$log2FoldChange > 0.5]
EvsD$log2FoldChange > 0.5
EvsD[EvsD$log2FoldChange > 0.5]
EvsD <- EvsD[EvsD$log2FoldChange > 0.5,]
View(EvsD)
GO_results <- enrichGO(gene = rownames(EvsD[EvsD$log2FoldChange > 0.5,]),
OrgDb = "org.Hs.eg.db",
keyType = "ENSEMBL",
on = "BP")
rownames(EvsD[EvsD$log2FoldChange > 0.5,])
EvsD <- read.csv("condition_2_D_vs_1_E.csv")
EvsD <- read.csv("condition_2_D_vs_1_E.csv")
EvsD <- read.csv("condition_2_D_vs_1_E.csv")
View(EvsD)
EvsD <- EvsD[EvsD$log2FoldChange > 0.5,]
EvsD <- read.csv("condition_2_D_vs_1_E.csv")
EvsD <- EvsD[EvsD$log2FoldChange > 0.5,]
rownames(EvsD) <- EvsD$Row.names
EvsD$Row.names
rownames(EvsD)
rownames(EvsD) <- EvsD$Row.names
EvsD <- read.csv("condition_2_D_vs_1_E.csv")
EvsD <- EvsD[EvsD$log2FoldChange > 0.5,]
EvsD <- read.csv("condition_2_D_vs_1_E.csv")
EvsD <- EvsD[EvsD$log2FoldChange > 0.5,]
top_10_genes
GO_results <- enrichGO(gene = top_10_genes,
OrgDb = "org.Hs.eg.db",
keyType = "ENSEMBL",
on = "BP")
top_10_genes
GO_results <- enrichGO(gene = c("ENSG00000107014"),
OrgDb = "org.Hs.eg.db",
keyType = "ENSEMBL",
on = "BP")
View(GO_results)
preview <- rbind(E1, E2, E3, D1, D2, D3, P1, P2, P3)
kable(preview)
library(knitr)
kable(preview)
setwd("~/GitHub/Research_Hunt/Results/genes")
options(repos = BiocManager::repositories())
library(tidyverse)
library(mosaic)
library(pander)
library(ggplot2)
library(ggfortify)
library(clusterProfiler)
library(org.Hs.eg.db)
library(AnnotationDbi)
library(DT)
BiocManager::install("DESeq2")
R.version.string
