mutate(phase = "D3")
P1 <- read.csv('13P-1_S28_L007.csv', header = TRUE)  %>%
mutate(phase = "P1")
P2 <- read.csv('13P-2_S31_L007.csv', header = TRUE)  %>%
mutate(phase = "P2")
P3 <- read.csv('13P-3_S34_L007.csv', header = TRUE)  %>%
mutate(phase = "P3")
#Append data
df_master <- cbind(E1$expected_count,
E2$expected_count, E3$expected_count,
D1$expected_count, D2$expected_count, ... = D3$expected_count,
P1$expected_count, P2$expected_count, P3$expected_count)
rownames(df_master) <- E1$gene_id
colnames(df_master) <- c("E1", "E2", "E3",
"D1", "D2", "D3",
"P1", "P2", "P3")
# Construct Cell count matrix
cts <- df_master <- df_master[as.logical(rowSums(df_master != 0)), ]
cts <- apply(cts, 2, floor)
# Conduct differentail gene Analysis
coldata <- read.csv('coldata.csv', header = TRUE, row.names = 1)
library("DESeq2")
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition)
featureData <- data.frame(gene=rownames(cts))
mcols(dds) <- DataFrame(mcols(dds), featureData)
dds$condition <- factor(dds$condition, levels = c("E","D","P"))
dds <- DESeq(dds)
res <- results(dds)
res <- res[order(res$pvalue),]
res <- results(dds, alpha=0.01)
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
sum(res$padj < 0.01, na.rm=TRUE)
summary(res)
resLFC <- lfcShrink(dds, coef="condition_D_vs_E", type="apeglm")
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = resLFC$Row.names,
mart = ensembl_m)
resLFC$Row.names
resLFC
resLFC$Row.names
# Load data
E1 <- read.csv('13E-1_S26_L007.csv', header = TRUE)  %>%
mutate(phase = "E1")
E2 <- read.csv('13E-2_S29_L007.csv', header = TRUE)  %>%
mutate(phase = "E2")
E3 <- read.csv('13E-3_S32_L007.csv', header = TRUE)  %>%
mutate(phase = "E3")
D1 <- read.csv('13D-1_S27_L007.csv', header = TRUE) %>%
mutate(phase = "D1")
D2 <- read.csv('13D-2_S30_L007.csv', header = TRUE) %>%
mutate(phase = "D2")
D3 <- read.csv('13D-3_S33_L007.csv', header = TRUE) %>%
mutate(phase = "D3")
P1 <- read.csv('13P-1_S28_L007.csv', header = TRUE)  %>%
mutate(phase = "P1")
P2 <- read.csv('13P-2_S31_L007.csv', header = TRUE)  %>%
mutate(phase = "P2")
P3 <- read.csv('13P-3_S34_L007.csv', header = TRUE)  %>%
mutate(phase = "P3")
#Append data
df_master <- cbind(E1$expected_count,
E2$expected_count, E3$expected_count,
D1$expected_count, D2$expected_count, ... = D3$expected_count,
P1$expected_count, P2$expected_count, P3$expected_count)
rownames(df_master) <- E1$gene_id
colnames(df_master) <- c("E1", "E2", "E3",
"D1", "D2", "D3",
"P1", "P2", "P3")
# Construct Cell count matrix
cts <- df_master <- df_master[as.logical(rowSums(df_master != 0)), ]
cts <- apply(cts, 2, floor)
# Conduct differentail gene Analysis
coldata <- read.csv('coldata.csv', header = TRUE, row.names = 1)
library("DESeq2")
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition)
featureData <- data.frame(gene=rownames(cts))
mcols(dds) <- DataFrame(mcols(dds), featureData)
dds$condition <- factor(dds$condition, levels = c("E","D","P"))
dds <- DESeq(dds)
dds <- DESeq(dds)
res <- results(dds)
res <- results(dds)
res <- res[order(res$pvalue),]
res <- results(dds, alpha=0.01)
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
sum(res$padj < 0.01, na.rm=TRUE)
summary(res)
sum(res$padj < 0.01, na.rm=TRUE)
summary(res)
resLFC <- lfcShrink(dds, coef="condition_D_vs_E", type="apeglm")
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = resLFC$Row.names,
mart = ensembl_m)
rownames(resLFC)
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = rownames(resLFC),
mart = ensembl_m)
rna_results <- merge(resLFC, hgnc_m, by.x = "Row.names", by.y = "ensembl_gene_id")
rna_results <- merge(resLFC, hgnc_m, by.x = "Row.names", by.y = "ensembl_gene_id")
# Check if there are row names
any(is.null(rownames(resLFC)))
# Check if row names are unique
any(duplicated(rownames(resLFC)))
resLFC
rna_results <- merge(resLFC, hgnc_m, by.x = "gene_id", by.y = "ensembl_gene_id")
View(resLFC)
resLFC
resLFC@rownames
resLFC$gene_id <- resLFC@rownames
rna_results <- merge(resLFC, hgnc_m, by.x = "Row.names", by.y = "ensembl_gene_id")
rna_results <- merge(resLFC, hgnc_m, by.x = "gene_id", by.y = "ensembl_gene_id")
resLFC$gene_id
hgnc_m$ensembl_gene_id
rna_results <- merge(resLFC, hgnc_m, by.x = "gene_id", by.y = "ensembl_gene_id")
resLFC_df <- as.data.frame(resLFC)
resLFC_df$gene_id <- rownames(resLFC_df)
rna_results <- merge(resLFC, hgnc_m, by.x = "gene_id", by.y = "ensembl_gene_id")
rna_results <- merge(resLFC_df, hgnc_m, by.x = "gene_id", by.y = "ensembl_gene_id")
rna_results
summary(resLFC)
rna_results
dds$condition <- factor(dds$condition, levels = c("E","D","P"))
dds <- DESeq(dds)
dds
res <- results(dds)
res
res <- res[order(res$padj),]
res
res <- results(dds, alpha = 0.01)
res
res05 <- results(dds, alpha=0.05)
summary(res05)
View(res05)
resLFC_df
resLFC_filtered_df <- resLFC_df %>%
filter(p.adjust < 0.05 & !is.na(p.adjust))
colnames(resLFC_df)
resLFC_filtered_df <- resLFC_df %>%
filter(padj < 0.05 & !is.na(padj))
resLFC_df
resLFC_df <- resLFC_df %>%
filter(padj < 0.05 & !is.na(padj))
resLFC_df
kable(rna_results)
# Shrink the LFC
resLFC <- lfcShrink(dds, coef="condition_D_vs_E", type="apeglm")
summary(resLFC)
# Annotate genes
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = rownames(resLFC),
mart = ensembl_m)
resLFC_df <- as.data.frame(resLFC)
resLFC_df <- resLFC_df %>%
filter(padj < 0.01 & !is.na(padj))
resLFC_df$gene_id <- rownames(resLFC_df)
rna_results <- merge(resLFC_df, hgnc_m, by.x = "gene_id", by.y = "ensembl_gene_id")
kable(rna_results)
plotMA(resLFC, ylim=c(-2,2))
hgnc_h <- getBM(filters = "hgnc_id",
attributes = c("hgnc_id", "entrezgene_id"),
values = rna_results$hgnc_id,
mart = ensembl_h)
ensembl_h <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl")
rna_results <- merge(rna_results, hgnc_h, by.x = "hgnc_id", by.y = "hgnc_id")
# Shrink the LFC
resLFC <- lfcShrink(dds, coef="condition_D_vs_E", type="apeglm")
# Shrink the LFC
resLFC <- lfcShrink(dds, coef="condition_D_vs_E", type="apeglm")
summary(resLFC)
hgnc_h <- getBM(filters = "hgnc_id",
attributes = c("hgnc_id", "entrezgene_id"),
values = rna_results$hgnc_id,
mart = ensembl_h)
rna_results <- merge(rna_results, hgnc_h, by.x = "hgnc_id", by.y = "hgnc_id")
kable(rna_results)
rna_results
View(rna_results)
kable(rna_results)
setwd("~/GitHub/Research_Hunt/Summary markdonw")
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
# contructing dds dataframe from cts and coldata
# BiocManager::install("apeglm")
options(repos = BiocManager::repositories())
library(kableExtra)
library(tidyverse)
library(mosaic)
library(pander)
library(ggplot2)
library(ggfortify)
library(clusterProfiler)
library(org.Hs.eg.db)
library(AnnotationDbi)
library(DT)
library(DESeq2)
library(ggplot2)
library(biomaRt)
library(pathview)
library(STRINGdb)
library(png)
library(grid)
library(plotly)
library(apeglm)
library(biomaRt)
library(pathview)
library(STRINGdb)
options(repos = BiocManager::repositories())
# Load data
E1 <- read.csv('13E-1_S26_L007.csv', header = TRUE)  %>%
mutate(phase = "E1")
E2 <- read.csv('13E-2_S29_L007.csv', header = TRUE)  %>%
mutate(phase = "E2")
E3 <- read.csv('13E-3_S32_L007.csv', header = TRUE)  %>%
mutate(phase = "E3")
D1 <- read.csv('13D-1_S27_L007.csv', header = TRUE) %>%
mutate(phase = "D1")
D2 <- read.csv('13D-2_S30_L007.csv', header = TRUE) %>%
mutate(phase = "D2")
D3 <- read.csv('13D-3_S33_L007.csv', header = TRUE) %>%
mutate(phase = "D3")
P1 <- read.csv('13P-1_S28_L007.csv', header = TRUE)  %>%
mutate(phase = "P1")
P2 <- read.csv('13P-2_S31_L007.csv', header = TRUE)  %>%
mutate(phase = "P2")
P3 <- read.csv('13P-3_S34_L007.csv', header = TRUE)  %>%
mutate(phase = "P3")
#Append data
df_master <- cbind(E1$expected_count,
E2$expected_count, E3$expected_count,
D1$expected_count, D2$expected_count, ... = D3$expected_count,
P1$expected_count, P2$expected_count, P3$expected_count)
rownames(df_master) <- E1$gene_id
colnames(df_master) <- c("E1", "E2", "E3",
"D1", "D2", "D3",
"P1", "P2", "P3")
# Construct Cell count matrix
cts <- df_master <- df_master[as.logical(rowSums(df_master != 0)), ]
cts <- apply(cts, 2, floor)
# Conduct differentail gene Analysis
coldata <- read.csv('coldata.csv', header = TRUE, row.names = 1)
library("DESeq2")
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition)
featureData <- data.frame(gene=rownames(cts))
mcols(dds) <- DataFrame(mcols(dds), featureData)
dds$condition <- factor(dds$condition, levels = c("E","D","P"))
dds <- DESeq(dds)
res <- results(dds)
res <- res[order(res$padj),]
res <- results(dds, alpha = 0.01)
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
ensembl_h <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl")
sum(res$padj < 0.01, na.rm=TRUE)
summary(res)
#E vs D
# res <- results(dds, contrast=c("condition", "E", "D"))
# res_filtered <- res[!is.na(res$padj) & res$padj <= 0.05, ]
# summary(res_filtered)
# D P
# res <- results(dds, contrast=c("condition","D","P"))
# res_filtered <- res[!is.na(res$padj) & res$padj <= 0.05, ]
# summary(res_filtered)
# E P
# res <- results(dds, contrast=c("condition","E","P"))
# res_filtered <- res[!is.na(res$padj) & res$padj <= 0.05, ]
# summary(res_filtered)
# Shrink the LFC
resLFC <- lfcShrink(dds, coef="condition_D_vs_E", type="apeglm")
summary(resLFC)
# Annotate genes
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = rownames(resLFC),
mart = ensembl_m)
resLFC_df <- as.data.frame(resLFC)
resLFC_df <- resLFC_df %>%
filter(padj < 0.01 & !is.na(padj))
resLFC_df$gene_id <- rownames(resLFC_df)
rna_results <- merge(resLFC_df,
hgnc_m,
by.x = "gene_id",
by.y = "ensembl_gene_id")
hgnc_h <- getBM(filters = "hgnc_id",
attributes = c("hgnc_id", "entrezgene_id"),
values = rna_results$hgnc_id,
mart = ensembl_h)
rna_results_DE <- merge(rna_results, hgnc_h, by.x = "hgnc_id", by.y = "hgnc_id")
kable(rna_results_DE)
# MA plot
plotMA(resLFC, ylim=c(-2,2))
resLFC <- lfcShrink(dds, coef="condition_P_vs_E", type="apeglm")
summary(resLFC)
# Annotate genes
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = rownames(resLFC),
mart = ensembl_m)
resLFC_df <- as.data.frame(resLFC)
resLFC_df <- resLFC_df %>%
filter(padj < 0.01 & !is.na(padj))
resLFC_df$gene_id <- rownames(resLFC_df)
rna_results <- merge(resLFC_df,
hgnc_m,
by.x = "gene_id",
by.y = "ensembl_gene_id")
hgnc_h <- getBM(filters = "hgnc_id",
attributes = c("hgnc_id", "entrezgene_id"),
values = rna_results$hgnc_id,
mart = ensembl_h)
rna_results_EP <- merge(rna_results, hgnc_h, by.x = "hgnc_id", by.y = "hgnc_id")
kable(rna_results_EP)
plotMA(resLFC, ylim=c(-2,2))
coldata <- read.csv('coldata.csv', header = TRUE, row.names = 1)
library("DESeq2")
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition)
featureData <- data.frame(gene=rownames(cts))
mcols(dds) <- DataFrame(mcols(dds), featureData)
dds$condition <- factor(dds$condition, levels = c("D","E","P"))
dds <- DESeq(dds)
res <- results(dds)
res <- res[order(res$pvalue),]
res <- results(dds, alpha=0.01)
resLFC <- lfcShrink(dds, coef="condition_P_vs_D", type="apeglm")
summary(resLFC)
# Annotate genes
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = rownames(resLFC),
mart = ensembl_m)
resLFC_df <- as.data.frame(resLFC)
resLFC_df <- resLFC_df %>%
filter(padj < 0.01 & !is.na(padj))
resLFC_df$gene_id <- rownames(resLFC_df)
rna_results <- merge(resLFC_df,
hgnc_m,
by.x = "gene_id",
by.y = "ensembl_gene_id")
hgnc_h <- getBM(filters = "hgnc_id",
attributes = c("hgnc_id", "entrezgene_id"),
values = rna_results$hgnc_id,
mart = ensembl_h)
rna_results_DP <- merge(rna_results, hgnc_h, by.x = "hgnc_id", by.y = "hgnc_id")
kable(rna_results_DP)
plotMA(resLFC, ylim=c(-2,2))
library("IHW")
resIHW <- results(dds, filterFun=ihw)
summary(resIHW)
sum(resIHW$padj < 0.1, na.rm=TRUE)
metadata(resIHW)$ihwResult
plotCounts(dds, gene=which.min(res$padj), intgroup="condition")
ntd <- normTransform(dds)
library("vsn")
meanSdPlot(assay(ntd))
d <- plotCounts(dds, gene=which.min(res$padj), intgroup="condition",
returnData=TRUE)
library("ggplot2")
ggplot(d, aes(x=condition, y=count)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
scale_y_log10(breaks=c(25,100,400))
View(rna_results_DE)
rna_results_PD <- merge(rna_results, hgnc_h, by.x = "hgnc_id", by.y = "hgnc_id")
gene_ids_DE <- rna_results_DE$gene_id
gene_ids_EP <- rna_results_EP$gene_id
gene_ids_PD <- rna_results_PD$gene_id
# Find intersection of gene_ids among the three data frames
common_gene_ids <- intersect(intersect(gene_ids_DE, gene_ids_EP), gene_ids_PD)
# View the common gene ids
common_gene_ids
# Pairwise intersections
intersect_DE_EP <- intersect(gene_ids_DE, gene_ids_EP)
intersect_DE_PD <- intersect(gene_ids_DE, gene_ids_PD)
intersect_EP_PD <- intersect(gene_ids_EP, gene_ids_PD)
intersect_DE_EP
intersect_DE_PD
intersect_EP_PD
# View the common gene ids
common_gene_ids
rna_results_DE
View(rna_results_DE)
dds
which.min(res$padj)
View(resLFC)
res
View(res)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
kable(rna_results_DE)
# contructing dds dataframe from cts and coldata
# BiocManager::install("apeglm")
options(repos = BiocManager::repositories())
library(kableExtra)
library(tidyverse)
library(mosaic)
library(pander)
library(ggplot2)
library(ggfortify)
library(clusterProfiler)
library(org.Hs.eg.db)
library(AnnotationDbi)
library(DT)
library(DESeq2)
library(ggplot2)
library(biomaRt)
library(pathview)
library(STRINGdb)
library(png)
library(grid)
library(plotly)
library(apeglm)
library(biomaRt)
library(pathview)
library(STRINGdb)
options(repos = BiocManager::repositories())
# Load data
E1 <- read.csv('13E-1_S26_L007.csv', header = TRUE)  %>%
mutate(phase = "E1")
E2 <- read.csv('13E-2_S29_L007.csv', header = TRUE)  %>%
mutate(phase = "E2")
E3 <- read.csv('13E-3_S32_L007.csv', header = TRUE)  %>%
mutate(phase = "E3")
D1 <- read.csv('13D-1_S27_L007.csv', header = TRUE) %>%
mutate(phase = "D1")
D2 <- read.csv('13D-2_S30_L007.csv', header = TRUE) %>%
mutate(phase = "D2")
D3 <- read.csv('13D-3_S33_L007.csv', header = TRUE) %>%
mutate(phase = "D3")
P1 <- read.csv('13P-1_S28_L007.csv', header = TRUE)  %>%
mutate(phase = "P1")
P2 <- read.csv('13P-2_S31_L007.csv', header = TRUE)  %>%
mutate(phase = "P2")
P3 <- read.csv('13P-3_S34_L007.csv', header = TRUE)  %>%
mutate(phase = "P3")
#Append data
df_master <- cbind(E1$expected_count,
E2$expected_count, E3$expected_count,
D1$expected_count, D2$expected_count, ... = D3$expected_count,
P1$expected_count, P2$expected_count, P3$expected_count)
rownames(df_master) <- E1$gene_id
colnames(df_master) <- c("E1", "E2", "E3",
"D1", "D2", "D3",
"P1", "P2", "P3")
# Construct Cell count matrix
cts <- df_master <- df_master[as.logical(rowSums(df_master != 0)), ]
cts <- apply(cts, 2, floor)
# Conduct differentail gene Analysis
coldata <- read.csv('coldata.csv', header = TRUE, row.names = 1)
library("DESeq2")
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition)
featureData <- data.frame(gene=rownames(cts))
mcols(dds) <- DataFrame(mcols(dds), featureData)
dds$condition <- factor(dds$condition, levels = c("E","D","P"))
dds <- DESeq(dds)
res <- results(dds)
res <- res[order(res$padj),]
res <- results(dds, alpha = 0.01)
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
ensembl_h <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl")
# Shrink the LFC
resLFC <- lfcShrink(dds, coef="condition_D_vs_E", type="apeglm")
summary(resLFC)
# Annotate genes
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = rownames(resLFC),
mart = ensembl_m)
resLFC_df <- as.data.frame(resLFC)
resLFC_df <- resLFC_df %>%
filter(padj < 0.01 & !is.na(padj))
resLFC_df$gene_id <- rownames(resLFC_df)
rna_results <- merge(resLFC_df,
hgnc_m,
by.x = "gene_id",
by.y = "ensembl_gene_id")
hgnc_h <- getBM(filters = "hgnc_id",
attributes = c("hgnc_id", "entrezgene_id"),
values = rna_results$hgnc_id,
mart = ensembl_h)
rna_results_DE <- merge(rna_results, hgnc_h, by.x = "hgnc_id", by.y = "hgnc_id")
kable(rna_results_DE)
# MA plot
plotMA(resLFC, ylim=c(-2,2))
kable(rna_results_DE)
