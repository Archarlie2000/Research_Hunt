res0.05_ED <- as.data.frame(res0.05_ED)
rna_results <- merge(res0.05_ED, hgnc_m,
by.x = "RowNamesColumn",
by.y = "ensembl_gene_id")
View(rna_results)
ensembl_h <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl")
hgnc_h <- getBM(filters = "hgnc_id",
attributes = c("hgnc_id", "entrezgene_id"),
values = rna_results$hgnc_id,
mart = ensembl_h)
hgnc_duplicated <- hgnc_h[duplicated(hgnc_h$hgnc_id),]
hgnc_h <- hgnc_h[!duplicated(hgnc_h$hgnc_id),]
rna_results <- merge(rna_results, hgnc_h, by.x = "hgnc_id", by.y = "hgnc_id")
# Create an ordered list of the rna_results
rna_list <- rna_results[order(rna_results$log2FoldChange, decreasing = TRUE),]
rna_list <- rna_list[!is.na(rna_list$entrezgene_id),c("entrezgene_id", "log2FoldChange")]
# Distill rna_results list into simplified gene_list
gene_list <- rna_list$log2FoldChange
names(gene_list) <- rna_list$entrezgene_id
pathview(gene.data  = genes,
pathway.id = pathway.id,
species    = "hsa",
plot.mode  = "none")
keggr <- enrichKEGG(gene = names(gene_list),
organism = "hsa",
keyType = "ncbi-geneid",
pvalueCutoff = 0.05)
keggr <- setReadable(keggr, OrgDb = org.Hs.eg.db, keyType="ENTREZID")
pathway_list <- keggr$ID[keggr$qvalue < 0.05]
pathview(gene.data  = genes,
pathway.id = pathway.id,
species    = "hsa",
plot.mode  = "none")
pathview(gene.data  = gene_list,
pathway.id = pathway.pathway_list,
species    = "hsa",
plot.mode  = "none")
pathview(gene.data  = gene_list,
pathway.id = pathway_list,
species    = "hsa",
plot.mode  = "none")
pathway_list
?pathview()
options(repos = BiocManager::repositories())
library(tidyverse)
library(mosaic)
library(pander)
library(ggplot2)
library(ggfortify)
library(clusterProfiler)
library(org.Hs.eg.db)
library(AnnotationDbi)
library(DT)
library(DESeq2)
library(ggplot2)
library(biomaRt)
library(pathview)
library(STRINGdb)
options(repos = BiocManager::repositories())
E1 <- read.csv('13E-1_S26_L007.csv', header = TRUE)  %>%
mutate(phase = "E1")
E2 <- read.csv('13E-2_S29_L007.csv', header = TRUE)  %>%
mutate(phase = "E2")
E3 <- read.csv('13E-3_S32_L007.csv', header = TRUE)  %>%
mutate(phase = "E3")
D1 <- read.csv('13D-1_S27_L007.csv', header = TRUE) %>%
mutate(phase = "D1")
D2 <- read.csv('13D-2_S30_L007.csv', header = TRUE) %>%
mutate(phase = "D2")
D3 <- read.csv('13D-3_S33_L007.csv', header = TRUE) %>%
mutate(phase = "D3")
P1 <- read.csv('13P-1_S28_L007.csv', header = TRUE)  %>%
mutate(phase = "P1")
P2 <- read.csv('13P-2_S31_L007.csv', header = TRUE)  %>%
mutate(phase = "P2")
P3 <- read.csv('13P-3_S34_L007.csv', header = TRUE)  %>%
mutate(phase = "P3")
preview <- rbind(E1[1:10, ], E2[1:10, ], E3[1:10, ],
D1[1:10, ], D2[1:10, ], D3[1:10, ],
P1[1:10, ], P2[1:10, ], P3[1:10, ])[,-2]
datatable(preview, caption = "preview of raw data")
calculate_rank_sums <- function(A, B, C) {
data <- cbind(A, B, C)
# 1. Calculate the difference
diff_A <- abs(A - (B + C) / 2)
diff_B <- abs(B - (A + C) / 2)
diff_C <- abs(C - (A + B) / 2)
diff_data <- cbind(diff_A, diff_B, diff_C)
# 2. Rank the differences
rank_data <- t(apply(diff_data, 1, function(x) rank(-x)))
return(colSums(rank_data))
}
results_TPM <- rbind(
E = calculate_rank_sums(E1$TPM, E2$TPM, E3$TPM),
D = calculate_rank_sums(D1$TPM, D2$TPM, D3$TPM),
P = calculate_rank_sums(P1$TPM, P2$TPM, P3$TPM)
)
results_FPKM <- rbind(
E = calculate_rank_sums(E1$FPKM, E2$FPKM, E3$FPKM),
D = calculate_rank_sums(D1$FPKM, D2$FPKM, D3$FPKM),
P = calculate_rank_sums(P1$FPKM, P2$FPKM, P3$FPKM)
)
pander(results_TPM, caption = "Results for TPM")
pander(results_FPKM, caption = "Results for FPKM")
df_master <- cbind(E1$expected_count,
E2$expected_count, E3$expected_count,
D1$expected_count, D2$expected_count, D3$expected_count,
P1$expected_count, P2$expected_count, P3$expected_count)
rownames(df_master) <- E1$gene_id
colnames(df_master) <- c("E1", "E2", "E3",
"D1", "D2", "D3",
"P1", "P2", "P3")
df_master <- df_master[as.logical(rowSums(df_master != 0)), ]
pca <- prcomp(t(df_master), scale=TRUE)
pca.var <- pca$sdev^2
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
pca.data <- data.frame(Sample=rownames(pca$x),
X=pca$x[,1],
Y=pca$x[,2])
ggplot(data = pca.data, aes(x = X, y = Y, label = Sample)) +
geom_text() +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("My PCA Graph")
## get the name of the top 10 measurements (genes) that contribute
## most to pc1.
loading_scores <- pca$rotation[,1]
gene_scores <- abs(loading_scores) ## get the magnitudes
gene_score_ranked <- sort(gene_scores, decreasing=TRUE)
top_10_genes <- names(gene_score_ranked[1:10])
df_master <- df_master[, -c(6, 8)]
datatable(df_master, caption = "Clean data")
df_master$E1 <- as.integer(round(as.numeric(unlist(df_master$E1))))
df_master$E2 <- as.integer(round(as.numeric(unlist(df_master$E2))))
df_master$E3 <- as.integer(round(as.numeric(unlist(df_master$E3))))
df_master$D1 <- as.integer(round(as.numeric(unlist(df_master$D1))))
df_master$D2 <- as.integer(round(as.numeric(unlist(df_master$D2))))
df_master$P1 <- as.integer(round(as.numeric(unlist(df_master$P1))))
df_master$P3 <- as.integer(round(as.numeric(unlist(df_master$P3))))
df_master <- cbind(E1$expected_count,
E2$expected_count, E3$expected_count,
D1$expected_count, D2$expected_count, D3$expected_count,
P1$expected_count, P2$expected_count, P3$expected_count)
rownames(df_master) <- E1$gene_id
colnames(df_master) <- c("E1", "E2", "E3",
"D1", "D2", "D3",
"P1", "P2", "P3")
df_master <- df_master[as.logical(rowSums(df_master != 0)), ]
pca <- prcomp(t(df_master), scale=TRUE)
pca.var <- pca$sdev^2
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
pca.data <- data.frame(Sample=rownames(pca$x),
X=pca$x[,1],
Y=pca$x[,2])
ggplot(data = pca.data, aes(x = X, y = Y, label = Sample)) +
geom_text() +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("My PCA Graph")
loading_scores <- pca$rotation[,1]
gene_scores <- abs(loading_scores) ## get the magnitudes
gene_score_ranked <- sort(gene_scores, decreasing=TRUE)
top_10_genes <- names(gene_score_ranked[1:10])
df_master <- df_master[, -c(6, 8)]
datatable(df_master, caption = "Clean data")
df_master$E1 <- as.integer(round(as.numeric(unlist(df_master$E1))))
df_master$E1 <- as.integer(round(as.numeric(df_master$E1)))
type(df_master)
df_master <- cbind(E1$expected_count,
E2$expected_count, E3$expected_count,
D1$expected_count, D2$expected_count, D3$expected_count,
P1$expected_count, P2$expected_count, P3$expected_count)
rownames(df_master) <- E1$gene_id
colnames(df_master) <- c("E1", "E2", "E3",
"D1", "D2", "D3",
"P1", "P2", "P3")
df_master <- df_master[as.logical(rowSums(df_master != 0)), ]
View(df_master)
df_master <- df_master[, -c(6, 8)]
df_master <- as.data.frame(df_master)
df_master$E1 <- as.integer(round(as.numeric(unlist(df_master$E1))))
setwd("~/GitHub/Research_Hunt/Results/genes")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
# install.packages("tidyverse")
# install.packages("mosaic")
# install.packages("pander")
# install.packages("ggplot2")
# install.packages("ggfortify")
# install.packages("DT")
# if (!requireNamespace("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
#
# BiocManager::install("clusterProfiler")
# BiocManager::install("org.Hs.eg.db")
# BiocManager::install("AnnotationDbi")
# BiocManager::install("DESeq2")
# BiocManager::install("biomaRt")
# BiocManager::install("pathview")
# BiocManager::install("STRINGdb")
options(repos = BiocManager::repositories())
library(tidyverse)
library(mosaic)
library(pander)
library(ggplot2)
library(ggfortify)
library(clusterProfiler)
library(org.Hs.eg.db)
library(AnnotationDbi)
library(DT)
library(DESeq2)
library(ggplot2)
library(biomaRt)
library(pathview)
library(STRINGdb)
options(repos = BiocManager::repositories())
# Chunk 3
E1 <- read.csv('13E-1_S26_L007.csv', header = TRUE)  %>%
mutate(phase = "E1")
E2 <- read.csv('13E-2_S29_L007.csv', header = TRUE)  %>%
mutate(phase = "E2")
E3 <- read.csv('13E-3_S32_L007.csv', header = TRUE)  %>%
mutate(phase = "E3")
D1 <- read.csv('13D-1_S27_L007.csv', header = TRUE) %>%
mutate(phase = "D1")
D2 <- read.csv('13D-2_S30_L007.csv', header = TRUE) %>%
mutate(phase = "D2")
D3 <- read.csv('13D-3_S33_L007.csv', header = TRUE) %>%
mutate(phase = "D3")
P1 <- read.csv('13P-1_S28_L007.csv', header = TRUE)  %>%
mutate(phase = "P1")
P2 <- read.csv('13P-2_S31_L007.csv', header = TRUE)  %>%
mutate(phase = "P2")
P3 <- read.csv('13P-3_S34_L007.csv', header = TRUE)  %>%
mutate(phase = "P3")
preview <- rbind(E1[1:10, ], E2[1:10, ], E3[1:10, ],
D1[1:10, ], D2[1:10, ], D3[1:10, ],
P1[1:10, ], P2[1:10, ], P3[1:10, ])[,-2]
datatable(preview, caption = "preview of raw data")
# Chunk 4
calculate_rank_sums <- function(A, B, C) {
data <- cbind(A, B, C)
# 1. Calculate the difference
diff_A <- abs(A - (B + C) / 2)
diff_B <- abs(B - (A + C) / 2)
diff_C <- abs(C - (A + B) / 2)
diff_data <- cbind(diff_A, diff_B, diff_C)
# 2. Rank the differences
rank_data <- t(apply(diff_data, 1, function(x) rank(-x)))
return(colSums(rank_data))
}
results_TPM <- rbind(
E = calculate_rank_sums(E1$TPM, E2$TPM, E3$TPM),
D = calculate_rank_sums(D1$TPM, D2$TPM, D3$TPM),
P = calculate_rank_sums(P1$TPM, P2$TPM, P3$TPM)
)
results_FPKM <- rbind(
E = calculate_rank_sums(E1$FPKM, E2$FPKM, E3$FPKM),
D = calculate_rank_sums(D1$FPKM, D2$FPKM, D3$FPKM),
P = calculate_rank_sums(P1$FPKM, P2$FPKM, P3$FPKM)
)
pander(results_TPM, caption = "Results for TPM")
pander(results_FPKM, caption = "Results for FPKM")
# Chunk 5
df_master <- cbind(E1$expected_count,
E2$expected_count, E3$expected_count,
D1$expected_count, D2$expected_count, D3$expected_count,
P1$expected_count, P2$expected_count, P3$expected_count)
rownames(df_master) <- E1$gene_id
colnames(df_master) <- c("E1", "E2", "E3",
"D1", "D2", "D3",
"P1", "P2", "P3")
df_master <- df_master[as.logical(rowSums(df_master != 0)), ]
pca <- prcomp(t(df_master), scale=TRUE)
pca.var <- pca$sdev^2
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
pca.data <- data.frame(Sample=rownames(pca$x),
X=pca$x[,1],
Y=pca$x[,2])
ggplot(data = pca.data, aes(x = X, y = Y, label = Sample)) +
geom_text() +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("My PCA Graph")
## get the name of the top 10 measurements (genes) that contribute
## most to pc1.
loading_scores <- pca$rotation[,1]
gene_scores <- abs(loading_scores) ## get the magnitudes
gene_score_ranked <- sort(gene_scores, decreasing=TRUE)
top_10_genes <- names(gene_score_ranked[1:10])
df_master <- df_master[, -c(6, 8)]
datatable(df_master, caption = "Clean data")
df_master <- as.data.frame(df_master)
df_master$E1 <- as.integer(round(as.numeric(unlist(df_master$E1))))
df_master$E2 <- as.integer(round(as.numeric(unlist(df_master$E2))))
df_master$E3 <- as.integer(round(as.numeric(unlist(df_master$E3))))
df_master$D1 <- as.integer(round(as.numeric(unlist(df_master$D1))))
df_master$D2 <- as.integer(round(as.numeric(unlist(df_master$D2))))
df_master$P1 <- as.integer(round(as.numeric(unlist(df_master$P1))))
df_master$P3 <- as.integer(round(as.numeric(unlist(df_master$P3))))
# Chunk 6
## prepare DEG
countData <- df_master[, c(1,2,3,4,5)]
countData <- countData[as.logical(rowSums(countData != 0)), ]
countData <- as.data.frame(countData)
# Constructing levels
colData <- t(data.frame(
E1 = "Estrus",
E2 = "Estrus",
E3 = "Estrus",
D1 = "Diapause",
D2 = "Diapause"
))
colnames(colData) <- c("condition")
## DEG Analysis
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ condition)
## Setting level
dds$condition <- factor(dds$condition, levels = c("Estrus","Diapause"))
dds <- DESeq(dds)
# Remove low frequency count
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
# Explore Results ----------------
res <- results(dds)
res0.05_ED <- results(dds, alpha = 0.05)
# Chunk 7
# MA plot
plotMA(res0.05_ED)
d <- plotCounts(dds, gene=which.min(res0.05_ED$padj),
intgroup="condition",
returnData=TRUE)
ggplot(d, aes(x=condition, y=count)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
scale_y_log10(breaks=c(25,100,400))
# Chunk 8
## prepare DEG
countData <- df_master[, c(4,5,6,7)]
countData <- countData[as.logical(rowSums(countData != 0)), ]
countData <- as.data.frame(countData)
# Constructing levels
colData <- t(data.frame(
D1 = "Diapause",
D2 = "Diapause",
P1 = "Pregnancy",
P3 = "Pregnancy"
))
colnames(colData) <- c("condition")
## DEG Analysis
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ condition)
## Setting level
dds$condition <- factor(dds$condition, levels = c("Diapause","Pregnancy"))
dds <- DESeq(dds)
# Remove low frequency count
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
# Explore Results ----------------
res <- results(dds)
res0.05_DP <- results(dds, alpha = 0.05)
# Chunk 9
# MA plot
plotMA(res0.05_DP)
d <- plotCounts(dds, gene=which.min(res0.05_DP$padj),
intgroup="condition",
returnData=TRUE)
ggplot(d, aes(x=condition, y=count)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
scale_y_log10(breaks=c(25,100,400))
# Chunk 10
## prepare DEG
countData <- df_master[, c(1,2,3,6,7)]
countData <- countData[as.logical(rowSums(countData != 0)), ]
countData <- as.data.frame(countData)
# Constructing levels
colData <- t(data.frame(
E1 = "Estrus",
E2 = "Estrus",
E3 = "Estrus",
P1 = "Pregnancy",
P3 = "Pregnancy"
))
colnames(colData) <- c("condition")
## DEG Analysis
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ condition)
## Setting level
dds$condition <- factor(dds$condition, levels = c("Estrus","Pregnancy"))
dds <- DESeq(dds)
# Remove low frequency count
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
# Explore Results ----------------
res <- results(dds)
res0.05_EP <- results(dds, alpha = 0.05)
# Chunk 11
# MA plot
plotMA(res0.05_EP)
d <- plotCounts(dds, gene=which.min(res0.05_EP$padj),
intgroup="condition",
returnData=TRUE)
ggplot(d, aes(x=condition, y=count)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
scale_y_log10(breaks=c(25,100,400))
datatable(res0.05_EP, caption = "Deseq2 reuslt")
# Chunk 12
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
res0.05_ED$RowNamesColumn <- row.names(res0.05_ED)
res0.05_ED <- as.data.frame(res0.05_ED)
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = row.names(res0.05_ED),
mart = ensembl_m)
rna_results <- merge(res0.05_ED, hgnc_m,
by.x = "RowNamesColumn",
by.y = "ensembl_gene_id")
ensembl_h <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl")
hgnc_h <- getBM(filters = "hgnc_id",
attributes = c("hgnc_id", "entrezgene_id"),
values = rna_results$hgnc_id,
mart = ensembl_h)
hgnc_duplicated <- hgnc_h[duplicated(hgnc_h$hgnc_id),]
hgnc_h <- hgnc_h[!duplicated(hgnc_h$hgnc_id),]
rna_results <- merge(rna_results, hgnc_h, by.x = "hgnc_id", by.y = "hgnc_id")
# Create an ordered list of the rna_results
rna_list <- rna_results[order(rna_results$log2FoldChange, decreasing = TRUE),]
rna_list <- rna_list[!is.na(rna_list$entrezgene_id),c("entrezgene_id", "log2FoldChange")]
# Distill rna_results list into simplified gene_list
gene_list <- rna_list$log2FoldChange
names(gene_list) <- rna_list$entrezgene_id
keggr <- enrichKEGG(gene = names(gene_list),
organism = "hsa",
keyType = "ncbi-geneid",
pvalueCutoff = 0.05)
keggr <- setReadable(keggr, OrgDb = org.Hs.eg.db, keyType="ENTREZID")
pathway_list <- keggr$ID[keggr$qvalue < 0.05]
# pathview(gene.data  = gene_list,
#          pathway.id = pathway_list,
#          species    = "hsa",
#          plot.mode  = "none")
datatable(res0.05_EP, caption = "Deseq2 reuslt")
as.data.frame(res0.05_EP)
datatable(as.data.frame(res0.05_EP), caption = "Deseq2 reuslt")
metadata(res0.05_EP)$alpha
# Explore Results ----------------
res <- results(dds)
res0.05_EP <- results(dds, alpha = 0.05)
datatable(as.data.frame(res0.05_EP), caption = "Deseq2 reuslt")
## prepare DEG
countData <- df_master[, c(1,2,3,6,7)]
countData <- countData[as.logical(rowSums(countData != 0)), ]
countData <- as.data.frame(countData)
# Constructing levels
colData <- t(data.frame(
E1 = "Estrus",
E2 = "Estrus",
E3 = "Estrus",
P1 = "Pregnancy",
P3 = "Pregnancy"
))
colnames(colData) <- c("condition")
## DEG Analysis
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ condition)
dds$condition <- factor(dds$condition, levels = c("Estrus","Pregnancy"))
dds <- DESeq(dds)
# Remove low frequency count
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
# Explore Results ----------------
res <- results(dds)
res0.05_EP <- results(dds, alpha = 0.05)
datatable(as.data.frame(res0.05_EP), caption = "Deseq2 reuslt")
res0.05_EP <- results(dds, alpha = 0.005)
datatable(as.data.frame(res0.05_EP), caption = "Deseq2 reuslt")
res0.05_EP <- results(dds, alpha = 0.0005)
res0.05_EP <- results(dds, alpha = 0.0005)
datatable(as.data.frame(res0.05_EP), caption = "Deseq2 reuslt")
type(res0.05_EP)
plotMA(as.data.frame(res0.05_EP))
summary(res0.05_EP)
res0.05_EP <- results(dds, alpha = 0.05)
summary(res0.05_EP)
res0.05_EP <- results(dds, alpha = 0.005)
summary(res0.05_EP)
res0.05_EP <- results(dds, alpha = 0.05)
# MA plot
plotMA(res0.05_EP)
res0.05_EP <- results(dds, alpha = 0.005)
# MA plot
plotMA(res0.05_EP)
View(as.data.frame(res0.05_EP))
res0.05_EP <- as.data.frame(res0.05_EP) %>% mutate(
filter(pradj < 0.05)
)
res0.05_EP <- as.data.frame(res0.05_EP) %>% mutate(
filter(padj < 0.05)
)
res0.05_EP <- as.data.frame(res0.05_EP) %>%
filter(padj < 0.05)
datatable(res0.05_EP, caption = "Deseq2 reuslt")
