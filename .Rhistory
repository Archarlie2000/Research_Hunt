"hsa00051", "hsa04931", "hsa05230", "hsa05165", "hsa04310",
"hsa04810", "hsa04072", "hsa04146", "hsa04935")
dfff2 <- list("hsa00564", "hsa00561", "hsa04216", "hsa01230",
"hsa04814", "hsa04110", "hsa00062", "hsa04512")
diff1 <- list("hsa04151", "hsa04010", "hsa01250", "hsa01521", "hsa04015",
"hsa00564", "hsa00520", "hsa05215", "hsa05231", "hsa04510",
"hsa04152", "hsa05205", "hsa04020", "hsa04066", "hsa04512",
"hsa00051", "hsa04931", "hsa05230", "hsa05165", "hsa04310",
"hsa04810", "hsa04072", "hsa04146", "hsa04935")
diff2 <- list("hsa00564", "hsa00561", "hsa04216", "hsa01230",
"hsa04814", "hsa04110", "hsa00062", "hsa04512")
common_elements <- intersect(diff1, diff2)
View(common_elements)
common_elements
# Load dataset
rna_results <- read.csv("condition_2_D_vs_1_E.csv", header=TRUE, row.names=1)
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = rna_results$Row.names,
mart = ensembl_m)
# Merge gen names to gen ID
rna_results <- merge(rna_results, hgnc_m, by.x = "Row.names", by.y = "ensembl_gene_id")
# Drop all empty rows and anything not significant
# Drop all the wierd stuffs like N/A or blanks
rna_results <- rna_results[rna_results$pvalue < 0.05,]
rna_results <- rna_results[!apply(rna_results == "", 1, any), ,]
rna_results <- rna_results[!is.na(rna_results$pvalue),]
rna_results <- rna_results[!is.na(rna_results$hgnc_id),]
#write.csv(rna_results, "condition_2_D_vs_1_E_gen.csv")
# Convert HGNC IDs into EntrezGene IDs
ensembl_h <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl")
hgnc_h <- getBM(filters = "hgnc_id",
attributes = c("hgnc_id", "entrezgene_id"),
values = rna_results$hgnc_id,
mart = ensembl_h)
hgnc_duplicated <- hgnc_h[duplicated(hgnc_h$hgnc_id),]
hgnc_h <- hgnc_h[!duplicated(hgnc_h$hgnc_id),]
rna_results <- merge(rna_results, hgnc_h, by.x = "hgnc_id", by.y = "hgnc_id")
# Create an ordered list of the rna_results
rna_list <- rna_results[order(rna_results$log2FoldChange, decreasing = TRUE),]
rna_list <- rna_list[!is.na(rna_list$entrezgene_id),c("entrezgene_id", "log2FoldChange")]
# Distill rna_results list into simplified gene_list
gene_list <- rna_list$log2FoldChange
names(gene_list) <- rna_list$entrezgene_id
##### GO ENRICHMENT #####
# Create GO enrichment analysis (over representation)
gor <- enrichGO(gene = names(gene_list),
OrgDb = org.Hs.eg.db,
ont = "ALL",
pvalueCutoff = 0.05,
readable = TRUE)
# Create KEGG pathway gene enrichment analysis and make the file readable
# options(clusterProfiler.download.method = "wininet") #If KEGG isn't receiving data from web run this command
keggr <- enrichKEGG(gene = names(gene_list),
organism = "hsa",
keyType = "ncbi-geneid",
pvalueCutoff = 0.05)
keggr <- setReadable(keggr, OrgDb = org.Hs.eg.db, keyType="ENTREZID")
# Get the list of significant KEGG pathways
pathway_list <- keggr$ID[keggr$qvalue < 0.05]
View(keggr)
View(rna_results)
rna_list$log2FoldChange
names(gene_list)
rna_list$entrezgene_id
df1 <- read.csv("condition_2_D_vs_1_E_kegg.csv")
View(df1)
df1 <- read.csv("condition_2_D_vs_1_E_kegg.csv", head = "False")
df1 <- read.csv("condition_2_D_vs_1_E_kegg.csv", head = "false")
df1 <- read.csv("condition_2_D_vs_1_E_kegg.csv", header=TRUE)
View(df1)
df1 <- read.csv("condition_2_D_vs_1_E_kegg.csv", header= FALSE)
View(df1)
df1 <- read.csv("condition_2_D_vs_1_E_kegg.csv", header= TRUE, row.names=1)
View(df1)
df1 <- read.csv("condition_2_D_vs_1_E_kegg.csv", header= TRUE)
View(df1)
df1 <- read.csv("condition_2_D_vs_1_E_kegg.csv", header = TRUE)[, -1]
View(df1)
df2 <- read.csv("condition_3_P_vs_2_D_kegg.csv", header = TRUE)[, -1]
df1$ID
common_elements <- intersect(df1$ID, df2$ID)
common_elements <- list(intersect(df1$ID, df2$ID))
df1 <- read.csv("condition_2_D_vs_1_E_kegg.csv", header = TRUE)[, -1]
df2 <- read.csv("condition_3_P_vs_2_D_kegg.csv", header = TRUE)[, -1]
common_elements <- list(intersect(df1$ID, df2$ID))
View(common_elements)
common_elements <- intersect(df1$ID, df2$ID)
df1_KEGG <- read.csv("condition_2_D_vs_1_E_kegg.csv", header = TRUE)[, -1]
df2_KEGG <- read.csv("condition_3_P_vs_2_D_kegg.csv", header = TRUE)[, -1]
df1_GEN <- read.csv("condition_2_D_vs_1_E_gen.csv", header = TRUE)[, -1]
df2_GEN <- read.csv("condition_3_P_vs_2_D_gen.csv", header = TRUE)[, -1]
common_elements <- intersect(df1_KEGG$ID, df2_KEGG$ID)
View(df2_GEN)
View(df1_GEN)
View(df1_KEGG)
df1_KEGG$geneID
k <- apply(strsplit(df1_KEGG$geneID, "/"), as.list)
# Example dataframe
df <- data.frame(ID = 1:3,
Gene = c("CHRM1/TGFA/ITGA10/LPAR2/PRKCA/ITGB4",
"ABC/DEF/GHI",
"XYZ/PQR"))
# Split the string into a list using sapply
df$Gene_list <- sapply(strsplit(df$Gene, "/"), as.list)
# Print the modified dataframe
print(df)
View(df)
k <- sapply(strsplit(df1_KEGG$geneID, "/"), as.list)
k
k[1]
k[[1]
]
length(k)
length(k[[1]])
length(k[[2]])
View(df1_KEGG)
df1_GEN[[1]][[8]]
df1_GEN[[1]]
df1_GEN[[1]][[1]]
df1_GEN[[1]][[2]]
df1_KEGG[[1]][[8]]
df1_KEGG[[1]]
df1_KEGG[[8]]
df1_KEGG[[8]][[1]]
df1_KEGG$geneID <- sapply(strsplit(df1_KEGG$geneID, "/"), as.list)
View(df1_KEGG[[8]][[1]])
common_df <- df1_KEGG[df1_KEGG$ID %in% common_elements, ]
View(common_df)
common_elements <- intersect(df1_KEGG$ID, df2_KEGG$ID)
common_df <- df1_KEGG[common_df$ID %in% common_elements, ]
df1_KEGG$geneID <- sapply(strsplit(common_df$geneID, "/"), as.list)
View(common_df)
common_elements <- intersect(df1_KEGG$ID, df2_KEGG$ID)
common_df <- df1_KEGG[common_df$ID %in% common_elements, ]
common_df$geneID <- sapply(strsplit(common_df$geneID, "/"), as.list)
target_gene <- sapply(strsplit(common_df$geneID, "/"), as.list)
df1_KEGG <- read.csv("condition_2_D_vs_1_E_kegg.csv", header = TRUE)[, -1]
df2_KEGG <- read.csv("condition_3_P_vs_2_D_kegg.csv", header = TRUE)[, -1]
df1_GEN <- read.csv("condition_2_D_vs_1_E_gen.csv", header = TRUE)[, -1]
df2_GEN <- read.csv("condition_3_P_vs_2_D_gen.csv", header = TRUE)[, -1]
common_elements <- intersect(df1_KEGG$ID, df2_KEGG$ID)
common_df <- df1_KEGG[common_df$ID %in% common_elements, ]
target_gene <- sapply(strsplit(common_df$geneID, "/"), as.list)
View(target_gene)
common_elements <- intersect(df1_KEGG$ID, df2_KEGG$ID)
common_df <- df1_KEGG[common_df$ID %in% common_elements, ]
View(common_df)
target_gene <- sapply(strsplit(common_df$geneID, "/"), as.list)
View(target_gene)
target_gene[[1]]
target_gene[[1]][[1]]
target_gene[[1]]
target_gene[[2]]
View(df1_GEN)
df1_GEN_filtered <- df1_KEGG[df1_KEGG$GENEID %in% common_df[[1]], ]
View(df1_GEN_filtered)
common_df[[1]]
target_gene[[1]]
df1_GEN_filtered <- df1_KEGG[df1_KEGG$GENEID %in% target_gene[[1]], ]
View(df1_GEN_filtered)
target_gene[[1]]
df1_KEGG$GENEID
df1_GEN_filtered <- df1_GEN[df1_GEN$GENEID %in% target_gene[[1]], ]
df2_GEN_filtered <- df2_GEN[df1_GEN$GENEID %in% target_gene[[1]], ]
View(df2_GEN_filtered)
Holistic_view <-  merge(df1_GEN_filtered, df2_GEN_filtered, by = "GENEID")
View(Holistic_view)
common_elements
View(Holistic_view)
library(ggplot2)
library(dplyr)
library(hrbrthemes)
F1 <- read.csv("condition_2_D_vs_1_E_gen.csv", header=TRUE, row.names=1)
F2 <- read.csv("condition_3_P_vs_2_D_gen.csv", header=TRUE, row.names=1)
F1_filtered <- F1[F1$hgnc_id%in% F2$hgnc_id,]
F1_filtered$phase <- "1"
F2_filtered <- F2[F2$hgnc_id %in% F1$hgnc_id,]
F2_filtered$phase <- "2"
Merge1 <- merge(F1_filtered, F2_filtered, by = "hgnc_id") %>%
mutate(diff_log2 = abs(log2FoldChange.x - log2FoldChange.y)) %>%
arrange(diff_log2)
write.csv(Merge1, "gen_compare_diff1_diff2.csv")
ggplot(Merge1) +
geom_segment( aes(x = GENEID.x, xend = GENEID.x, y = log2FoldChange.x, yend = log2FoldChange.y)) +
geom_point( aes(x = GENEID.x, y = log2FoldChange.x), color=rgb(0.2,0.7,0.1,0.5), size=3 ) +
geom_point( aes(x = GENEID.x, y = log2FoldChange.y), color=rgb(0.7,0.2,0.1,0.5), size=3 ) +
coord_flip()+
theme_ipsum() +
theme(
legend.position = "none",
) +
xlab("Gens") +
ylab("Difference in log2 counts")
View(Merge1)
library(biomaRt)
library(org.Hs.eg.db)
library(clusterProfiler)
library(pathview)
library(STRINGdb)
# Load dataset
rna_results <- read.csv("condition_2_D_vs_1_E.csv", header=TRUE, row.names=1)
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = rna_results$Row.names,
mart = ensembl_m)
# Merge gen names to gen ID
rna_results <- merge(rna_results, hgnc_m, by.x = "Row.names", by.y = "ensembl_gene_id")
# Load dataset
rna_results <- read.csv("condition_2_D_vs_1_E.csv", header=TRUE, row.names=1)
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
View(rna_results)
Merge1$GENEID.x
gor <- enrichGO(gene = Merge1$GENEID.x,
OrgDb = org.Hs.eg.db,
ont = "ALL",
pvalueCutoff = 0.05,
readable = TRUE)
library(biomaRt)
library(org.Hs.eg.db)
library(clusterProfiler)
library(pathview)
library(STRINGdb)
# Load dataset
rna_results <- read.csv("condition_2_D_vs_1_E.csv", header=TRUE, row.names=1)
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
library(biomaRt)
library(org.Hs.eg.db)
library(clusterProfiler)
library(pathview)
library(STRINGdb)
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
options(repos = BiocManager::repositories())
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
View(rna_results)
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = rna_results$Row.names,
mart = ensembl_m)
# Merge gen names to gen ID
rna_results <- merge(rna_results, hgnc_m, by.x = "Row.names", by.y = "ensembl_gene_id")
# Drop all empty rows and anything not significant
# Drop all the wierd stuffs like N/A or blanks
rna_results <- rna_results[rna_results$pvalue < 0.05,]
rna_results <- rna_results[!apply(rna_results == "", 1, any), ,]
rna_results <- rna_results[!is.na(rna_results$pvalue),]
rna_results <- rna_results[!is.na(rna_results$hgnc_id),]
# Convert HGNC IDs into EntrezGene IDs
ensembl_h <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl")
hgnc_h <- getBM(filters = "hgnc_id",
attributes = c("hgnc_id", "entrezgene_id"),
values = rna_results$hgnc_id,
mart = ensembl_h)
hgnc_duplicated <- hgnc_h[duplicated(hgnc_h$hgnc_id),]
hgnc_h <- hgnc_h[!duplicated(hgnc_h$hgnc_id),]
rna_results <- merge(rna_results, hgnc_h, by.x = "hgnc_id", by.y = "hgnc_id")
# Create an ordered list of the rna_results
rna_list <- rna_results[order(rna_results$log2FoldChange, decreasing = TRUE),]
rna_list <- rna_list[!is.na(rna_list$entrezgene_id),c("entrezgene_id", "log2FoldChange")]
# Distill rna_results list into simplified gene_list
gene_list <- rna_list$log2FoldChange
names(gene_list) <- rna_list$entrezgene_id
rna_list$entrezgene_id
View(rna_list)
names(gene_list)
F1 <- read.csv("condition_2_D_vs_1_E_gen.csv", header=TRUE, row.names=1)
F2 <- read.csv("condition_3_P_vs_2_D_gen.csv", header=TRUE, row.names=1)
F1_filtered <- F1[F1$hgnc_id%in% F2$hgnc_id,]
F1_filtered$phase <- "1"
F2_filtered <- F2[F2$hgnc_id %in% F1$hgnc_id,]
F2_filtered$phase <- "2"
Merge1 <- merge(F1_filtered, F2_filtered, by = "hgnc_id") %>%
mutate(diff_log2 = abs(log2FoldChange.x - log2FoldChange.y)) %>%
arrange(diff_log2)
View(Merge1)
View(rna_results)
setwd("~/GitHub/Research_Hunt")
k1 <- gene_list
gor <- enrichGO(gene = k1,
OrgDb = org.Hs.eg.db,
ont = "ALL",
pvalueCutoff = 0.05,
readable = TRUE)
rna_results <- read.csv("condition_2_D_vs_1_E.csv", header=TRUE, row.names=1)
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = rna_results$Row.names,
mart = ensembl_m)
# Merge gen names to gen ID
rna_results <- merge(rna_results, hgnc_m, by.x = "Row.names", by.y = "ensembl_gene_id")
# Drop all empty rows and anything not significant
# Drop all the wierd stuffs like N/A or blanks
rna_results <- rna_results[rna_results$pvalue < 0.05,]
rna_results <- rna_results[!apply(rna_results == "", 1, any), ,]
rna_results <- rna_results[!is.na(rna_results$pvalue),]
rna_results <- rna_results[!is.na(rna_results$hgnc_id),]
#write.csv(rna_results, "condition_2_D_vs_1_E_gen.csv")
# Convert HGNC IDs into EntrezGene IDs
ensembl_h <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl")
hgnc_h <- getBM(filters = "hgnc_id",
attributes = c("hgnc_id", "entrezgene_id"),
values = rna_results$hgnc_id,
mart = ensembl_h)
hgnc_duplicated <- hgnc_h[duplicated(hgnc_h$hgnc_id),]
hgnc_h <- hgnc_h[!duplicated(hgnc_h$hgnc_id),]
rna_results <- merge(rna_results, hgnc_h, by.x = "hgnc_id", by.y = "hgnc_id")
# Create an ordered list of the rna_results
rna_list <- rna_results[order(rna_results$log2FoldChange, decreasing = TRUE),]
rna_list <- rna_list[!is.na(rna_list$entrezgene_id),c("entrezgene_id", "log2FoldChange")]
# Distill rna_results list into simplified gene_list
gene_list <- rna_list$log2FoldChange
names(gene_list) <- rna_list$entrezgene_id
##### GO ENRICHMENT #####
# Create GO enrichment analysis (over representation)
gor <- enrichGO(gene = names(gene_list),
OrgDb = org.Hs.eg.db,
ont = "ALL",
pvalueCutoff = 0.05,
readable = TRUE)
View(gor)
g1 <- gor.data.frame()
g1 <- data.frame(gor)
View(g1)
gor <- enrichGO(gene = k1,
OrgDb = org.Hs.eg.db,
ont = "ALL",
pvalueCutoff = 0.05,
readable = TRUE)
names(gene_list)
k1 <- names(gene_list)
k1
gor <- enrichGO(gene = k1,
OrgDb = org.Hs.eg.db,
ont = "ALL",
pvalueCutoff = 0.05,
readable = TRUE)
rna_results <- read.csv("condition_3_P_vs_2_D.csv", header=TRUE, row.names=1)
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = rna_results$Row.names,
mart = ensembl_m)
rna_results <- merge(rna_results, hgnc_m, by.x = "Row.names", by.y = "ensembl_gene_id")
# rna_results <- merge(rna_results, uniprot, by.x = "Row.names", by.y = "ensembl_gene_id")
# Drop all empty rows and anything not significant
rna_results <- rna_results[rna_results$pvalue < 0.05,]
rna_results <- rna_results[!apply(rna_results == "", 1, any), ,]
rna_results <- rna_results[!is.na(rna_results$pvalue),]
rna_results <- rna_results[!is.na(rna_results$hgnc_id),]
#write.csv(rna_results, "condition_3_P_vs_2_D_gen.csv")
# Convert HGNC IDs into EntrezGene IDs
ensembl_h <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl")
hgnc_h <- getBM(filters = "hgnc_id",
attributes = c("hgnc_id", "entrezgene_id"),
values = rna_results$hgnc_id,
mart = ensembl_h)
hgnc_duplicated <- hgnc_h[duplicated(hgnc_h$hgnc_id),]
hgnc_h <- hgnc_h[!duplicated(hgnc_h$hgnc_id),]
rna_results <- merge(rna_results, hgnc_h, by.x = "hgnc_id", by.y = "hgnc_id")
# Create an ordered list of the rna_results
rna_list <- rna_results[order(rna_results$log2FoldChange, decreasing = TRUE),]
rna_list <- rna_list[!is.na(rna_list$entrezgene_id),c("entrezgene_id", "log2FoldChange")]
# Distill rna_results list into simplified gene_list
gene_list <- rna_list$log2FoldChange
names(gene_list) <- rna_list$entrezgene_id
k2 <- names(gene_list)
##Comparison
common_elements <- intersect(k1, k2)
gor <- enrichGO(gene = common_elements,
OrgDb = org.Hs.eg.db,
ont = "ALL",
pvalueCutoff = 0.05,
readable = TRUE)
g1 <- data.frame(gor)
write.csv("541GO.csv", g1)
write.csv(g1, "541GO.csv")
keggr <- enrichKEGG(gene = common_elements,
organism = "hsa",
keyType = "ncbi-geneid",
pvalueCutoff = 0.05)
keggr <- setReadable(keggr, OrgDb = org.Hs.eg.db, keyType="ENTREZID")
k1 <- data.frame(keggr)
write.csv(g1, "541KEGG.csv")
pathway_list <- keggr$ID[keggr$qvalue < 0.05]
pathway_list
rna_results <- read.csv("condition_2_D_vs_1_E.csv", header=TRUE, row.names=1)
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = rna_results$Row.names,
mart = ensembl_m)
# Merge gen names to gen ID
rna_results <- merge(rna_results, hgnc_m, by.x = "Row.names", by.y = "ensembl_gene_id")
# Drop all empty rows and anything not significant
# Drop all the wierd stuffs like N/A or blanks
rna_results <- rna_results[rna_results$pvalue < 0.05,]
rna_results <- rna_results[!apply(rna_results == "", 1, any), ,]
rna_results <- rna_results[!is.na(rna_results$pvalue),]
rna_results <- rna_results[!is.na(rna_results$hgnc_id),]
#write.csv(rna_results, "condition_2_D_vs_1_E_gen.csv")
# Convert HGNC IDs into EntrezGene IDs
ensembl_h <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl")
hgnc_h <- getBM(filters = "hgnc_id",
attributes = c("hgnc_id", "entrezgene_id"),
values = rna_results$hgnc_id,
mart = ensembl_h)
hgnc_duplicated <- hgnc_h[duplicated(hgnc_h$hgnc_id),]
hgnc_h <- hgnc_h[!duplicated(hgnc_h$hgnc_id),]
rna_results <- merge(rna_results, hgnc_h, by.x = "hgnc_id", by.y = "hgnc_id")
# Create an ordered list of the rna_results
rna_list <- rna_results[order(rna_results$log2FoldChange, decreasing = TRUE),]
rna_list <- rna_list[!is.na(rna_list$entrezgene_id),c("entrezgene_id", "log2FoldChange")]
# Distill rna_results list into simplified gene_list
gene_list <- rna_list$log2FoldChange
names(gene_list) <- rna_list$entrezgene_id
k1 <- names(gene_list)
k1
# Load dataset
rna_results <- read.csv("condition_2_D_vs_1_E.csv", header=TRUE, row.names=1)
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
library(biomaRt)
library(org.Hs.eg.db)
library(clusterProfiler)
library(pathview)
library(STRINGdb)
options(repos = BiocManager::repositories())
# Load dataset
rna_results <- read.csv("condition_2_D_vs_1_E.csv", header=TRUE, row.names=1)
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
library(biomaRt)
# Load dataset
rna_results <- read.csv("condition_2_D_vs_1_E.csv", header=TRUE, row.names=1)
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
F1 <- read.csv("condition_2_D_vs_1_E_gen.csv", header=TRUE, row.names=1)
F2 <- read.csv("condition_3_P_vs_2_D_gen.csv", header=TRUE, row.names=1)
F1_filtered <- F1[F1$hgnc_id%in% F2$hgnc_id,]
F1_filtered$phase <- "1"
F2_filtered <- F2[F2$hgnc_id %in% F1$hgnc_id,]
F2_filtered$phase <- "2"
df1_KEGG <- read.csv("condition_2_D_vs_1_E_kegg.csv", header = TRUE)[, -1]
df2_KEGG <- read.csv("condition_3_P_vs_2_D_kegg.csv", header = TRUE)[, -1]
df1_GEN <- read.csv("condition_2_D_vs_1_E_gen.csv", header = TRUE)[, -1]
df2_GEN <- read.csv("condition_3_P_vs_2_D_gen.csv", header = TRUE)[, -1]
common_elements <- intersect(df1_KEGG$ID, df2_KEGG$ID)
common_df <- df1_KEGG[common_df$ID %in% common_elements, ]
common_elements <- intersect(df1_KEGG$ID, df2_KEGG$ID)
common_df <- df1_KEGG[common_df$ID %in% common_elements, ]
common_elements <- intersect(df1_KEGG$ID, df2_KEGG$ID)
common_elements
df1_KEGG$ID
library(biomaRt)
library(org.Hs.eg.db)
library(clusterProfiler)
library(pathview)
library(STRINGdb)
options(repos = BiocManager::repositories())
# Load dataset
rna_results <- read.csv("condition_2_D_vs_1_E.csv", header=TRUE, row.names=1)
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
hgnc_m <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_id"),
values = rna_results$Row.names,
mart = ensembl_m)
# Merge gen names to gen ID
rna_results <- merge(rna_results, hgnc_m, by.x = "Row.names", by.y = "ensembl_gene_id")
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
options(repos = BiocManager::repositories())
# Add HGNC and uniprot names to the database
ensembl_m <- useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "nvison_gene_ensembl")
